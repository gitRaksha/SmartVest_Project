
Project_17_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08009df8  08009df8  0000adf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ac  0800a3ac  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a3ac  0800a3ac  0000b3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b4  0800a3b4  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b4  0800a3b4  0000b3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3b8  0800a3b8  0000b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a3bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1dc  2**0
                  CONTENTS
 10 .bss          000003f4  200001dc  200001dc  0000c1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005d0  200005d0  0000c1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106f1  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002498  00000000  00000000  0001c8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  0001ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d75  00000000  00000000  0001fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240ac  00000000  00000000  00020c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ed3  00000000  00000000  00044cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcb2f  00000000  00000000  00058bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001356fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dec  00000000  00000000  00135740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013b52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ddc 	.word	0x08009ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009ddc 	.word	0x08009ddc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000ed4:	b4b0      	push	{r4, r5, r7}
 8000ed6:	b08f      	sub	sp, #60	@ 0x3c
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000edc:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	new_LoRa.power				   = POWER_20db;
 8000ef4:	23ff      	movs	r3, #255	@ 0xff
 8000ef6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.overCurrentProtection = 100       ;
 8000efa:	2364      	movs	r3, #100	@ 0x64
 8000efc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	new_LoRa.preamble			   = 8         ;
 8000f00:	2308      	movs	r3, #8
 8000f02:	863b      	strh	r3, [r7, #48]	@ 0x30

	return new_LoRa;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	461d      	mov	r5, r3
 8000f08:	f107 0408 	add.w	r4, r7, #8
 8000f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	373c      	adds	r7, #60	@ 0x3c
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bcb0      	pop	{r4, r5, r7}
 8000f24:	4770      	bx	lr

08000f26 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000f30:	2101      	movs	r1, #1
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f9ff 	bl	8001336 <LoRa_read>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d107      	bne.n	8000f56 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	f023 0307 	bic.w	r3, r3, #7
 8000f4c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
 8000f54:	e03e      	b.n	8000fd4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d10c      	bne.n	8000f76 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f60:	f023 0307 	bic.w	r3, r3, #7
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	61da      	str	r2, [r3, #28]
 8000f74:	e02e      	b.n	8000fd4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d10c      	bne.n	8000f96 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f80:	f023 0307 	bic.w	r3, r3, #7
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	f043 0303 	orr.w	r3, r3, #3
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2203      	movs	r2, #3
 8000f92:	61da      	str	r2, [r3, #28]
 8000f94:	e01e      	b.n	8000fd4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d10c      	bne.n	8000fb6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa0:	f023 0307 	bic.w	r3, r3, #7
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f043 0305 	orr.w	r3, r3, #5
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	61da      	str	r2, [r3, #28]
 8000fb4:	e00e      	b.n	8000fd4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b06      	cmp	r3, #6
 8000fba:	d10b      	bne.n	8000fd4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	f043 0306 	orr.w	r3, r3, #6
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2206      	movs	r2, #6
 8000fd2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2101      	movs	r1, #1
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f9c5 	bl	800136a <LoRa_write>
	//HAL_Delay(10);
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	889b      	ldrh	r3, [r3, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	f002 fafe 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6998      	ldr	r0, [r3, #24]
 800100c:	88fa      	ldrh	r2, [r7, #6]
 800100e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	f004 fb0b 	bl	800562e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001018:	bf00      	nop
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4618      	mov	r0, r3
 8001020:	f004 ff0b 	bl	8005e3a <HAL_SPI_GetState>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d1f7      	bne.n	800101a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6998      	ldr	r0, [r3, #24]
 800102e:	8b3a      	ldrh	r2, [r7, #24]
 8001030:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001034:	6839      	ldr	r1, [r7, #0]
 8001036:	f004 fc3e 	bl	80058b6 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800103a:	bf00      	nop
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fefa 	bl	8005e3a <HAL_SPI_GetState>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d1f7      	bne.n	800103c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	889b      	ldrh	r3, [r3, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	4619      	mov	r1, r3
 8001058:	f002 fad4 	bl	8003604 <HAL_GPIO_WritePin>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	889b      	ldrh	r3, [r3, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	f002 fac0 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6998      	ldr	r0, [r3, #24]
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	f004 facd 	bl	800562e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001094:	bf00      	nop
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fecd 	bl	8005e3a <HAL_SPI_GetState>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d1f7      	bne.n	8001096 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6998      	ldr	r0, [r3, #24]
 80010aa:	8b3a      	ldrh	r2, [r7, #24]
 80010ac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	f004 fabc 	bl	800562e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010b6:	bf00      	nop
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 febc 	bl	8005e3a <HAL_SPI_GetState>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d1f7      	bne.n	80010b8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	889b      	ldrh	r3, [r3, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	f002 fa96 	bl	8003604 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80010ec:	2126      	movs	r1, #38	@ 0x26
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f921 	bl	8001336 <LoRa_read>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e003      	b.n	8001110 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	f023 0308 	bic.w	r3, r3, #8
 800110e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	461a      	mov	r2, r3
 8001114:	2126      	movs	r1, #38	@ 0x26
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f927 	bl	800136a <LoRa_write>
	HAL_Delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f001 fbff 	bl	8002920 <HAL_Delay>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800112c:	b580      	push	{r7, lr}
 800112e:	b096      	sub	sp, #88	@ 0x58
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <LoRa_setAutoLDO+0x68>)
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4611      	mov	r1, r2
 800113c:	2250      	movs	r2, #80	@ 0x50
 800113e:	4618      	mov	r0, r3
 8001140:	f006 faa9 	bl	8007696 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800114a:	461a      	mov	r2, r3
 800114c:	2301      	movs	r3, #1
 800114e:	4093      	lsls	r3, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f9e7 	bl	8000524 <__aeabi_i2d>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	3358      	adds	r3, #88	@ 0x58
 8001160:	443b      	add	r3, r7
 8001162:	3b50      	subs	r3, #80	@ 0x50
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fb70 	bl	800084c <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fcf0 	bl	8000b58 <__aeabi_d2iz>
 8001178:	4603      	mov	r3, r0
 800117a:	2b10      	cmp	r3, #16
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffaa 	bl	80010e0 <LoRa_setLowDaraRateOptimization>
}
 800118c:	bf00      	nop
 800118e:	3758      	adds	r7, #88	@ 0x58
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08009df8 	.word	0x08009df8

08001198 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	04db      	lsls	r3, r3, #19
 80011a6:	115b      	asrs	r3, r3, #5
 80011a8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	0c1b      	lsrs	r3, r3, #16
 80011ae:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	461a      	mov	r2, r3
 80011b4:	2106      	movs	r1, #6
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8d7 	bl	800136a <LoRa_write>
	HAL_Delay(5);
 80011bc:	2005      	movs	r0, #5
 80011be:	f001 fbaf 	bl	8002920 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	461a      	mov	r2, r3
 80011cc:	2107      	movs	r1, #7
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8cb 	bl	800136a <LoRa_write>
	HAL_Delay(5);
 80011d4:	2005      	movs	r0, #5
 80011d6:	f001 fba3 	bl	8002920 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2108      	movs	r1, #8
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f8c0 	bl	800136a <LoRa_write>
	HAL_Delay(5);
 80011ea:	2005      	movs	r0, #5
 80011ec:	f001 fb98 	bl	8002920 <HAL_Delay>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	dd01      	ble.n	800120c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001208:	230c      	movs	r3, #12
 800120a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b06      	cmp	r3, #6
 8001210:	dc01      	bgt.n	8001216 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001212:	2307      	movs	r3, #7
 8001214:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001216:	211e      	movs	r1, #30
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f88c 	bl	8001336 <LoRa_read>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f001 fb7c 	bl	8002920 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	b2da      	uxtb	r2, r3
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	461a      	mov	r2, r3
 8001240:	211e      	movs	r1, #30
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f891 	bl	800136a <LoRa_write>
	HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f001 fb69 	bl	8002920 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff6c 	bl	800112c <LoRa_setAutoLDO>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	461a      	mov	r2, r3
 800126c:	2109      	movs	r1, #9
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f87b 	bl	800136a <LoRa_write>
	HAL_Delay(10);
 8001274:	200a      	movs	r0, #10
 8001276:	f001 fb53 	bl	8002920 <HAL_Delay>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b2c      	cmp	r3, #44	@ 0x2c
 8001298:	d801      	bhi.n	800129e <LoRa_setOCP+0x1a>
		current = 45;
 800129a:	232d      	movs	r3, #45	@ 0x2d
 800129c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80012a2:	d901      	bls.n	80012a8 <LoRa_setOCP+0x24>
		current = 240;
 80012a4:	23f0      	movs	r3, #240	@ 0xf0
 80012a6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	2b78      	cmp	r3, #120	@ 0x78
 80012ac:	d809      	bhi.n	80012c2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	3b2d      	subs	r3, #45	@ 0x2d
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <LoRa_setOCP+0x78>)
 80012b4:	fb82 1203 	smull	r1, r2, r2, r3
 80012b8:	1052      	asrs	r2, r2, #1
 80012ba:	17db      	asrs	r3, r3, #31
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e00b      	b.n	80012da <LoRa_setOCP+0x56>
	else if(current <= 240)
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80012c6:	d808      	bhi.n	80012da <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	331e      	adds	r3, #30
 80012cc:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <LoRa_setOCP+0x78>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	1092      	asrs	r2, r2, #2
 80012d4:	17db      	asrs	r3, r3, #31
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	3320      	adds	r3, #32
 80012de:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	461a      	mov	r2, r3
 80012e4:	210b      	movs	r1, #11
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f83f 	bl	800136a <LoRa_write>
	HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 fb17 	bl	8002920 <HAL_Delay>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	66666667 	.word	0x66666667

08001300 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001308:	211e      	movs	r1, #30
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f813 	bl	8001336 <LoRa_read>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	f043 0307 	orr.w	r3, r3, #7
 800131a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	461a      	mov	r2, r3
 8001320:	211e      	movs	r1, #30
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f821 	bl	800136a <LoRa_write>
	HAL_Delay(10);
 8001328:	200a      	movs	r0, #10
 800132a:	f001 faf9 	bl	8002920 <HAL_Delay>
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af02      	add	r7, sp, #8
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001348:	b2db      	uxtb	r3, r3
 800134a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800134c:	f107 030f 	add.w	r3, r7, #15
 8001350:	f107 010e 	add.w	r1, r7, #14
 8001354:	2201      	movs	r2, #1
 8001356:	9200      	str	r2, [sp, #0]
 8001358:	2201      	movs	r2, #1
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe44 	bl	8000fe8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af02      	add	r7, sp, #8
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	70fb      	strb	r3, [r7, #3]
 8001376:	4613      	mov	r3, r2
 8001378:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001380:	b2db      	uxtb	r3, r3
 8001382:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001384:	78bb      	ldrb	r3, [r7, #2]
 8001386:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001388:	f107 030f 	add.w	r3, r7, #15
 800138c:	f107 010e 	add.w	r1, r7, #14
 8001390:	2201      	movs	r2, #1
 8001392:	9200      	str	r2, [sp, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fe64 	bl	8001064 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	461a      	mov	r2, r3
 80013b0:	460b      	mov	r3, r1
 80013b2:	72fb      	strb	r3, [r7, #11]
 80013b4:	4613      	mov	r3, r2
 80013b6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	889b      	ldrh	r3, [r3, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	4619      	mov	r1, r3
 80013ce:	f002 f919 	bl	8003604 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6998      	ldr	r0, [r3, #24]
 80013d6:	f107 0117 	add.w	r1, r7, #23
 80013da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013de:	2201      	movs	r2, #1
 80013e0:	f004 f925 	bl	800562e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80013e4:	bf00      	nop
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 fd25 	bl	8005e3a <HAL_SPI_GetState>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d1f7      	bne.n	80013e6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6998      	ldr	r0, [r3, #24]
 80013fa:	7abb      	ldrb	r3, [r7, #10]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f004 f913 	bl	800562e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001408:	bf00      	nop
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4618      	mov	r0, r3
 8001410:	f004 fd13 	bl	8005e3a <HAL_SPI_GetState>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d1f7      	bne.n	800140a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	889b      	ldrh	r3, [r3, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	4619      	mov	r1, r3
 8001426:	f002 f8ed 	bl	8003604 <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]

	return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	460b      	mov	r3, r1
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	4613      	mov	r3, r2
 800145c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001464:	2101      	movs	r1, #1
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fd5d 	bl	8000f26 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800146c:	210e      	movs	r1, #14
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7ff ff61 	bl	8001336 <LoRa_read>
 8001474:	4603      	mov	r3, r0
 8001476:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001478:	7cfb      	ldrb	r3, [r7, #19]
 800147a:	461a      	mov	r2, r3
 800147c:	210d      	movs	r1, #13
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff ff73 	bl	800136a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	461a      	mov	r2, r3
 8001488:	2122      	movs	r1, #34	@ 0x22
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff ff6d 	bl	800136a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	2100      	movs	r1, #0
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff ff84 	bl	80013a4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800149c:	2103      	movs	r1, #3
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff fd41 	bl	8000f26 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80014a4:	2112      	movs	r1, #18
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff ff45 	bl	8001336 <LoRa_read>
 80014ac:	4603      	mov	r3, r0
 80014ae:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80014b0:	7cfb      	ldrb	r3, [r7, #19]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00a      	beq.n	80014d0 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80014ba:	22ff      	movs	r2, #255	@ 0xff
 80014bc:	2112      	movs	r1, #18
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff ff53 	bl	800136a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80014c4:	6979      	ldr	r1, [r7, #20]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff fd2d 	bl	8000f26 <LoRa_gotoMode>
			return 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00f      	b.n	80014f0 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80014dc:	6979      	ldr	r1, [r7, #20]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff fd21 	bl	8000f26 <LoRa_gotoMode>
				return 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e003      	b.n	80014f0 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f001 fa19 	bl	8002920 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80014ee:	e7d9      	b.n	80014a4 <LoRa_transmit+0x5c>
	}
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff96 	bl	8001432 <LoRa_isvalid>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8096 	beq.w	800163a <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fd08 	bl	8000f26 <LoRa_gotoMode>
			HAL_Delay(10);
 8001516:	200a      	movs	r0, #10
 8001518:	f001 fa02 	bl	8002920 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800151c:	2101      	movs	r1, #1
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff09 	bl	8001336 <LoRa_read>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001528:	200a      	movs	r0, #10
 800152a:	f001 f9f9 	bl	8002920 <HAL_Delay>
			data = read | 0x80;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001534:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	461a      	mov	r2, r3
 800153a:	2101      	movs	r1, #1
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff14 	bl	800136a <LoRa_write>
			HAL_Delay(100);
 8001542:	2064      	movs	r0, #100	@ 0x64
 8001544:	f001 f9ec 	bl	8002920 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fe22 	bl	8001198 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe7d 	bl	800125c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fe8a 	bl	8001284 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001570:	2223      	movs	r2, #35	@ 0x23
 8001572:	210c      	movs	r1, #12
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fef8 	bl	800136a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fec0 	bl	8001300 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fe35 	bl	80011f8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800158e:	22ff      	movs	r2, #255	@ 0xff
 8001590:	211f      	movs	r1, #31
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fee9 	bl	800136a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	461a      	mov	r2, r3
 80015b8:	211d      	movs	r1, #29
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fed5 	bl	800136a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fdb3 	bl	800112c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	2120      	movs	r1, #32
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fec8 	bl	800136a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	2121      	movs	r1, #33	@ 0x21
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fec0 	bl	800136a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80015ea:	2140      	movs	r1, #64	@ 0x40
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fea2 	bl	8001336 <LoRa_read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80015fc:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	461a      	mov	r2, r3
 8001602:	2140      	movs	r1, #64	@ 0x40
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff feb0 	bl	800136a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800160a:	2101      	movs	r1, #1
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fc8a 	bl	8000f26 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001618:	200a      	movs	r0, #10
 800161a:	f001 f981 	bl	8002920 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800161e:	2142      	movs	r1, #66	@ 0x42
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fe88 	bl	8001336 <LoRa_read>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b12      	cmp	r3, #18
 800162e:	d101      	bne.n	8001634 <LoRa_init+0x13c>
				return LORA_OK;
 8001630:	23c8      	movs	r3, #200	@ 0xc8
 8001632:	e004      	b.n	800163e <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001634:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001638:	e001      	b.n	800163e <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800163a:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001650:	2254      	movs	r2, #84	@ 0x54
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4803      	ldr	r0, [pc, #12]	@ (8001664 <MPU6050_Init+0x1c>)
 8001656:	f006 f81e 	bl	8007696 <memcpy>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200001f8 	.word	0x200001f8

08001668 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001678:	23d0      	movs	r3, #208	@ 0xd0
 800167a:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	b299      	uxth	r1, r3
 8001684:	f107 020c 	add.w	r2, r7, #12
 8001688:	230a      	movs	r3, #10
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <I2C_Read+0x48>)
 8001690:	f002 f930 	bl	80038f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	b299      	uxth	r1, r3
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	b29b      	uxth	r3, r3
 800169c:	2264      	movs	r2, #100	@ 0x64
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <I2C_Read+0x48>)
 80016a4:	f002 fa24 	bl	8003af0 <HAL_I2C_Master_Receive>
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001f8 	.word	0x200001f8

080016b4 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 80016cc:	23d0      	movs	r3, #208	@ 0xd0
 80016ce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	b299      	uxth	r1, r3
 80016d4:	f107 020c 	add.w	r2, r7, #12
 80016d8:	2364      	movs	r3, #100	@ 0x64
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2302      	movs	r3, #2
 80016de:	4803      	ldr	r0, [pc, #12]	@ (80016ec <I2C_Write8+0x38>)
 80016e0:	f002 f908 	bl	80038f4 <HAL_I2C_Master_Transmit>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200001f8 	.word	0x200001f8

080016f0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	206b      	movs	r0, #107	@ 0x6b
 8001700:	f7ff ffd8 	bl	80016b4 <I2C_Write8>
	HAL_Delay(100);
 8001704:	2064      	movs	r0, #100	@ 0x64
 8001706:	f001 f90b 	bl	8002920 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	791b      	ldrb	r3, [r3, #4]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	019b      	lsls	r3, r3, #6
 800171c:	b25b      	sxtb	r3, r3
 800171e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001722:	b25a      	sxtb	r2, r3
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	4619      	mov	r1, r3
 8001732:	206b      	movs	r0, #107	@ 0x6b
 8001734:	f7ff ffbe 	bl	80016b4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001738:	2064      	movs	r0, #100	@ 0x64
 800173a:	f001 f8f1 	bl	8002920 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	4619      	mov	r1, r3
 8001750:	201a      	movs	r0, #26
 8001752:	f7ff ffaf 	bl	80016b4 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0318 	and.w	r3, r3, #24
 8001766:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	4619      	mov	r1, r3
 800176c:	201b      	movs	r0, #27
 800176e:	f7ff ffa1 	bl	80016b4 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	789b      	ldrb	r3, [r3, #2]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 0318 	and.w	r3, r3, #24
 8001782:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	4619      	mov	r1, r3
 8001788:	201c      	movs	r0, #28
 800178a:	f7ff ff93 	bl	80016b4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 800178e:	2004      	movs	r0, #4
 8001790:	f000 f858 	bl	8001844 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	789b      	ldrb	r3, [r3, #2]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d81b      	bhi.n	80017d4 <MPU6050_Config+0xe4>
 800179c:	a201      	add	r2, pc, #4	@ (adr r2, 80017a4 <MPU6050_Config+0xb4>)
 800179e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a2:	bf00      	nop
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	080017bd 	.word	0x080017bd
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017cd 	.word	0x080017cd
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MPU6050_Config+0x130>)
 80017b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001824 <MPU6050_Config+0x134>)
 80017b8:	601a      	str	r2, [r3, #0]
			break;
 80017ba:	e00c      	b.n	80017d6 <MPU6050_Config+0xe6>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 80017bc:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <MPU6050_Config+0x130>)
 80017be:	4a1a      	ldr	r2, [pc, #104]	@ (8001828 <MPU6050_Config+0x138>)
 80017c0:	601a      	str	r2, [r3, #0]
				break;
 80017c2:	e008      	b.n	80017d6 <MPU6050_Config+0xe6>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 80017c4:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <MPU6050_Config+0x130>)
 80017c6:	4a19      	ldr	r2, [pc, #100]	@ (800182c <MPU6050_Config+0x13c>)
 80017c8:	601a      	str	r2, [r3, #0]
			break;
 80017ca:	e004      	b.n	80017d6 <MPU6050_Config+0xe6>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <MPU6050_Config+0x130>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <MPU6050_Config+0x140>)
 80017d0:	601a      	str	r2, [r3, #0]
			break;
 80017d2:	e000      	b.n	80017d6 <MPU6050_Config+0xe6>
		
		default:
			break;
 80017d4:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d81a      	bhi.n	8001814 <MPU6050_Config+0x124>
 80017de:	a201      	add	r2, pc, #4	@ (adr r2, 80017e4 <MPU6050_Config+0xf4>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	080017fd 	.word	0x080017fd
 80017ec:	08001805 	.word	0x08001805
 80017f0:	0800180d 	.word	0x0800180d
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <MPU6050_Config+0x144>)
 80017f6:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <MPU6050_Config+0x148>)
 80017f8:	601a      	str	r2, [r3, #0]
			break;
 80017fa:	e00c      	b.n	8001816 <MPU6050_Config+0x126>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <MPU6050_Config+0x144>)
 80017fe:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <MPU6050_Config+0x14c>)
 8001800:	601a      	str	r2, [r3, #0]
				break;
 8001802:	e008      	b.n	8001816 <MPU6050_Config+0x126>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <MPU6050_Config+0x144>)
 8001806:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <MPU6050_Config+0x150>)
 8001808:	601a      	str	r2, [r3, #0]
			break;
 800180a:	e004      	b.n	8001816 <MPU6050_Config+0x126>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <MPU6050_Config+0x144>)
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <MPU6050_Config+0x134>)
 8001810:	601a      	str	r2, [r3, #0]
			break;
 8001812:	e000      	b.n	8001816 <MPU6050_Config+0x126>
		
		default:
			break;
 8001814:	bf00      	nop
	}
	
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000024c 	.word	0x2000024c
 8001824:	3d7a0000 	.word	0x3d7a0000
 8001828:	3dfa0000 	.word	0x3dfa0000
 800182c:	3e7a0000 	.word	0x3e7a0000
 8001830:	3efa0000 	.word	0x3efa0000
 8001834:	20000250 	.word	0x20000250
 8001838:	3bfa0000 	.word	0x3bfa0000
 800183c:	3c7a0000 	.word	0x3c7a0000
 8001840:	3cfa0000 	.word	0x3cfa0000

08001844 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4619      	mov	r1, r3
 8001852:	2019      	movs	r0, #25
 8001854:	f7ff ff2e 	bl	80016b4 <I2C_Write8>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	3301      	adds	r3, #1
 800186e:	2201      	movs	r2, #1
 8001870:	4619      	mov	r1, r3
 8001872:	203a      	movs	r0, #58	@ 0x3a
 8001874:	f7ff fef8 	bl	8001668 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001878:	7f7b      	ldrb	r3, [r7, #29]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d043      	beq.n	8001906 <MPU6050_Get_Accel_RawData+0xa6>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	2206      	movs	r2, #6
 8001884:	4619      	mov	r1, r3
 8001886:	203b      	movs	r0, #59	@ 0x3b
 8001888:	f7ff feee 	bl	8001668 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 800188c:	7d3b      	ldrb	r3, [r7, #20]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	7d7a      	ldrb	r2, [r7, #21]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	b21a      	sxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 800189e:	7dbb      	ldrb	r3, [r7, #22]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	7dfa      	ldrb	r2, [r7, #23]
 80018a6:	4413      	add	r3, r2
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 80018b0:	7e3b      	ldrb	r3, [r7, #24]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	7e7a      	ldrb	r2, [r7, #25]
 80018b8:	4413      	add	r3, r2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b21a      	sxth	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	2206      	movs	r2, #6
 80018c8:	4619      	mov	r1, r3
 80018ca:	2043      	movs	r0, #67	@ 0x43
 80018cc:	f7ff fecc 	bl	8001668 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 80018d0:	7b3b      	ldrb	r3, [r7, #12]
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	7b7a      	ldrb	r2, [r7, #13]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b21a      	sxth	r2, r3
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MPU6050_Get_Accel_RawData+0xb0>)
 80018e0:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	4413      	add	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <MPU6050_Get_Accel_RawData+0xb0>)
 80018f2:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80018f4:	7c3b      	ldrb	r3, [r7, #16]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	7c7a      	ldrb	r2, [r7, #17]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <MPU6050_Get_Accel_RawData+0xb0>)
 8001904:	809a      	strh	r2, [r3, #4]
	}
}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000254 	.word	0x20000254

08001914 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff9d 	bl	8001860 <MPU6050_Get_Accel_RawData>
	
	//Accel Scale data 
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 8001926:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001932:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MPU6050_Get_Accel_Scale+0x70>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 8001942:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <MPU6050_Get_Accel_Scale+0x70>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 800195e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MPU6050_Get_Accel_Scale+0x70>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000024c 	.word	0x2000024c

08001988 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001990:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001994:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80019a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80019a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019b0:	e000      	b.n	80019b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f9      	beq.n	80019b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80019be:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <MQ7_ReadPPM>:

const uint32_t MQ7_HIGH_HEAT_DURATION = 60000;
const uint32_t MQ7_LOW_HEAT_DURATION = 90000;

float MQ7_R0 = 10.0f; // calibrated in clean air
float MQ7_ReadPPM(float voltage) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	ed87 0a01 	vstr	s0, [r7, #4]
    float Rs = (5.0f - voltage) / voltage * RL;  // Compute sensor resistance
 80019e2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80019e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80019fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fe:	edc7 7a03 	vstr	s15, [r7, #12]
    float ratio = Rs / MQ7_R0;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <MQ7_ReadPPM+0x60>)
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a10:	edc7 7a02 	vstr	s15, [r7, #8]
    return 99.042f * powf(ratio, -1.518f);  // PPM = a*(Rs/Ro)^b (datasheet curve)
 8001a14:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001a3c <MQ7_ReadPPM+0x64>
 8001a18:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a1c:	f007 fdf8 	bl	8009610 <powf>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001a40 <MQ7_ReadPPM+0x68>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	bfc24dd3 	.word	0xbfc24dd3
 8001a40:	42c61581 	.word	0x42c61581

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a48:	b0b3      	sub	sp, #204	@ 0xcc
 8001a4a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a4c:	f000 fef6 	bl	800283c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a50:	f000 fa88 	bl	8001f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a54:	f000 fbe6 	bl	8002224 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a58:	f000 fb34 	bl	80020c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a5c:	f000 fae0 	bl	8002020 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001a60:	f000 fb94 	bl	800218c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001a64:	f000 fb5c 	bl	8002120 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
// Lora part


	 myLoRa = newLoRa();
 8001a68:	4c35      	ldr	r4, [pc, #212]	@ (8001b40 <main+0xfc>)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fa31 	bl	8000ed4 <newLoRa>
 8001a72:	4625      	mov	r5, r4
 8001a74:	463c      	mov	r4, r7
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a82:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	 myLoRa.CS_port         = NSS_GPIO_Port;
 8001a86:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <main+0xfc>)
 8001a88:	4a2e      	ldr	r2, [pc, #184]	@ (8001b44 <main+0x100>)
 8001a8a:	601a      	str	r2, [r3, #0]
	 myLoRa.CS_pin          = NSS_Pin;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <main+0xfc>)
 8001a8e:	2210      	movs	r2, #16
 8001a90:	809a      	strh	r2, [r3, #4]
	 myLoRa.reset_port      = RST_GPIO_Port;
 8001a92:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <main+0xfc>)
 8001a94:	4a2c      	ldr	r2, [pc, #176]	@ (8001b48 <main+0x104>)
 8001a96:	609a      	str	r2, [r3, #8]
	 myLoRa.reset_pin       = RST_Pin;
 8001a98:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <main+0xfc>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	819a      	strh	r2, [r3, #12]
	 myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <main+0xfc>)
 8001aa0:	4a29      	ldr	r2, [pc, #164]	@ (8001b48 <main+0x104>)
 8001aa2:	611a      	str	r2, [r3, #16]
	 myLoRa.DIO0_pin        = DIO0_Pin;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <main+0xfc>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	829a      	strh	r2, [r3, #20]
	 myLoRa.hSPIx           = &hspi1;
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <main+0xfc>)
 8001aac:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <main+0x108>)
 8001aae:	619a      	str	r2, [r3, #24]

	 myLoRa.frequency             = 433;             // default = 433 MHz
 8001ab0:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <main+0xfc>)
 8001ab2:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001ab6:	621a      	str	r2, [r3, #32]
	 myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001ab8:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <main+0xfc>)
 8001aba:	2207      	movs	r2, #7
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 myLoRa.bandWidth = BW_125KHz; // pour correspondre à 125E3 sur Arduino	 myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <main+0xfc>)
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	 myLoRa.power                 = POWER_17db;      // default = 20db
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <main+0xfc>)
 8001aca:	22fc      	movs	r2, #252	@ 0xfc
 8001acc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	 myLoRa.overCurrentProtection = 125;             // default = 100 mA
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <main+0xfc>)
 8001ad2:	227d      	movs	r2, #125	@ 0x7d
 8001ad4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	 myLoRa.preamble              = 9;              // default = 8;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <main+0xfc>)
 8001ada:	2209      	movs	r2, #9
 8001adc:	851a      	strh	r2, [r3, #40]	@ 0x28
	 myLoRa.syncWord              = 0x34;         // à ajouter si supporté
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <main+0xfc>)
 8001ae0:	2234      	movs	r2, #52	@ 0x34
 8001ae2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	 myLoRa.crcRate = CR_4_5;          // Coding Rate 4/5
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <main+0xfc>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

	 if (LoRa_init(&myLoRa)==LORA_OK) {
 8001aee:	4814      	ldr	r0, [pc, #80]	@ (8001b40 <main+0xfc>)
 8001af0:	f7ff fd02 	bl	80014f8 <LoRa_init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2bc8      	cmp	r3, #200	@ 0xc8
 8001af8:	d137      	bne.n	8001b6a <main+0x126>
	     Lora_stat=1;
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <main+0x10c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	801a      	strh	r2, [r3, #0]
	     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b06:	4813      	ldr	r0, [pc, #76]	@ (8001b54 <main+0x110>)
 8001b08:	f001 fd7c 	bl	8003604 <HAL_GPIO_WritePin>
	     printf("LoRa initialized!\r\n");
 8001b0c:	4812      	ldr	r0, [pc, #72]	@ (8001b58 <main+0x114>)
 8001b0e:	f005 fc2d 	bl	800736c <puts>
	     // Add version check here:
	     uint8_t version = LoRa_read(&myLoRa, RegVersion);
 8001b12:	2142      	movs	r1, #66	@ 0x42
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <main+0xfc>)
 8001b16:	f7ff fc0e 	bl	8001336 <LoRa_read>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	     printf("LoRa Version: 0x%02X\n", version);  // Should be 0x12
 8001b20:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <main+0x118>)
 8001b28:	f005 fbb8 	bl	800729c <iprintf>
	     if (version != 0x12) {
 8001b2c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d017      	beq.n	8001b64 <main+0x120>
	         printf("LoRa Failed!!!\r\n");
 8001b34:	480a      	ldr	r0, [pc, #40]	@ (8001b60 <main+0x11c>)
 8001b36:	f005 fc19 	bl	800736c <puts>
	         Error_Handler();
 8001b3a:	f000 fc47 	bl	80023cc <Error_Handler>
 8001b3e:	e014      	b.n	8001b6a <main+0x126>
 8001b40:	20000398 	.word	0x20000398
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	200002f8 	.word	0x200002f8
 8001b50:	200003c8 	.word	0x200003c8
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	08009e48 	.word	0x08009e48
 8001b5c:	08009e5c 	.word	0x08009e5c
 8001b60:	08009e74 	.word	0x08009e74
	     } else {
	         printf("LoRa Version OK\r\n");
 8001b64:	489d      	ldr	r0, [pc, #628]	@ (8001ddc <main+0x398>)
 8001b66:	f005 fc01 	bl	800736c <puts>

	 }

//MPU6050 Part
  // Initialize MPU6050
  MPU6050_Init(&hi2c1);
 8001b6a:	489d      	ldr	r0, [pc, #628]	@ (8001de0 <main+0x39c>)
 8001b6c:	f7ff fd6c 	bl	8001648 <MPU6050_Init>

  // Test connection
  if(MPU6050_TestConnection() != HAL_OK) {
 8001b70:	f000 fbee 	bl	8002350 <MPU6050_TestConnection>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <main+0x140>
    printf("MPU6050   Connection Failed!\r\n");
 8001b7a:	489a      	ldr	r0, [pc, #616]	@ (8001de4 <main+0x3a0>)
 8001b7c:	f005 fbf6 	bl	800736c <puts>
    Error_Handler();
 8001b80:	f000 fc24 	bl	80023cc <Error_Handler>
  }

  // Configure MPU6050
  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 8001b84:	4b98      	ldr	r3, [pc, #608]	@ (8001de8 <main+0x3a4>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	709a      	strb	r2, [r3, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 8001b8a:	4b97      	ldr	r3, [pc, #604]	@ (8001de8 <main+0x3a4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8001b90:	4b95      	ldr	r3, [pc, #596]	@ (8001de8 <main+0x3a4>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	70da      	strb	r2, [r3, #3]
  myMpuConfig.Sleep_Mode_Bit = 0;
 8001b96:	4b94      	ldr	r3, [pc, #592]	@ (8001de8 <main+0x3a4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	711a      	strb	r2, [r3, #4]
  MPU6050_Config(&myMpuConfig);
 8001b9c:	4892      	ldr	r0, [pc, #584]	@ (8001de8 <main+0x3a4>)
 8001b9e:	f7ff fda7 	bl	80016f0 <MPU6050_Config>



  printf("MPU6050 Initialized Successfully!\r\n");
 8001ba2:	4892      	ldr	r0, [pc, #584]	@ (8001dec <main+0x3a8>)
 8001ba4:	f005 fbe2 	bl	800736c <puts>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bae:	4890      	ldr	r0, [pc, #576]	@ (8001df0 <main+0x3ac>)
 8001bb0:	f001 fd28 	bl	8003604 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001bb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bb8:	f000 feb2 	bl	8002920 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc2:	488b      	ldr	r0, [pc, #556]	@ (8001df0 <main+0x3ac>)
 8001bc4:	f001 fd1e 	bl	8003604 <HAL_GPIO_WritePin>

// MQ-7 part

  HAL_ADC_Start(&hadc1); // or whatever ADC you're using
 8001bc8:	488a      	ldr	r0, [pc, #552]	@ (8001df4 <main+0x3b0>)
 8001bca:	f000 ff11 	bl	80029f0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001bce:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd2:	4888      	ldr	r0, [pc, #544]	@ (8001df4 <main+0x3b0>)
 8001bd4:	f000 ffde 	bl	8002b94 <HAL_ADC_PollForConversion>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Start TIM2 Channel 1 PWM
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4887      	ldr	r0, [pc, #540]	@ (8001df8 <main+0x3b4>)
 8001bdc:	f004 face 	bl	800617c <HAL_TIM_PWM_Start>


  printf("System Initialized\r\n");  // Test message
 8001be0:	4886      	ldr	r0, [pc, #536]	@ (8001dfc <main+0x3b8>)
 8001be2:	f005 fbc3 	bl	800736c <puts>
  printf("MQ-7 Sensor Monitoring Started\r\n");
 8001be6:	4886      	ldr	r0, [pc, #536]	@ (8001e00 <main+0x3bc>)
 8001be8:	f005 fbc0 	bl	800736c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t now = HAL_GetTick();
 8001bec:	f000 fe8c 	bl	8002908 <HAL_GetTick>
 8001bf0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

	      // === MPU6050 Handling ===
	      if (now - last_mpu_update >= 1000)
 8001bf4:	4b83      	ldr	r3, [pc, #524]	@ (8001e04 <main+0x3c0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c02:	f0c0 808a 	bcc.w	8001d1a <main+0x2d6>
	      {
	          last_mpu_update = now;
 8001c06:	4a7f      	ldr	r2, [pc, #508]	@ (8001e04 <main+0x3c0>)
 8001c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c0c:	6013      	str	r3, [r2, #0]

	          MPU6050_Get_Accel_Scale(&myAccelScaled);
 8001c0e:	487e      	ldr	r0, [pc, #504]	@ (8001e08 <main+0x3c4>)
 8001c10:	f7ff fe80 	bl	8001914 <MPU6050_Get_Accel_Scale>

	          float acc_x = myAccelScaled.x;
 8001c14:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <main+0x3c4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	          float acc_y = myAccelScaled.y;
 8001c1c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e08 <main+0x3c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	          float acc_z = myAccelScaled.z;
 8001c24:	4b78      	ldr	r3, [pc, #480]	@ (8001e08 <main+0x3c4>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	          latest_acc_magnitude = sqrtf(acc_x * acc_x + acc_y * acc_y + acc_z * acc_z);
 8001c2c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001c30:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c34:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001c38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c40:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001c44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	f007 fd36 	bl	80096c0 <sqrtf>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	4b6c      	ldr	r3, [pc, #432]	@ (8001e0c <main+0x3c8>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	          printf("acc_magnitude = %.2f\r\n", latest_acc_magnitude);
 8001c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8001e0c <main+0x3c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc70 	bl	8000548 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4868      	ldr	r0, [pc, #416]	@ (8001e10 <main+0x3cc>)
 8001c6e:	f005 fb15 	bl	800729c <iprintf>

	          static uint8_t free_fall_detected = 0;
	          static uint8_t impact_detected = 0;

	          if (latest_acc_magnitude < 1200.0f) {
 8001c72:	4b66      	ldr	r3, [pc, #408]	@ (8001e0c <main+0x3c8>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001e14 <main+0x3d0>
 8001c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d502      	bpl.n	8001c8c <main+0x248>
	              free_fall_detected = 1;
 8001c86:	4b64      	ldr	r3, [pc, #400]	@ (8001e18 <main+0x3d4>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
	          }
	          if (latest_acc_magnitude > 1500.0f) {
 8001c8c:	4b5f      	ldr	r3, [pc, #380]	@ (8001e0c <main+0x3c8>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001e1c <main+0x3d8>
 8001c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	dd02      	ble.n	8001ca6 <main+0x262>
	              impact_detected = 1;
 8001ca0:	4b5f      	ldr	r3, [pc, #380]	@ (8001e20 <main+0x3dc>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
	          }

	          if (free_fall_detected && impact_detected) {
 8001ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e18 <main+0x3d4>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00f      	beq.n	8001cce <main+0x28a>
 8001cae:	4b5c      	ldr	r3, [pc, #368]	@ (8001e20 <main+0x3dc>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <main+0x28a>
	              printf("⚠  FALL DETECTED!\r\n");
 8001cb6:	485b      	ldr	r0, [pc, #364]	@ (8001e24 <main+0x3e0>)
 8001cb8:	f005 fb58 	bl	800736c <puts>

	              free_fall_detected = 0;
 8001cbc:	4b56      	ldr	r3, [pc, #344]	@ (8001e18 <main+0x3d4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
	              impact_detected = 0;
 8001cc2:	4b57      	ldr	r3, [pc, #348]	@ (8001e20 <main+0x3dc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
	              fall_alert_flag = 1; // Flag for LoRa
 8001cc8:	4b57      	ldr	r3, [pc, #348]	@ (8001e28 <main+0x3e4>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
	          }

	          snprintf(swv_buffer, sizeof(swv_buffer),
 8001cce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001cd2:	f7fe fc39 	bl	8000548 <__aeabi_f2d>
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	460d      	mov	r5, r1
 8001cda:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
 8001ce2:	4680      	mov	r8, r0
 8001ce4:	4689      	mov	r9, r1
 8001ce6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001cea:	f7fe fc2d 	bl	8000548 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cf6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cfa:	e9cd 4500 	strd	r4, r5, [sp]
 8001cfe:	4a4b      	ldr	r2, [pc, #300]	@ (8001e2c <main+0x3e8>)
 8001d00:	2180      	movs	r1, #128	@ 0x80
 8001d02:	484b      	ldr	r0, [pc, #300]	@ (8001e30 <main+0x3ec>)
 8001d04:	f005 fb3a 	bl	800737c <sniprintf>
	                   "Accel: X=%7.2f Y=%7.2f Z=%7.2f\r\n"
	                   "--------------------------------\r\n",
	                   acc_x, acc_y, acc_z);
	          printf("%s", swv_buffer);
 8001d08:	4949      	ldr	r1, [pc, #292]	@ (8001e30 <main+0x3ec>)
 8001d0a:	484a      	ldr	r0, [pc, #296]	@ (8001e34 <main+0x3f0>)
 8001d0c:	f005 fac6 	bl	800729c <iprintf>

	          HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // Activity LED
 8001d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d14:	4836      	ldr	r0, [pc, #216]	@ (8001df0 <main+0x3ac>)
 8001d16:	f001 fc8e 	bl	8003636 <HAL_GPIO_TogglePin>
	      }

	      // === MQ7 Sensor Handling ===
	      if (now - last_mq7_update >= 1000)
 8001d1a:	4b47      	ldr	r3, [pc, #284]	@ (8001e38 <main+0x3f4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d28:	d33f      	bcc.n	8001daa <main+0x366>
	      {
	          last_mq7_update = now;
 8001d2a:	4a43      	ldr	r2, [pc, #268]	@ (8001e38 <main+0x3f4>)
 8001d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d30:	6013      	str	r3, [r2, #0]

	          HAL_ADC_Start(&MQ7_ADC_HANDLE);
 8001d32:	4830      	ldr	r0, [pc, #192]	@ (8001df4 <main+0x3b0>)
 8001d34:	f000 fe5c 	bl	80029f0 <HAL_ADC_Start>
	          HAL_ADC_PollForConversion(&MQ7_ADC_HANDLE, HAL_MAX_DELAY);
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	482d      	ldr	r0, [pc, #180]	@ (8001df4 <main+0x3b0>)
 8001d3e:	f000 ff29 	bl	8002b94 <HAL_ADC_PollForConversion>
	          uint32_t adcValue = HAL_ADC_GetValue(&MQ7_ADC_HANDLE);
 8001d42:	482c      	ldr	r0, [pc, #176]	@ (8001df4 <main+0x3b0>)
 8001d44:	f000 ffb1 	bl	8002caa <HAL_ADC_GetValue>
 8001d48:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
	          float voltage = adcValue * 3.3f / 4095.0f;
 8001d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d58:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001e3c <main+0x3f8>
 8001d5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001e40 <main+0x3fc>
 8001d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d68:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	          latest_ppm = MQ7_ReadPPM(voltage);
 8001d6c:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 8001d70:	f7ff fe32 	bl	80019d8 <MQ7_ReadPPM>
 8001d74:	eef0 7a40 	vmov.f32	s15, s0
 8001d78:	4b32      	ldr	r3, [pc, #200]	@ (8001e44 <main+0x400>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]

	          printf("ADC: %lu | Voltage: %.2f V | CO: %.2f PPM\r\n", adcValue, voltage, latest_ppm);
 8001d7e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001d82:	f7fe fbe1 	bl	8000548 <__aeabi_f2d>
 8001d86:	4604      	mov	r4, r0
 8001d88:	460d      	mov	r5, r1
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <main+0x400>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbda 	bl	8000548 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	e9cd 2300 	strd	r2, r3, [sp]
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	462b      	mov	r3, r5
 8001da0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001da4:	4828      	ldr	r0, [pc, #160]	@ (8001e48 <main+0x404>)
 8001da6:	f005 fa79 	bl	800729c <iprintf>
	      }

	      // === MQ7 Heater Control ===
	      if (mq7_heating_phase && (now - mq7_phase_start >= MQ7_HIGH_HEAT_DURATION))
 8001daa:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <main+0x408>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d050      	beq.n	8001e54 <main+0x410>
 8001db2:	4b27      	ldr	r3, [pc, #156]	@ (8001e50 <main+0x40c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d347      	bcc.n	8001e54 <main+0x410>
	      {
	          mq7_phase_start = now;
 8001dc4:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <main+0x40c>)
 8001dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dca:	6013      	str	r3, [r2, #0]
	          mq7_heating_phase = 0;
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <main+0x408>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 70);  // Simulate 1.4V phase
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <main+0x3b4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2246      	movs	r2, #70	@ 0x46
 8001dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dda:	e052      	b.n	8001e82 <main+0x43e>
 8001ddc:	08009e84 	.word	0x08009e84
 8001de0:	200002a4 	.word	0x200002a4
 8001de4:	08009e98 	.word	0x08009e98
 8001de8:	200003d8 	.word	0x200003d8
 8001dec:	08009eb8 	.word	0x08009eb8
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	2000025c 	.word	0x2000025c
 8001df8:	20000350 	.word	0x20000350
 8001dfc:	08009edc 	.word	0x08009edc
 8001e00:	08009ef0 	.word	0x08009ef0
 8001e04:	2000046c 	.word	0x2000046c
 8001e08:	200003cc 	.word	0x200003cc
 8001e0c:	20000464 	.word	0x20000464
 8001e10:	08009f10 	.word	0x08009f10
 8001e14:	44960000 	.word	0x44960000
 8001e18:	20000478 	.word	0x20000478
 8001e1c:	44bb8000 	.word	0x44bb8000
 8001e20:	20000479 	.word	0x20000479
 8001e24:	08009f28 	.word	0x08009f28
 8001e28:	20000460 	.word	0x20000460
 8001e2c:	08009f40 	.word	0x08009f40
 8001e30:	200003e0 	.word	0x200003e0
 8001e34:	08009f84 	.word	0x08009f84
 8001e38:	20000470 	.word	0x20000470
 8001e3c:	40533333 	.word	0x40533333
 8001e40:	457ff000 	.word	0x457ff000
 8001e44:	20000468 	.word	0x20000468
 8001e48:	08009f88 	.word	0x08009f88
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000474 	.word	0x20000474
	      }
	      else if (!mq7_heating_phase && (now - mq7_phase_start >= MQ7_LOW_HEAT_DURATION))
 8001e54:	4b37      	ldr	r3, [pc, #220]	@ (8001f34 <main+0x4f0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d112      	bne.n	8001e82 <main+0x43e>
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <main+0x4f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a35      	ldr	r2, [pc, #212]	@ (8001f3c <main+0x4f8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d30a      	bcc.n	8001e82 <main+0x43e>
	      {
	          mq7_phase_start = now;
 8001e6c:	4a32      	ldr	r2, [pc, #200]	@ (8001f38 <main+0x4f4>)
 8001e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e72:	6013      	str	r3, [r2, #0]
	          mq7_heating_phase = 1;
 8001e74:	4b2f      	ldr	r3, [pc, #188]	@ (8001f34 <main+0x4f0>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 255); // Simulate 5V phase
 8001e7a:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <main+0x4fc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	22ff      	movs	r2, #255	@ 0xff
 8001e80:	635a      	str	r2, [r3, #52]	@ 0x34
	      }

	      // === LoRa Transmission only when needed ===
	      if (fall_alert_flag || latest_ppm > 10.0f)
 8001e82:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <main+0x500>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <main+0x45a>
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <main+0x504>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9c:	dd49      	ble.n	8001f32 <main+0x4ee>
	      {
	          LoRa_gotoMode(&myLoRa, STNBY_MODE);
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	482a      	ldr	r0, [pc, #168]	@ (8001f4c <main+0x508>)
 8001ea2:	f7ff f840 	bl	8000f26 <LoRa_gotoMode>
	          HAL_Delay(50);
 8001ea6:	2032      	movs	r0, #50	@ 0x32
 8001ea8:	f000 fd3a 	bl	8002920 <HAL_Delay>

	          char lora_message[100];
	          snprintf(lora_message, sizeof(lora_message),
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <main+0x500>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461e      	mov	r6, r3
 8001eb2:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <main+0x504>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb46 	bl	8000548 <__aeabi_f2d>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	460d      	mov	r5, r1
 8001ec0:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <main+0x50c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb3f 	bl	8000548 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001ed2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ed6:	e9cd 4500 	strd	r4, r5, [sp]
 8001eda:	4633      	mov	r3, r6
 8001edc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <main+0x510>)
 8001ede:	2164      	movs	r1, #100	@ 0x64
 8001ee0:	f005 fa4c 	bl	800737c <sniprintf>
	                   "{ \"fall\":%d, \"co\":%.2f, \"acc\":%.2f }",
	                   fall_alert_flag, latest_ppm, latest_acc_magnitude);

	          printf("Sending LoRa: %s\r\n", lora_message);
 8001ee4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ee8:	4619      	mov	r1, r3
 8001eea:	481b      	ldr	r0, [pc, #108]	@ (8001f58 <main+0x514>)
 8001eec:	f005 f9d6 	bl	800729c <iprintf>

	          if (LoRa_transmit(&myLoRa, (uint8_t*)lora_message, strlen(lora_message), 2000))
 8001ef0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe f9bb 	bl	8000270 <strlen>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001f02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f06:	4811      	ldr	r0, [pc, #68]	@ (8001f4c <main+0x508>)
 8001f08:	f7ff fa9e 	bl	8001448 <LoRa_transmit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <main+0x4e0>
	          {
	              printf("LoRa transmission OK\r\n");
 8001f12:	4812      	ldr	r0, [pc, #72]	@ (8001f5c <main+0x518>)
 8001f14:	f005 fa2a 	bl	800736c <puts>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // LED feedback
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f1e:	4810      	ldr	r0, [pc, #64]	@ (8001f60 <main+0x51c>)
 8001f20:	f001 fb70 	bl	8003604 <HAL_GPIO_WritePin>
	          }

	          fall_alert_flag = 0; // Reset flag
 8001f24:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <main+0x500>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
	          HAL_Delay(3000); // Optional: delay to avoid flooding
 8001f2a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f2e:	f000 fcf7 	bl	8002920 <HAL_Delay>
  {
 8001f32:	e65b      	b.n	8001bec <main+0x1a8>
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000474 	.word	0x20000474
 8001f3c:	00015f90 	.word	0x00015f90
 8001f40:	20000350 	.word	0x20000350
 8001f44:	20000460 	.word	0x20000460
 8001f48:	20000468 	.word	0x20000468
 8001f4c:	20000398 	.word	0x20000398
 8001f50:	20000464 	.word	0x20000464
 8001f54:	08009fb4 	.word	0x08009fb4
 8001f58:	08009fdc 	.word	0x08009fdc
 8001f5c:	08009ff0 	.word	0x08009ff0
 8001f60:	40020c00 	.word	0x40020c00

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b094      	sub	sp, #80	@ 0x50
 8001f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6a:	f107 0320 	add.w	r3, r7, #32
 8001f6e:	2230      	movs	r2, #48	@ 0x30
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f005 fb10 	bl	8007598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <SystemClock_Config+0xb4>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	4a21      	ldr	r2, [pc, #132]	@ (8002018 <SystemClock_Config+0xb4>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f98:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <SystemClock_Config+0xb4>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <SystemClock_Config+0xb8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <SystemClock_Config+0xb8>)
 8001fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b19      	ldr	r3, [pc, #100]	@ (800201c <SystemClock_Config+0xb8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc8:	2310      	movs	r3, #16
 8001fca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fe5d 	bl	8004c94 <HAL_RCC_OscConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001fe0:	f000 f9f4 	bl	80023cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 f8c0 	bl	8005184 <HAL_RCC_ClockConfig>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800200a:	f000 f9df 	bl	80023cc <Error_Handler>
  }
}
 800200e:	bf00      	nop
 8002010:	3750      	adds	r7, #80	@ 0x50
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000

08002020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002032:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002034:	4a21      	ldr	r2, [pc, #132]	@ (80020bc <MX_ADC1_Init+0x9c>)
 8002036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002038:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <MX_ADC1_Init+0x98>)
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002044:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <MX_ADC1_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002058:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <MX_ADC1_Init+0x98>)
 800205a:	2200      	movs	r2, #0
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800205e:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002060:	4a17      	ldr	r2, [pc, #92]	@ (80020c0 <MX_ADC1_Init+0xa0>)
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <MX_ADC1_Init+0x98>)
 800206c:	2201      	movs	r2, #1
 800206e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_ADC1_Init+0x98>)
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800207e:	480e      	ldr	r0, [pc, #56]	@ (80020b8 <MX_ADC1_Init+0x98>)
 8002080:	f000 fc72 	bl	8002968 <HAL_ADC_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 f99f 	bl	80023cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209a:	463b      	mov	r3, r7
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	@ (80020b8 <MX_ADC1_Init+0x98>)
 80020a0:	f000 fe10 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80020aa:	f000 f98f 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000025c 	.word	0x2000025c
 80020bc:	40012000 	.word	0x40012000
 80020c0:	0f000001 	.word	0x0f000001

080020c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <MX_I2C1_Init+0x54>)
 80020cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <MX_I2C1_Init+0x58>)
 80020d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	@ (8002114 <MX_I2C1_Init+0x50>)
 8002102:	f001 fab3 	bl	800366c <HAL_I2C_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800210c:	f000 f95e 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200002a4 	.word	0x200002a4
 8002118:	40005400 	.word	0x40005400
 800211c:	000186a0 	.word	0x000186a0

08002120 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002126:	4a18      	ldr	r2, [pc, #96]	@ (8002188 <MX_SPI1_Init+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <MX_SPI1_Init+0x64>)
 800212c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002132:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <MX_SPI1_Init+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_SPI1_Init+0x64>)
 800214c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002154:	2220      	movs	r2, #32
 8002156:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <MX_SPI1_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002160:	2200      	movs	r2, #0
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002164:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_SPI1_Init+0x64>)
 800216c:	220a      	movs	r2, #10
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002170:	4804      	ldr	r0, [pc, #16]	@ (8002184 <MX_SPI1_Init+0x64>)
 8002172:	f003 f9d3 	bl	800551c <HAL_SPI_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800217c:	f000 f926 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200002f8 	.word	0x200002f8
 8002188:	40013000 	.word	0x40013000

0800218c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021bc:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021be:	f04f 32ff 	mov.w	r2, #4294967295
 80021c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d0:	4813      	ldr	r0, [pc, #76]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021d2:	f003 ff83 	bl	80060dc <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021dc:	f000 f8f6 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <MX_TIM2_Init+0x94>)
 80021ee:	f004 f88d 	bl	800630c <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021f8:	f000 f8e8 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002204:	463b      	mov	r3, r7
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	@ (8002220 <MX_TIM2_Init+0x94>)
 800220a:	f004 fab3 	bl	8006774 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002214:	f000 f8da 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000350 	.word	0x20000350

08002224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b40      	ldr	r3, [pc, #256]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4a3f      	ldr	r2, [pc, #252]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4b3d      	ldr	r3, [pc, #244]	@ (8002340 <MX_GPIO_Init+0x11c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <MX_GPIO_Init+0x11c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a38      	ldr	r2, [pc, #224]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <MX_GPIO_Init+0x11c>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b2f      	ldr	r3, [pc, #188]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	4a2a      	ldr	r2, [pc, #168]	@ (8002340 <MX_GPIO_Init+0x11c>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	@ 0x30
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <MX_GPIO_Init+0x11c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	2101      	movs	r1, #1
 80022ae:	4825      	ldr	r0, [pc, #148]	@ (8002344 <MX_GPIO_Init+0x120>)
 80022b0:	f001 f9a8 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	2110      	movs	r1, #16
 80022b8:	4823      	ldr	r0, [pc, #140]	@ (8002348 <MX_GPIO_Init+0x124>)
 80022ba:	f001 f9a3 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_MPU_Pin|LED_MQ7_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80022c4:	4821      	ldr	r0, [pc, #132]	@ (800234c <MX_GPIO_Init+0x128>)
 80022c6:	f001 f99d 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80022ca:	2301      	movs	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4818      	ldr	r0, [pc, #96]	@ (8002344 <MX_GPIO_Init+0x120>)
 80022e2:	f000 fff3 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80022e6:	2302      	movs	r3, #2
 80022e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	4812      	ldr	r0, [pc, #72]	@ (8002344 <MX_GPIO_Init+0x120>)
 80022fa:	f000 ffe7 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80022fe:	2310      	movs	r3, #16
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <MX_GPIO_Init+0x124>)
 8002316:	f000 ffd9 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MPU_Pin LED_MQ7_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = LED_MPU_Pin|LED_MQ7_Pin|GPIO_PIN_14|GPIO_PIN_15;
 800231a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800231e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <MX_GPIO_Init+0x128>)
 8002334:	f000 ffca 	bl	80032cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002338:	bf00      	nop
 800233a:	3728      	adds	r7, #40	@ 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40020800 	.word	0x40020800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020c00 	.word	0x40020c00

08002350 <MPU6050_TestConnection>:

/* USER CODE BEGIN 4 */
uint8_t MPU6050_TestConnection(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af04      	add	r7, sp, #16
  uint8_t who_am_i = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS << 1,
 800235a:	2364      	movs	r3, #100	@ 0x64
 800235c:	9302      	str	r3, [sp, #8]
 800235e:	2301      	movs	r3, #1
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	1dbb      	adds	r3, r7, #6
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	2275      	movs	r2, #117	@ 0x75
 800236a:	21d0      	movs	r1, #208	@ 0xd0
 800236c:	4808      	ldr	r0, [pc, #32]	@ (8002390 <MPU6050_TestConnection+0x40>)
 800236e:	f001 fdf1 	bl	8003f54 <HAL_I2C_Mem_Read>
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
                                             MPU6050_WHO_AM_I, 1, &who_am_i, 1, 100);
  if(status == HAL_OK && who_am_i == 0x68) {
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <MPU6050_TestConnection+0x36>
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	2b68      	cmp	r3, #104	@ 0x68
 8002380:	d101      	bne.n	8002386 <MPU6050_TestConnection+0x36>
    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <MPU6050_TestConnection+0x38>
  }
  return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200002a4 	.word	0x200002a4

08002394 <_write>:

int _write(int file, char *ptr, int len)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  (void)file;
  for(int i = 0; i < len; i++) {
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e009      	b.n	80023ba <_write+0x26>
    ITM_SendChar(*ptr++);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	60ba      	str	r2, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff faea 	bl	8001988 <ITM_SendChar>
  for(int i = 0; i < len; i++) {
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbf1      	blt.n	80023a6 <_write+0x12>
  }
  return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <Error_Handler+0x8>

080023d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002424 <HAL_MspInit+0x4c>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_MspInit+0x4c>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a08      	ldr	r2, [pc, #32]	@ (8002424 <HAL_MspInit+0x4c>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_MspInit+0x4c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_ADC_MspInit+0x7c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d127      	bne.n	800249a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_ADC_MspInit+0x80>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <HAL_ADC_MspInit+0x80>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002458:	6453      	str	r3, [r2, #68]	@ 0x44
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_ADC_MspInit+0x80>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_ADC_MspInit+0x80>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a0e      	ldr	r2, [pc, #56]	@ (80024a8 <HAL_ADC_MspInit+0x80>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_ADC_MspInit+0x80>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002482:	2301      	movs	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002486:	2303      	movs	r3, #3
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_ADC_MspInit+0x84>)
 8002496:	f000 ff19 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	@ 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40012000 	.word	0x40012000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020000 	.word	0x40020000

080024b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a19      	ldr	r2, [pc, #100]	@ (8002534 <HAL_I2C_MspInit+0x84>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d12c      	bne.n	800252c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <HAL_I2C_MspInit+0x88>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <HAL_I2C_MspInit+0x88>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_I2C_MspInit+0x88>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 80024ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f4:	2312      	movs	r3, #18
 80024f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002500:	2304      	movs	r3, #4
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <HAL_I2C_MspInit+0x8c>)
 800250c:	f000 fede 	bl	80032cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_I2C_MspInit+0x88>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	4a07      	ldr	r2, [pc, #28]	@ (8002538 <HAL_I2C_MspInit+0x88>)
 800251a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800251e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_I2C_MspInit+0x88>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	@ 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40005400 	.word	0x40005400
 8002538:	40023800 	.word	0x40023800
 800253c:	40020400 	.word	0x40020400

08002540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	@ 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <HAL_SPI_MspInit+0x84>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d12b      	bne.n	80025ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <HAL_SPI_MspInit+0x88>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <HAL_SPI_MspInit+0x88>)
 800256c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_SPI_MspInit+0x88>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_SPI_MspInit+0x88>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a10      	ldr	r2, [pc, #64]	@ (80025c8 <HAL_SPI_MspInit+0x88>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_SPI_MspInit+0x88>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800259a:	23e0      	movs	r3, #224	@ 0xe0
 800259c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025aa:	2305      	movs	r3, #5
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	4805      	ldr	r0, [pc, #20]	@ (80025cc <HAL_SPI_MspInit+0x8c>)
 80025b6:	f000 fe89 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	@ 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40013000 	.word	0x40013000
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000

080025d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e0:	d10d      	bne.n	80025fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_TIM_Base_MspInit+0x3c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_TIM_Base_MspInit+0x3c>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_TIM_Base_MspInit+0x3c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <NMI_Handler+0x4>

08002618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <MemManage_Handler+0x4>

08002628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <UsageFault_Handler+0x4>

08002638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002666:	f000 f93b 	bl	80028e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}

0800266e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  return 1;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_kill>:

int _kill(int pid, int sig)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002688:	f004 ffd8 	bl	800763c <__errno>
 800268c:	4603      	mov	r3, r0
 800268e:	2216      	movs	r2, #22
 8002690:	601a      	str	r2, [r3, #0]
  return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_exit>:

void _exit (int status)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026a6:	f04f 31ff 	mov.w	r1, #4294967295
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffe7 	bl	800267e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <_exit+0x12>

080026b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e00a      	b.n	80026dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026c6:	f3af 8000 	nop.w
 80026ca:	4601      	mov	r1, r0
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	60ba      	str	r2, [r7, #8]
 80026d2:	b2ca      	uxtb	r2, r1
 80026d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3301      	adds	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dbf0      	blt.n	80026c6 <_read+0x12>
  }

  return len;
 80026e4:	687b      	ldr	r3, [r7, #4]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002716:	605a      	str	r2, [r3, #4]
  return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_isatty>:

int _isatty(int file)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f004 ff58 	bl	800763c <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20020000 	.word	0x20020000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	2000047c 	.word	0x2000047c
 80027c0:	200005d0 	.word	0x200005d0

080027c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <SystemInit+0x20>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <SystemInit+0x20>)
 80027d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002820 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027ec:	f7ff ffea 	bl	80027c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f0:	480c      	ldr	r0, [pc, #48]	@ (8002824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027f2:	490d      	ldr	r1, [pc, #52]	@ (8002828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027f4:	4a0d      	ldr	r2, [pc, #52]	@ (800282c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002808:	4c0a      	ldr	r4, [pc, #40]	@ (8002834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002816:	f004 ff17 	bl	8007648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281a:	f7ff f913 	bl	8001a44 <main>
  bx  lr    
 800281e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002828:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800282c:	0800a3bc 	.word	0x0800a3bc
  ldr r2, =_sbss
 8002830:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002834:	200005d0 	.word	0x200005d0

08002838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <ADC_IRQHandler>
	...

0800283c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002840:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0d      	ldr	r2, [pc, #52]	@ (800287c <HAL_Init+0x40>)
 8002846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800284a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <HAL_Init+0x40>)
 8002852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a07      	ldr	r2, [pc, #28]	@ (800287c <HAL_Init+0x40>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002864:	2003      	movs	r0, #3
 8002866:	f000 fcfd 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286a:	200f      	movs	r0, #15
 800286c:	f000 f808 	bl	8002880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002870:	f7ff fdb2 	bl	80023d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023c00 	.word	0x40023c00

08002880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002888:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <HAL_InitTick+0x54>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_InitTick+0x58>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002896:	fbb3 f3f1 	udiv	r3, r3, r1
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fd07 	bl	80032b2 <HAL_SYSTICK_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00e      	b.n	80028cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d80a      	bhi.n	80028ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f000 fcdd 	bl	800327a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c0:	4a06      	ldr	r2, [pc, #24]	@ (80028dc <HAL_InitTick+0x5c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000008 	.word	0x20000008
 80028d8:	20000010 	.word	0x20000010
 80028dc:	2000000c 	.word	0x2000000c

080028e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_IncTick+0x20>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_IncTick+0x24>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	@ (8002904 <HAL_IncTick+0x24>)
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000010 	.word	0x20000010
 8002904:	20000480 	.word	0x20000480

08002908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b03      	ldr	r3, [pc, #12]	@ (800291c <HAL_GetTick+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000480 	.word	0x20000480

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff ffee 	bl	8002908 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_Delay+0x44>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffde 	bl	8002908 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000010 	.word	0x20000010

08002968 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e033      	b.n	80029e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fd4e 	bl	8002428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029ae:	f023 0302 	bic.w	r3, r3, #2
 80029b2:	f043 0202 	orr.w	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 faa4 	bl	8002f08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80029d6:	e001      	b.n	80029dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Start+0x1a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0b2      	b.n	8002b70 <HAL_ADC_Start+0x180>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d018      	beq.n	8002a52 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a30:	4b52      	ldr	r3, [pc, #328]	@ (8002b7c <HAL_ADC_Start+0x18c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <HAL_ADC_Start+0x190>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9a      	lsrs	r2, r3, #18
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a44:	e002      	b.n	8002a4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f9      	bne.n	8002a46 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d17a      	bne.n	8002b56 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9e:	d106      	bne.n	8002aae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	f023 0206 	bic.w	r2, r3, #6
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	645a      	str	r2, [r3, #68]	@ 0x44
 8002aac:	e002      	b.n	8002ab4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002abc:	4b31      	ldr	r3, [pc, #196]	@ (8002b84 <HAL_ADC_Start+0x194>)
 8002abe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d12a      	bne.n	8002b2c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2b      	ldr	r2, [pc, #172]	@ (8002b88 <HAL_ADC_Start+0x198>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d015      	beq.n	8002b0c <HAL_ADC_Start+0x11c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a29      	ldr	r2, [pc, #164]	@ (8002b8c <HAL_ADC_Start+0x19c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d105      	bne.n	8002af6 <HAL_ADC_Start+0x106>
 8002aea:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <HAL_ADC_Start+0x194>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a25      	ldr	r2, [pc, #148]	@ (8002b90 <HAL_ADC_Start+0x1a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d136      	bne.n	8002b6e <HAL_ADC_Start+0x17e>
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_ADC_Start+0x194>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d130      	bne.n	8002b6e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d129      	bne.n	8002b6e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	e020      	b.n	8002b6e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <HAL_ADC_Start+0x198>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d11b      	bne.n	8002b6e <HAL_ADC_Start+0x17e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d114      	bne.n	8002b6e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	e00b      	b.n	8002b6e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	20000008 	.word	0x20000008
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	40012300 	.word	0x40012300
 8002b88:	40012000 	.word	0x40012000
 8002b8c:	40012100 	.word	0x40012100
 8002b90:	40012200 	.word	0x40012200

08002b94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb0:	d113      	bne.n	8002bda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bc0:	d10b      	bne.n	8002bda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e063      	b.n	8002ca2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bda:	f7ff fe95 	bl	8002908 <HAL_GetTick>
 8002bde:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002be0:	e021      	b.n	8002c26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d01d      	beq.n	8002c26 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_ADC_PollForConversion+0x6c>
 8002bf0:	f7ff fe8a 	bl	8002908 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d212      	bcs.n	8002c26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d00b      	beq.n	8002c26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f043 0204 	orr.w	r2, r3, #4
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e03d      	b.n	8002ca2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d1d6      	bne.n	8002be2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0212 	mvn.w	r2, #18
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d123      	bne.n	8002ca0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11f      	bne.n	8002ca0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d111      	bne.n	8002ca0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x1c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e105      	b.n	8002eec <HAL_ADC_ConfigChannel+0x228>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	d925      	bls.n	8002d3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	3b1e      	subs	r3, #30
 8002d06:	2207      	movs	r2, #7
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	400a      	ands	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68d9      	ldr	r1, [r3, #12]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	4603      	mov	r3, r0
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4403      	add	r3, r0
 8002d2e:	3b1e      	subs	r3, #30
 8002d30:	409a      	lsls	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	e022      	b.n	8002d82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6919      	ldr	r1, [r3, #16]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	2207      	movs	r2, #7
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6919      	ldr	r1, [r3, #16]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4403      	add	r3, r0
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d824      	bhi.n	8002dd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	3b05      	subs	r3, #5
 8002d9c:	221f      	movs	r2, #31
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	400a      	ands	r2, r1
 8002daa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4618      	mov	r0, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b05      	subs	r3, #5
 8002dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dd2:	e04c      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d824      	bhi.n	8002e26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b23      	subs	r3, #35	@ 0x23
 8002dee:	221f      	movs	r2, #31
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	3b23      	subs	r3, #35	@ 0x23
 8002e18:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e24:	e023      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b41      	subs	r3, #65	@ 0x41
 8002e38:	221f      	movs	r2, #31
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b41      	subs	r3, #65	@ 0x41
 8002e62:	fa00 f203 	lsl.w	r2, r0, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x234>)
 8002e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a21      	ldr	r2, [pc, #132]	@ (8002efc <HAL_ADC_ConfigChannel+0x238>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1cc>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d105      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_ADC_ConfigChannel+0x238>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d123      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x21e>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d003      	beq.n	8002eaa <HAL_ADC_ConfigChannel+0x1e6>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b11      	cmp	r3, #17
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d111      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_ADC_ConfigChannel+0x23c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	@ (8002f04 <HAL_ADC_ConfigChannel+0x240>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	0c9a      	lsrs	r2, r3, #18
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ed4:	e002      	b.n	8002edc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f9      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012300 	.word	0x40012300
 8002efc:	40012000 	.word	0x40012000
 8002f00:	20000008 	.word	0x20000008
 8002f04:	431bde83 	.word	0x431bde83

08002f08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f10:	4b79      	ldr	r3, [pc, #484]	@ (80030f8 <ADC_Init+0x1f0>)
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	021a      	lsls	r2, r3, #8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6899      	ldr	r1, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	4a58      	ldr	r2, [pc, #352]	@ (80030fc <ADC_Init+0x1f4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d022      	beq.n	8002fe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6899      	ldr	r1, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	e00f      	b.n	8003006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003004:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0202 	bic.w	r2, r2, #2
 8003014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7e1b      	ldrb	r3, [r3, #24]
 8003020:	005a      	lsls	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01b      	beq.n	800306c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003042:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	3b01      	subs	r3, #1
 8003060:	035a      	lsls	r2, r3, #13
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	e007      	b.n	800307c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800307a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800308a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	3b01      	subs	r3, #1
 8003098:	051a      	lsls	r2, r3, #20
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030be:	025a      	lsls	r2, r3, #9
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	029a      	lsls	r2, r3, #10
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	40012300 	.word	0x40012300
 80030fc:	0f000001 	.word	0x0f000001

08003100 <__NVIC_SetPriorityGrouping>:
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800312c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003132:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	60d3      	str	r3, [r2, #12]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_GetPriorityGrouping>:
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <__NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_SetPriority>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	@ (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	@ (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	@ 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <SysTick_Config>:
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003230:	d301      	bcc.n	8003236 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003236:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <SysTick_Config+0x40>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323e:	210f      	movs	r1, #15
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f7ff ff8e 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <SysTick_Config+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <SysTick_Config+0x40>)
 8003250:	2207      	movs	r2, #7
 8003252:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010

08003264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff47 	bl	8003100 <__NVIC_SetPriorityGrouping>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800328c:	f7ff ff5c 	bl	8003148 <__NVIC_GetPriorityGrouping>
 8003290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff8e 	bl	80031b8 <NVIC_EncodePriority>
 800329c:	4602      	mov	r2, r0
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff5d 	bl	8003164 <__NVIC_SetPriority>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffb0 	bl	8003220 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	@ 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e16b      	b.n	80035c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	f040 815a 	bne.w	80035ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d005      	beq.n	800331e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331a:	2b02      	cmp	r3, #2
 800331c:	d130      	bne.n	8003380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0201 	and.w	r2, r3, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	d017      	beq.n	80033bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d123      	bne.n	8003410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	220f      	movs	r2, #15
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80b4 	beq.w	80035ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b60      	ldr	r3, [pc, #384]	@ (80035d8 <HAL_GPIO_Init+0x30c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	4a5f      	ldr	r2, [pc, #380]	@ (80035d8 <HAL_GPIO_Init+0x30c>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003460:	6453      	str	r3, [r2, #68]	@ 0x44
 8003462:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <HAL_GPIO_Init+0x30c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346e:	4a5b      	ldr	r2, [pc, #364]	@ (80035dc <HAL_GPIO_Init+0x310>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a52      	ldr	r2, [pc, #328]	@ (80035e0 <HAL_GPIO_Init+0x314>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02b      	beq.n	80034f2 <HAL_GPIO_Init+0x226>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a51      	ldr	r2, [pc, #324]	@ (80035e4 <HAL_GPIO_Init+0x318>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x222>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a50      	ldr	r2, [pc, #320]	@ (80035e8 <HAL_GPIO_Init+0x31c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x21e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4f      	ldr	r2, [pc, #316]	@ (80035ec <HAL_GPIO_Init+0x320>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x21a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	@ (80035f0 <HAL_GPIO_Init+0x324>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x216>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4d      	ldr	r2, [pc, #308]	@ (80035f4 <HAL_GPIO_Init+0x328>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x212>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4c      	ldr	r2, [pc, #304]	@ (80035f8 <HAL_GPIO_Init+0x32c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x20e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	@ (80035fc <HAL_GPIO_Init+0x330>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x20a>
 80034d2:	2307      	movs	r3, #7
 80034d4:	e00e      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034d6:	2308      	movs	r3, #8
 80034d8:	e00c      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034da:	2306      	movs	r3, #6
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034de:	2305      	movs	r3, #5
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034f2:	2300      	movs	r3, #0
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003504:	4935      	ldr	r1, [pc, #212]	@ (80035dc <HAL_GPIO_Init+0x310>)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003512:	4b3b      	ldr	r3, [pc, #236]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003536:	4a32      	ldr	r2, [pc, #200]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800353c:	4b30      	ldr	r3, [pc, #192]	@ (8003600 <HAL_GPIO_Init+0x334>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003560:	4a27      	ldr	r2, [pc, #156]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003566:	4b26      	ldr	r3, [pc, #152]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800358a:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <HAL_GPIO_Init+0x334>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b4:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <HAL_GPIO_Init+0x334>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	f67f ae90 	bls.w	80032e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3724      	adds	r7, #36	@ 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40013800 	.word	0x40013800
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40021400 	.word	0x40021400
 80035f8:	40021800 	.word	0x40021800
 80035fc:	40021c00 	.word	0x40021c00
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	041a      	lsls	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43d9      	mvns	r1, r3
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	400b      	ands	r3, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e12b      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe ff0c 	bl	80024b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	@ 0x24
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d0:	f001 ff10 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a81      	ldr	r2, [pc, #516]	@ (80038e0 <HAL_I2C_Init+0x274>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d807      	bhi.n	80036f0 <HAL_I2C_Init+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a80      	ldr	r2, [pc, #512]	@ (80038e4 <HAL_I2C_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e006      	b.n	80036fe <HAL_I2C_Init+0x92>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a7d      	ldr	r2, [pc, #500]	@ (80038e8 <HAL_I2C_Init+0x27c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0e7      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a78      	ldr	r2, [pc, #480]	@ (80038ec <HAL_I2C_Init+0x280>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a6a      	ldr	r2, [pc, #424]	@ (80038e0 <HAL_I2C_Init+0x274>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d802      	bhi.n	8003740 <HAL_I2C_Init+0xd4>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3301      	adds	r3, #1
 800373e:	e009      	b.n	8003754 <HAL_I2C_Init+0xe8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a69      	ldr	r2, [pc, #420]	@ (80038f0 <HAL_I2C_Init+0x284>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	3301      	adds	r3, #1
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003766:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	495c      	ldr	r1, [pc, #368]	@ (80038e0 <HAL_I2C_Init+0x274>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d819      	bhi.n	80037a8 <HAL_I2C_Init+0x13c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e59      	subs	r1, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	1c59      	adds	r1, r3, #1
 8003784:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003788:	400b      	ands	r3, r1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_I2C_Init+0x138>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e59      	subs	r1, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fbb1 f3f3 	udiv	r3, r1, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a2:	e051      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a4:	2304      	movs	r3, #4
 80037a6:	e04f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <HAL_I2C_Init+0x168>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e012      	b.n	80037fa <HAL_I2C_Init+0x18e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Init+0x196>
 80037fe:	2301      	movs	r3, #1
 8003800:	e022      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_I2C_Init+0x1bc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e58      	subs	r0, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	440b      	add	r3, r1
 8003818:	fbb0 f3f3 	udiv	r3, r0, r3
 800381c:	3301      	adds	r3, #1
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003826:	e00f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6809      	ldr	r1, [r1, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6911      	ldr	r1, [r2, #16]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	000186a0 	.word	0x000186a0
 80038e4:	001e847f 	.word	0x001e847f
 80038e8:	003d08ff 	.word	0x003d08ff
 80038ec:	431bde83 	.word	0x431bde83
 80038f0:	10624dd3 	.word	0x10624dd3

080038f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	461a      	mov	r2, r3
 8003900:	460b      	mov	r3, r1
 8003902:	817b      	strh	r3, [r7, #10]
 8003904:	4613      	mov	r3, r2
 8003906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7fe fffe 	bl	8002908 <HAL_GetTick>
 800390c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	f040 80e0 	bne.w	8003adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2319      	movs	r3, #25
 8003922:	2201      	movs	r2, #1
 8003924:	4970      	ldr	r1, [pc, #448]	@ (8003ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 ff7e 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	e0d3      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_I2C_Master_Transmit+0x50>
 8003940:	2302      	movs	r3, #2
 8003942:	e0cc      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d007      	beq.n	800396a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	@ 0x21
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2210      	movs	r2, #16
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	893a      	ldrh	r2, [r7, #8]
 800399a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a50      	ldr	r2, [pc, #320]	@ (8003aec <HAL_I2C_Master_Transmit+0x1f8>)
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039ac:	8979      	ldrh	r1, [r7, #10]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fd00 	bl	80043b8 <I2C_MasterRequestWrite>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e08d      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039d8:	e066      	b.n	8003aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f001 f83c 	bl	8004a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06b      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11b      	bne.n	8003a7c <HAL_I2C_Master_Transmit+0x188>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	6a39      	ldr	r1, [r7, #32]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f001 f833 	bl	8004aec <I2C_WaitOnBTFFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d107      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e01a      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d194      	bne.n	80039da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	00100002 	.word	0x00100002
 8003aec:	ffff0000 	.word	0xffff0000

08003af0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	@ 0x30
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	460b      	mov	r3, r1
 8003afe:	817b      	strh	r3, [r7, #10]
 8003b00:	4613      	mov	r3, r2
 8003b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7fe ff00 	bl	8002908 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	f040 8217 	bne.w	8003f46 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2319      	movs	r3, #25
 8003b1e:	2201      	movs	r2, #1
 8003b20:	497c      	ldr	r1, [pc, #496]	@ (8003d14 <HAL_I2C_Master_Receive+0x224>)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fe80 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e20a      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_I2C_Master_Receive+0x50>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e203      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d007      	beq.n	8003b66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2222      	movs	r2, #34	@ 0x22
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2210      	movs	r2, #16
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8003d18 <HAL_I2C_Master_Receive+0x228>)
 8003ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ba8:	8979      	ldrh	r1, [r7, #10]
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fc84 	bl	80044bc <I2C_MasterRequestRead>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e1c4      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d113      	bne.n	8003bee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e198      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d11b      	bne.n	8003c2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e178      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d11b      	bne.n	8003c6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	e158      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c94:	e144      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	f200 80f1 	bhi.w	8003e82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d123      	bne.n	8003cf0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 ff65 	bl	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e145      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cee:	e117      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d14e      	bne.n	8003d96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	4906      	ldr	r1, [pc, #24]	@ (8003d1c <HAL_I2C_Master_Receive+0x22c>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fd90 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e11a      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
 8003d12:	bf00      	nop
 8003d14:	00100002 	.word	0x00100002
 8003d18:	ffff0000 	.word	0xffff0000
 8003d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d94:	e0c4      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	496c      	ldr	r1, [pc, #432]	@ (8003f50 <HAL_I2C_Master_Receive+0x460>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fd41 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cb      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4955      	ldr	r1, [pc, #340]	@ (8003f50 <HAL_I2C_Master_Receive+0x460>)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fd13 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e09d      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e80:	e04e      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fe78 	bl	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e058      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d124      	bne.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f aeb6 	bne.w	8003c96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3728      	adds	r7, #40	@ 0x28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	00010004 	.word	0x00010004

08003f54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	@ 0x30
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f6e:	f7fe fccb 	bl	8002908 <HAL_GetTick>
 8003f72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	f040 8214 	bne.w	80043aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2319      	movs	r3, #25
 8003f88:	2201      	movs	r2, #1
 8003f8a:	497b      	ldr	r1, [pc, #492]	@ (8004178 <HAL_I2C_Mem_Read+0x224>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fc4b 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e207      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Mem_Read+0x56>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e200      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d007      	beq.n	8003fd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2222      	movs	r2, #34	@ 0x22
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2240      	movs	r2, #64	@ 0x40
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a5b      	ldr	r2, [pc, #364]	@ (800417c <HAL_I2C_Mem_Read+0x228>)
 8004010:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004012:	88f8      	ldrh	r0, [r7, #6]
 8004014:	893a      	ldrh	r2, [r7, #8]
 8004016:	8979      	ldrh	r1, [r7, #10]
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4603      	mov	r3, r0
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fb18 	bl	8004658 <I2C_RequestMemoryRead>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e1bc      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	623b      	str	r3, [r7, #32]
 800404e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e190      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004066:	2b01      	cmp	r3, #1
 8004068:	d11b      	bne.n	80040a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	e170      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d11b      	bne.n	80040e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	e150      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040f8:	e144      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	2b03      	cmp	r3, #3
 8004100:	f200 80f1 	bhi.w	80042e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004108:	2b01      	cmp	r3, #1
 800410a:	d123      	bne.n	8004154 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fd33 	bl	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e145      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004152:	e117      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004158:	2b02      	cmp	r3, #2
 800415a:	d14e      	bne.n	80041fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	2200      	movs	r2, #0
 8004164:	4906      	ldr	r1, [pc, #24]	@ (8004180 <HAL_I2C_Mem_Read+0x22c>)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fb5e 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e11a      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
 8004176:	bf00      	nop
 8004178:	00100002 	.word	0x00100002
 800417c:	ffff0000 	.word	0xffff0000
 8004180:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041f8:	e0c4      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2200      	movs	r2, #0
 8004202:	496c      	ldr	r1, [pc, #432]	@ (80043b4 <HAL_I2C_Mem_Read+0x460>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fb0f 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0cb      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	2200      	movs	r2, #0
 800425e:	4955      	ldr	r1, [pc, #340]	@ (80043b4 <HAL_I2C_Mem_Read+0x460>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fae1 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e09d      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042e4:	e04e      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fc46 	bl	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e058      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d124      	bne.n	8004384 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433e:	2b03      	cmp	r3, #3
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004350:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f aeb6 	bne.w	80040fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
  }
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3728      	adds	r7, #40	@ 0x28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	00010004 	.word	0x00010004

080043b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	460b      	mov	r3, r1
 80043c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d006      	beq.n	80043e2 <I2C_MasterRequestWrite+0x2a>
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d003      	beq.n	80043e2 <I2C_MasterRequestWrite+0x2a>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043e0:	d108      	bne.n	80043f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e00b      	b.n	800440c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	2b12      	cmp	r3, #18
 80043fa:	d107      	bne.n	800440c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800440a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fa05 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004432:	d103      	bne.n	800443c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e035      	b.n	80044ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004448:	d108      	bne.n	800445c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004458:	611a      	str	r2, [r3, #16]
 800445a:	e01b      	b.n	8004494 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	11db      	asrs	r3, r3, #7
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0306 	and.w	r3, r3, #6
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f063 030f 	orn	r3, r3, #15
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	490e      	ldr	r1, [pc, #56]	@ (80044b4 <I2C_MasterRequestWrite+0xfc>)
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa4e 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e010      	b.n	80044ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4907      	ldr	r1, [pc, #28]	@ (80044b8 <I2C_MasterRequestWrite+0x100>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fa3e 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	00010008 	.word	0x00010008
 80044b8:	00010002 	.word	0x00010002

080044bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	460b      	mov	r3, r1
 80044ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d006      	beq.n	80044f6 <I2C_MasterRequestRead+0x3a>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d003      	beq.n	80044f6 <I2C_MasterRequestRead+0x3a>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044f4:	d108      	bne.n	8004508 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e00b      	b.n	8004520 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	2b11      	cmp	r3, #17
 800450e:	d107      	bne.n	8004520 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f97b 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00d      	beq.n	8004554 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004546:	d103      	bne.n	8004550 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e079      	b.n	8004648 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455c:	d108      	bne.n	8004570 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800455e:	897b      	ldrh	r3, [r7, #10]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]
 800456e:	e05f      	b.n	8004630 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004570:	897b      	ldrh	r3, [r7, #10]
 8004572:	11db      	asrs	r3, r3, #7
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f003 0306 	and.w	r3, r3, #6
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f063 030f 	orn	r3, r3, #15
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4930      	ldr	r1, [pc, #192]	@ (8004650 <I2C_MasterRequestRead+0x194>)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f9c4 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e054      	b.n	8004648 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4929      	ldr	r1, [pc, #164]	@ (8004654 <I2C_MasterRequestRead+0x198>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f9b4 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e044      	b.n	8004648 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f919 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800460a:	d103      	bne.n	8004614 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004612:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e017      	b.n	8004648 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004618:	897b      	ldrh	r3, [r7, #10]
 800461a:	11db      	asrs	r3, r3, #7
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0306 	and.w	r3, r3, #6
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f063 030e 	orn	r3, r3, #14
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4907      	ldr	r1, [pc, #28]	@ (8004654 <I2C_MasterRequestRead+0x198>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f970 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	00010008 	.word	0x00010008
 8004654:	00010002 	.word	0x00010002

08004658 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	461a      	mov	r2, r3
 8004666:	4603      	mov	r3, r0
 8004668:	817b      	strh	r3, [r7, #10]
 800466a:	460b      	mov	r3, r1
 800466c:	813b      	strh	r3, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004680:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2200      	movs	r2, #0
 800469a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f8c2 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b8:	d103      	bne.n	80046c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0aa      	b.n	800481c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	4952      	ldr	r1, [pc, #328]	@ (8004824 <I2C_RequestMemoryRead+0x1cc>)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f91d 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e097      	b.n	800481c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f9a8 	bl	8004a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e076      	b.n	800481c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]
 800473e:	e021      	b.n	8004784 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004740:	893b      	ldrh	r3, [r7, #8]
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	b29b      	uxth	r3, r3
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004750:	6a39      	ldr	r1, [r7, #32]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f982 	bl	8004a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	2b04      	cmp	r3, #4
 8004764:	d107      	bne.n	8004776 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e050      	b.n	800481c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477a:	893b      	ldrh	r3, [r7, #8]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004786:	6a39      	ldr	r1, [r7, #32]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f967 	bl	8004a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	2b04      	cmp	r3, #4
 800479a:	d107      	bne.n	80047ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e035      	b.n	800481c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f82b 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e6:	d103      	bne.n	80047f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e013      	b.n	800481c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047f4:	897b      	ldrh	r3, [r7, #10]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004806:	6a3a      	ldr	r2, [r7, #32]
 8004808:	4906      	ldr	r1, [pc, #24]	@ (8004824 <I2C_RequestMemoryRead+0x1cc>)
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f886 	bl	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	00010002 	.word	0x00010002

08004828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004838:	e048      	b.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d044      	beq.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7fe f861 	bl	8002908 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d139      	bne.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10d      	bne.n	800487e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	43da      	mvns	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	e00c      	b.n	8004898 <I2C_WaitOnFlagUntilTimeout+0x70>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	43da      	mvns	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	429a      	cmp	r2, r3
 800489c:	d116      	bne.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e023      	b.n	8004914 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10d      	bne.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	43da      	mvns	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	e00c      	b.n	800490c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	43da      	mvns	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	429a      	cmp	r2, r3
 8004910:	d093      	beq.n	800483a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492a:	e071      	b.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d123      	bne.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	f043 0204 	orr.w	r2, r3, #4
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e067      	b.n	8004a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d041      	beq.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498c:	f7fd ffbc 	bl	8002908 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d302      	bcc.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d136      	bne.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10c      	bne.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e00b      	b.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	43da      	mvns	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e021      	b.n	8004a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10c      	bne.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e00b      	b.n	8004a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f af6d 	bne.w	800492c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a68:	e034      	b.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f8e3 	bl	8004c36 <I2C_IsAcknowledgeFailed>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e034      	b.n	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d028      	beq.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a82:	f7fd ff41 	bl	8002908 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11d      	bne.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa2:	2b80      	cmp	r3, #128	@ 0x80
 8004aa4:	d016      	beq.n	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e007      	b.n	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	2b80      	cmp	r3, #128	@ 0x80
 8004ae0:	d1c3      	bne.n	8004a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004af8:	e034      	b.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f89b 	bl	8004c36 <I2C_IsAcknowledgeFailed>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e034      	b.n	8004b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d028      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fd fef9 	bl	8002908 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11d      	bne.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d016      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e007      	b.n	8004b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d1c3      	bne.n	8004afa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b88:	e049      	b.n	8004c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d119      	bne.n	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0210 	mvn.w	r2, #16
 8004ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e030      	b.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bcc:	f7fd fe9c 	bl	8002908 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11d      	bne.n	8004c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d016      	beq.n	8004c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e007      	b.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c28:	2b40      	cmp	r3, #64	@ 0x40
 8004c2a:	d1ae      	bne.n	8004b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4c:	d11b      	bne.n	8004c86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	f043 0204 	orr.w	r2, r3, #4
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e267      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d075      	beq.n	8004d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cb2:	4b88      	ldr	r3, [pc, #544]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbe:	4b85      	ldr	r3, [pc, #532]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d112      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cca:	4b82      	ldr	r3, [pc, #520]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05b      	beq.n	8004d9c <HAL_RCC_OscConfig+0x108>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d157      	bne.n	8004d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e242      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCC_OscConfig+0x74>
 8004cfa:	4b76      	ldr	r3, [pc, #472]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a75      	ldr	r2, [pc, #468]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e01d      	b.n	8004d44 <HAL_RCC_OscConfig+0xb0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x98>
 8004d12:	4b70      	ldr	r3, [pc, #448]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6f      	ldr	r2, [pc, #444]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0xb0>
 8004d2c:	4b69      	ldr	r3, [pc, #420]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a68      	ldr	r2, [pc, #416]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b66      	ldr	r3, [pc, #408]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a65      	ldr	r2, [pc, #404]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fd fddc 	bl	8002908 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fd fdd8 	bl	8002908 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	@ 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e207      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0xc0>
 8004d72:	e014      	b.n	8004d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fd fdc8 	bl	8002908 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fd fdc4 	bl	8002908 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e1f3      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	4b51      	ldr	r3, [pc, #324]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0xe8>
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d063      	beq.n	8004e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004daa:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db6:	4b47      	ldr	r3, [pc, #284]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d11c      	bne.n	8004dfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc2:	4b44      	ldr	r3, [pc, #272]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d116      	bne.n	8004dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dce:	4b41      	ldr	r3, [pc, #260]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_RCC_OscConfig+0x152>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e1c7      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4937      	ldr	r1, [pc, #220]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfa:	e03a      	b.n	8004e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e04:	4b34      	ldr	r3, [pc, #208]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fd fd7d 	bl	8002908 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e12:	f7fd fd79 	bl	8002908 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e1a8      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e30:	4b28      	ldr	r3, [pc, #160]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4925      	ldr	r1, [pc, #148]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]
 8004e44:	e015      	b.n	8004e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e46:	4b24      	ldr	r3, [pc, #144]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fd5c 	bl	8002908 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e54:	f7fd fd58 	bl	8002908 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e187      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d036      	beq.n	8004eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e86:	4b15      	ldr	r3, [pc, #84]	@ (8004edc <HAL_RCC_OscConfig+0x248>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fd fd3c 	bl	8002908 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e94:	f7fd fd38 	bl	8002908 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e167      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x200>
 8004eb2:	e01b      	b.n	8004eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <HAL_RCC_OscConfig+0x248>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eba:	f7fd fd25 	bl	8002908 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec0:	e00e      	b.n	8004ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fd fd21 	bl	8002908 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d907      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e150      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	42470000 	.word	0x42470000
 8004edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee0:	4b88      	ldr	r3, [pc, #544]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ea      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8097 	beq.w	8005028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b81      	ldr	r3, [pc, #516]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10f      	bne.n	8004f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	4a7c      	ldr	r2, [pc, #496]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2a:	4b77      	ldr	r3, [pc, #476]	@ (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d118      	bne.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f36:	4b74      	ldr	r3, [pc, #464]	@ (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a73      	ldr	r2, [pc, #460]	@ (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f42:	f7fd fce1 	bl	8002908 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4a:	f7fd fcdd 	bl	8002908 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e10c      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8005108 <HAL_RCC_OscConfig+0x474>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x2ea>
 8004f70:	4b64      	ldr	r3, [pc, #400]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f74:	4a63      	ldr	r2, [pc, #396]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7c:	e01c      	b.n	8004fb8 <HAL_RCC_OscConfig+0x324>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x30c>
 8004f86:	4b5f      	ldr	r3, [pc, #380]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	f043 0304 	orr.w	r3, r3, #4
 8004f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f92:	4b5c      	ldr	r3, [pc, #368]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f96:	4a5b      	ldr	r2, [pc, #364]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCC_OscConfig+0x324>
 8004fa0:	4b58      	ldr	r3, [pc, #352]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	4a57      	ldr	r2, [pc, #348]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fac:	4b55      	ldr	r3, [pc, #340]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb0:	4a54      	ldr	r2, [pc, #336]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fd fca2 	bl	8002908 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fd fc9e 	bl	8002908 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0cb      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fde:	4b49      	ldr	r3, [pc, #292]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ee      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x334>
 8004fea:	e014      	b.n	8005016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fec:	f7fd fc8c 	bl	8002908 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fd fc88 	bl	8002908 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0b5      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500a:	4b3e      	ldr	r3, [pc, #248]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ee      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d105      	bne.n	8005028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501c:	4b39      	ldr	r3, [pc, #228]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	4a38      	ldr	r2, [pc, #224]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8005022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80a1 	beq.w	8005174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005032:	4b34      	ldr	r3, [pc, #208]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b08      	cmp	r3, #8
 800503c:	d05c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d141      	bne.n	80050ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005046:	4b31      	ldr	r3, [pc, #196]	@ (800510c <HAL_RCC_OscConfig+0x478>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fd fc5c 	bl	8002908 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005054:	f7fd fc58 	bl	8002908 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e087      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	4b27      	ldr	r3, [pc, #156]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	019b      	lsls	r3, r3, #6
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	3b01      	subs	r3, #1
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	491b      	ldr	r1, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509c:	4b1b      	ldr	r3, [pc, #108]	@ (800510c <HAL_RCC_OscConfig+0x478>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a2:	f7fd fc31 	bl	8002908 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050aa:	f7fd fc2d 	bl	8002908 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e05c      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050bc:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x416>
 80050c8:	e054      	b.n	8005174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ca:	4b10      	ldr	r3, [pc, #64]	@ (800510c <HAL_RCC_OscConfig+0x478>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fd fc1a 	bl	8002908 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fd fc16 	bl	8002908 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e045      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_RCC_OscConfig+0x470>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x444>
 80050f6:	e03d      	b.n	8005174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e038      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
 8005104:	40023800 	.word	0x40023800
 8005108:	40007000 	.word	0x40007000
 800510c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005110:	4b1b      	ldr	r3, [pc, #108]	@ (8005180 <HAL_RCC_OscConfig+0x4ec>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d028      	beq.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d121      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d11a      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005140:	4013      	ands	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	3b01      	subs	r3, #1
 800515a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d107      	bne.n	8005170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800

08005184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0cc      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b68      	ldr	r3, [pc, #416]	@ (800533c <HAL_RCC_ClockConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d90c      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b65      	ldr	r3, [pc, #404]	@ (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b63      	ldr	r3, [pc, #396]	@ (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b8      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d8:	4b59      	ldr	r3, [pc, #356]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4a58      	ldr	r2, [pc, #352]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f0:	4b53      	ldr	r3, [pc, #332]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a52      	ldr	r2, [pc, #328]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b50      	ldr	r3, [pc, #320]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	494d      	ldr	r1, [pc, #308]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d044      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b47      	ldr	r3, [pc, #284]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d119      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d003      	beq.n	8005242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800523e:	2b03      	cmp	r3, #3
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b3f      	ldr	r3, [pc, #252]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e06f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005252:	4b3b      	ldr	r3, [pc, #236]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e067      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b37      	ldr	r3, [pc, #220]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4934      	ldr	r1, [pc, #208]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7fd fb48 	bl	8002908 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7fd fb44 	bl	8002908 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e04f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b2b      	ldr	r3, [pc, #172]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b25      	ldr	r3, [pc, #148]	@ (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d20c      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b22      	ldr	r3, [pc, #136]	@ (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b20      	ldr	r3, [pc, #128]	@ (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e032      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4916      	ldr	r1, [pc, #88]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f6:	4b12      	ldr	r3, [pc, #72]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	490e      	ldr	r1, [pc, #56]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800530a:	f000 f821 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800530e:	4602      	mov	r2, r0
 8005310:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	490a      	ldr	r1, [pc, #40]	@ (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	5ccb      	ldrb	r3, [r1, r3]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	@ (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005326:	4b09      	ldr	r3, [pc, #36]	@ (800534c <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fd faa8 	bl	8002880 <HAL_InitTick>

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023c00 	.word	0x40023c00
 8005340:	40023800 	.word	0x40023800
 8005344:	0800a008 	.word	0x0800a008
 8005348:	20000008 	.word	0x20000008
 800534c:	2000000c 	.word	0x2000000c

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005354:	b090      	sub	sp, #64	@ 0x40
 8005356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005368:	4b59      	ldr	r3, [pc, #356]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b08      	cmp	r3, #8
 8005372:	d00d      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x40>
 8005374:	2b08      	cmp	r3, #8
 8005376:	f200 80a1 	bhi.w	80054bc <HAL_RCC_GetSysClockFreq+0x16c>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x34>
 800537e:	2b04      	cmp	r3, #4
 8005380:	d003      	beq.n	800538a <HAL_RCC_GetSysClockFreq+0x3a>
 8005382:	e09b      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b53      	ldr	r3, [pc, #332]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005388:	e09b      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800538a:	4b53      	ldr	r3, [pc, #332]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800538c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800538e:	e098      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005390:	4b4f      	ldr	r3, [pc, #316]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800539a:	4b4d      	ldr	r3, [pc, #308]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d028      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a6:	4b4a      	ldr	r3, [pc, #296]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	2200      	movs	r2, #0
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053b8:	2100      	movs	r1, #0
 80053ba:	4b47      	ldr	r3, [pc, #284]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80053bc:	fb03 f201 	mul.w	r2, r3, r1
 80053c0:	2300      	movs	r3, #0
 80053c2:	fb00 f303 	mul.w	r3, r0, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	4a43      	ldr	r2, [pc, #268]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80053ca:	fba0 1202 	umull	r1, r2, r0, r2
 80053ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d0:	460a      	mov	r2, r1
 80053d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d6:	4413      	add	r3, r2
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053dc:	2200      	movs	r2, #0
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	61fa      	str	r2, [r7, #28]
 80053e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053ea:	f7fb fbdd 	bl	8000ba8 <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4613      	mov	r3, r2
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053f6:	e053      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f8:	4b35      	ldr	r3, [pc, #212]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	099b      	lsrs	r3, r3, #6
 80053fe:	2200      	movs	r2, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	617a      	str	r2, [r7, #20]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800540a:	f04f 0b00 	mov.w	fp, #0
 800540e:	4652      	mov	r2, sl
 8005410:	465b      	mov	r3, fp
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	0159      	lsls	r1, r3, #5
 800541c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005420:	0150      	lsls	r0, r2, #5
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	ebb2 080a 	subs.w	r8, r2, sl
 800542a:	eb63 090b 	sbc.w	r9, r3, fp
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800543a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800543e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005442:	ebb2 0408 	subs.w	r4, r2, r8
 8005446:	eb63 0509 	sbc.w	r5, r3, r9
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	00eb      	lsls	r3, r5, #3
 8005454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005458:	00e2      	lsls	r2, r4, #3
 800545a:	4614      	mov	r4, r2
 800545c:	461d      	mov	r5, r3
 800545e:	eb14 030a 	adds.w	r3, r4, sl
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	eb45 030b 	adc.w	r3, r5, fp
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005476:	4629      	mov	r1, r5
 8005478:	028b      	lsls	r3, r1, #10
 800547a:	4621      	mov	r1, r4
 800547c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005480:	4621      	mov	r1, r4
 8005482:	028a      	lsls	r2, r1, #10
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548a:	2200      	movs	r2, #0
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	60fa      	str	r2, [r7, #12]
 8005490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005494:	f7fb fb88 	bl	8000ba8 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4613      	mov	r3, r2
 800549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80054b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80054be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3740      	adds	r7, #64	@ 0x40
 80054c8:	46bd      	mov	sp, r7
 80054ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	017d7840 	.word	0x017d7840

080054dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e0:	4b03      	ldr	r3, [pc, #12]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000008 	.word	0x20000008

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f8:	f7ff fff0 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0a9b      	lsrs	r3, r3, #10
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	0800a018 	.word	0x0800a018

0800551c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e07b      	b.n	8005626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	d108      	bne.n	8005548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800553e:	d009      	beq.n	8005554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	61da      	str	r2, [r3, #28]
 8005546:	e005      	b.n	8005554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc ffe6 	bl	8002540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800558a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d8:	ea42 0103 	orr.w	r1, r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	f003 0104 	and.w	r1, r3, #4
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	f003 0210 	and.w	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800563e:	f7fd f963 	bl	8002908 <HAL_GetTick>
 8005642:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d001      	beq.n	8005658 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
 8005656:	e12a      	b.n	80058ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_Transmit+0x36>
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e122      	b.n	80058ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_SPI_Transmit+0x48>
 8005672:	2302      	movs	r3, #2
 8005674:	e11b      	b.n	80058ae <HAL_SPI_Transmit+0x280>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2203      	movs	r2, #3
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056c4:	d10f      	bne.n	80056e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d007      	beq.n	8005704 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570c:	d152      	bne.n	80057b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_SPI_Transmit+0xee>
 8005716:	8b7b      	ldrh	r3, [r7, #26]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d145      	bne.n	80057a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005740:	e032      	b.n	80057a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b02      	cmp	r3, #2
 800574e:	d112      	bne.n	8005776 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005774:	e018      	b.n	80057a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005776:	f7fd f8c7 	bl	8002908 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d803      	bhi.n	800578e <HAL_SPI_Transmit+0x160>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d102      	bne.n	8005794 <HAL_SPI_Transmit+0x166>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e082      	b.n	80058ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1c7      	bne.n	8005742 <HAL_SPI_Transmit+0x114>
 80057b2:	e053      	b.n	800585c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_Transmit+0x194>
 80057bc:	8b7b      	ldrh	r3, [r7, #26]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d147      	bne.n	8005852 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	7812      	ldrb	r2, [r2, #0]
 80057ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057e8:	e033      	b.n	8005852 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d113      	bne.n	8005820 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	7812      	ldrb	r2, [r2, #0]
 8005804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800581e:	e018      	b.n	8005852 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005820:	f7fd f872 	bl	8002908 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d803      	bhi.n	8005838 <HAL_SPI_Transmit+0x20a>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d102      	bne.n	800583e <HAL_SPI_Transmit+0x210>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e02d      	b.n	80058ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1c6      	bne.n	80057ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fbe7 	bl	8006034 <SPI_EndRxTxTransaction>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
  }
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af02      	add	r7, sp, #8
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
 80058d4:	e104      	b.n	8005ae0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058de:	d112      	bne.n	8005906 <HAL_SPI_Receive+0x50>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10e      	bne.n	8005906 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2204      	movs	r2, #4
 80058ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058f0:	88fa      	ldrh	r2, [r7, #6]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	4613      	mov	r3, r2
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f8f3 	bl	8005ae8 <HAL_SPI_TransmitReceive>
 8005902:	4603      	mov	r3, r0
 8005904:	e0ec      	b.n	8005ae0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005906:	f7fc ffff 	bl	8002908 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Receive+0x62>
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0e1      	b.n	8005ae0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_SPI_Receive+0x74>
 8005926:	2302      	movs	r3, #2
 8005928:	e0da      	b.n	8005ae0 <HAL_SPI_Receive+0x22a>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2204      	movs	r2, #4
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005978:	d10f      	bne.n	800599a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005988:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005998:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d007      	beq.n	80059b8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d170      	bne.n	8005aa2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059c0:	e035      	b.n	8005a2e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d115      	bne.n	80059fc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f103 020c 	add.w	r2, r3, #12
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059fa:	e018      	b.n	8005a2e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fc:	f7fc ff84 	bl	8002908 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d803      	bhi.n	8005a14 <HAL_SPI_Receive+0x15e>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d102      	bne.n	8005a1a <HAL_SPI_Receive+0x164>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e058      	b.n	8005ae0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1c4      	bne.n	80059c2 <HAL_SPI_Receive+0x10c>
 8005a38:	e038      	b.n	8005aac <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d113      	bne.n	8005a70 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	b292      	uxth	r2, r2
 8005a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	1c9a      	adds	r2, r3, #2
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a6e:	e018      	b.n	8005aa2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a70:	f7fc ff4a 	bl	8002908 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d803      	bhi.n	8005a88 <HAL_SPI_Receive+0x1d2>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d102      	bne.n	8005a8e <HAL_SPI_Receive+0x1d8>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e01e      	b.n	8005ae0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1c6      	bne.n	8005a3a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 fa59 	bl	8005f68 <SPI_EndRxTransaction>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005ade:	2300      	movs	r3, #0
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	@ 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005af6:	2301      	movs	r3, #1
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005afa:	f7fc ff05 	bl	8002908 <HAL_GetTick>
 8005afe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b06:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005b0e:	887b      	ldrh	r3, [r7, #2]
 8005b10:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b12:	7ffb      	ldrb	r3, [r7, #31]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d00c      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x4a>
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b1e:	d106      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x46>
 8005b28:	7ffb      	ldrb	r3, [r7, #31]
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d001      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e17f      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x5c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x5c>
 8005b3e:	887b      	ldrh	r3, [r7, #2]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e174      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x6e>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e16d      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d003      	beq.n	8005b72 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2205      	movs	r2, #5
 8005b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	887a      	ldrh	r2, [r7, #2]
 8005b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	887a      	ldrh	r2, [r7, #2]
 8005b94:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	887a      	ldrh	r2, [r7, #2]
 8005b9a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d007      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bce:	d17e      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_TransmitReceive+0xf6>
 8005bd8:	8afb      	ldrh	r3, [r7, #22]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d16c      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be2:	881a      	ldrh	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	1c9a      	adds	r2, r3, #2
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c02:	e059      	b.n	8005cb8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d11b      	bne.n	8005c4a <HAL_SPI_TransmitReceive+0x162>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d016      	beq.n	8005c4a <HAL_SPI_TransmitReceive+0x162>
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d113      	bne.n	8005c4a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c26:	881a      	ldrh	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d119      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x1a4>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d014      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	1c9a      	adds	r2, r3, #2
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c8c:	f7fc fe3c 	bl	8002908 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d80d      	bhi.n	8005cb8 <HAL_SPI_TransmitReceive+0x1d0>
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d009      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0bc      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1a0      	bne.n	8005c04 <HAL_SPI_TransmitReceive+0x11c>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d19b      	bne.n	8005c04 <HAL_SPI_TransmitReceive+0x11c>
 8005ccc:	e082      	b.n	8005dd4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x1f4>
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d171      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d02:	e05d      	b.n	8005dc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d11c      	bne.n	8005d4c <HAL_SPI_TransmitReceive+0x264>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_SPI_TransmitReceive+0x264>
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d114      	bne.n	8005d4c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d119      	bne.n	8005d8e <HAL_SPI_TransmitReceive+0x2a6>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d014      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d8e:	f7fc fdbb 	bl	8002908 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d803      	bhi.n	8005da6 <HAL_SPI_TransmitReceive+0x2be>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d102      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x2c4>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e038      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d19c      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x21c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d197      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f92b 	bl	8006034 <SPI_EndRxTxTransaction>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e01d      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005e30:	2300      	movs	r3, #0
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3728      	adds	r7, #40	@ 0x28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e48:	b2db      	uxtb	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e68:	f7fc fd4e 	bl	8002908 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e78:	f7fc fd46 	bl	8002908 <HAL_GetTick>
 8005e7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e7e:	4b39      	ldr	r3, [pc, #228]	@ (8005f64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	015b      	lsls	r3, r3, #5
 8005e84:	0d1b      	lsrs	r3, r3, #20
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8e:	e054      	b.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	d050      	beq.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e98:	f7fc fd36 	bl	8002908 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d902      	bls.n	8005eae <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d13d      	bne.n	8005f2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ec6:	d111      	bne.n	8005eec <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed0:	d004      	beq.n	8005edc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eda:	d107      	bne.n	8005eec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef4:	d10f      	bne.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e017      	b.n	8005f5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d19b      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000008 	.word	0x20000008

08005f68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f7c:	d111      	bne.n	8005fa2 <SPI_EndRxTransaction+0x3a>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f86:	d004      	beq.n	8005f92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f90:	d107      	bne.n	8005fa2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fa0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005faa:	d12a      	bne.n	8006002 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb4:	d012      	beq.n	8005fdc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2180      	movs	r1, #128	@ 0x80
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff ff49 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02d      	beq.n	8006028 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd0:	f043 0220 	orr.w	r2, r3, #32
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e026      	b.n	800602a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff ff36 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01a      	beq.n	8006028 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e013      	b.n	800602a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2200      	movs	r2, #0
 800600a:	2101      	movs	r1, #1
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff ff23 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e000      	b.n	800602a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2201      	movs	r2, #1
 8006048:	2102      	movs	r1, #2
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff ff04 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e032      	b.n	80060cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006066:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <SPI_EndRxTxTransaction+0xa0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <SPI_EndRxTxTransaction+0xa4>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	0d5b      	lsrs	r3, r3, #21
 8006072:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006076:	fb02 f303 	mul.w	r3, r2, r3
 800607a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006084:	d112      	bne.n	80060ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	2180      	movs	r1, #128	@ 0x80
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff fee1 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d016      	beq.n	80060ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a0:	f043 0220 	orr.w	r2, r3, #32
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e00f      	b.n	80060cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c2:	2b80      	cmp	r3, #128	@ 0x80
 80060c4:	d0f2      	beq.n	80060ac <SPI_EndRxTxTransaction+0x78>
 80060c6:	e000      	b.n	80060ca <SPI_EndRxTxTransaction+0x96>
        break;
 80060c8:	bf00      	nop
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000008 	.word	0x20000008
 80060d8:	165e9f81 	.word	0x165e9f81

080060dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e041      	b.n	8006172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fc fa64 	bl	80025d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f000 f9be 	bl	800649c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <HAL_TIM_PWM_Start+0x24>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e022      	b.n	80061e6 <HAL_TIM_PWM_Start+0x6a>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d109      	bne.n	80061ba <HAL_TIM_PWM_Start+0x3e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	bf14      	ite	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	2300      	moveq	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e015      	b.n	80061e6 <HAL_TIM_PWM_Start+0x6a>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d109      	bne.n	80061d4 <HAL_TIM_PWM_Start+0x58>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e008      	b.n	80061e6 <HAL_TIM_PWM_Start+0x6a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e07c      	b.n	80062e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0x82>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061fc:	e013      	b.n	8006226 <HAL_TIM_PWM_Start+0xaa>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b04      	cmp	r3, #4
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Start+0x92>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800620c:	e00b      	b.n	8006226 <HAL_TIM_PWM_Start+0xaa>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start+0xa2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800621c:	e003      	b.n	8006226 <HAL_TIM_PWM_Start+0xaa>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2202      	movs	r2, #2
 8006222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2201      	movs	r2, #1
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fa7a 	bl	8006728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2d      	ldr	r2, [pc, #180]	@ (80062f0 <HAL_TIM_PWM_Start+0x174>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_TIM_PWM_Start+0xcc>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2c      	ldr	r2, [pc, #176]	@ (80062f4 <HAL_TIM_PWM_Start+0x178>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d101      	bne.n	800624c <HAL_TIM_PWM_Start+0xd0>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <HAL_TIM_PWM_Start+0xd2>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006260:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a22      	ldr	r2, [pc, #136]	@ (80062f0 <HAL_TIM_PWM_Start+0x174>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x136>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006274:	d01d      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x136>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1f      	ldr	r2, [pc, #124]	@ (80062f8 <HAL_TIM_PWM_Start+0x17c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d018      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x136>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1d      	ldr	r2, [pc, #116]	@ (80062fc <HAL_TIM_PWM_Start+0x180>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x136>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1c      	ldr	r2, [pc, #112]	@ (8006300 <HAL_TIM_PWM_Start+0x184>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x136>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <HAL_TIM_PWM_Start+0x178>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x136>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a18      	ldr	r2, [pc, #96]	@ (8006304 <HAL_TIM_PWM_Start+0x188>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x136>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a16      	ldr	r2, [pc, #88]	@ (8006308 <HAL_TIM_PWM_Start+0x18c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d111      	bne.n	80062d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b06      	cmp	r3, #6
 80062c2:	d010      	beq.n	80062e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	e007      	b.n	80062e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40014000 	.word	0x40014000
 8006308:	40001800 	.word	0x40001800

0800630c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_TIM_ConfigClockSource+0x1c>
 8006324:	2302      	movs	r3, #2
 8006326:	e0b4      	b.n	8006492 <HAL_TIM_ConfigClockSource+0x186>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800634e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006360:	d03e      	beq.n	80063e0 <HAL_TIM_ConfigClockSource+0xd4>
 8006362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006366:	f200 8087 	bhi.w	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800636e:	f000 8086 	beq.w	800647e <HAL_TIM_ConfigClockSource+0x172>
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006376:	d87f      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b70      	cmp	r3, #112	@ 0x70
 800637a:	d01a      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0xa6>
 800637c:	2b70      	cmp	r3, #112	@ 0x70
 800637e:	d87b      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b60      	cmp	r3, #96	@ 0x60
 8006382:	d050      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x11a>
 8006384:	2b60      	cmp	r3, #96	@ 0x60
 8006386:	d877      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b50      	cmp	r3, #80	@ 0x50
 800638a:	d03c      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xfa>
 800638c:	2b50      	cmp	r3, #80	@ 0x50
 800638e:	d873      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b40      	cmp	r3, #64	@ 0x40
 8006392:	d058      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x13a>
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	d86f      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b30      	cmp	r3, #48	@ 0x30
 800639a:	d064      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 800639c:	2b30      	cmp	r3, #48	@ 0x30
 800639e:	d86b      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d060      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d867      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d05c      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d05a      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 80063b0:	e062      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063c2:	f000 f991 	bl	80066e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	609a      	str	r2, [r3, #8]
      break;
 80063de:	e04f      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063f0:	f000 f97a 	bl	80066e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006402:	609a      	str	r2, [r3, #8]
      break;
 8006404:	e03c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006412:	461a      	mov	r2, r3
 8006414:	f000 f8ee 	bl	80065f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2150      	movs	r1, #80	@ 0x50
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f947 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006424:	e02c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006432:	461a      	mov	r2, r3
 8006434:	f000 f90d 	bl	8006652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2160      	movs	r1, #96	@ 0x60
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f937 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006444:	e01c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006452:	461a      	mov	r2, r3
 8006454:	f000 f8ce 	bl	80065f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2140      	movs	r1, #64	@ 0x40
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f927 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006464:	e00c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f000 f91e 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006476:	e003      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
      break;
 800647c:	e000      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800647e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a46      	ldr	r2, [pc, #280]	@ (80065c8 <TIM_Base_SetConfig+0x12c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ba:	d00f      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a43      	ldr	r2, [pc, #268]	@ (80065cc <TIM_Base_SetConfig+0x130>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00b      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a42      	ldr	r2, [pc, #264]	@ (80065d0 <TIM_Base_SetConfig+0x134>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a41      	ldr	r2, [pc, #260]	@ (80065d4 <TIM_Base_SetConfig+0x138>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a40      	ldr	r2, [pc, #256]	@ (80065d8 <TIM_Base_SetConfig+0x13c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d108      	bne.n	80064ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a35      	ldr	r2, [pc, #212]	@ (80065c8 <TIM_Base_SetConfig+0x12c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02b      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d027      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a32      	ldr	r2, [pc, #200]	@ (80065cc <TIM_Base_SetConfig+0x130>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d023      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a31      	ldr	r2, [pc, #196]	@ (80065d0 <TIM_Base_SetConfig+0x134>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01f      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a30      	ldr	r2, [pc, #192]	@ (80065d4 <TIM_Base_SetConfig+0x138>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01b      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2f      	ldr	r2, [pc, #188]	@ (80065d8 <TIM_Base_SetConfig+0x13c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d017      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2e      	ldr	r2, [pc, #184]	@ (80065dc <TIM_Base_SetConfig+0x140>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2d      	ldr	r2, [pc, #180]	@ (80065e0 <TIM_Base_SetConfig+0x144>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00f      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2c      	ldr	r2, [pc, #176]	@ (80065e4 <TIM_Base_SetConfig+0x148>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00b      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2b      	ldr	r2, [pc, #172]	@ (80065e8 <TIM_Base_SetConfig+0x14c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2a      	ldr	r2, [pc, #168]	@ (80065ec <TIM_Base_SetConfig+0x150>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a29      	ldr	r2, [pc, #164]	@ (80065f0 <TIM_Base_SetConfig+0x154>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d108      	bne.n	8006560 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a10      	ldr	r2, [pc, #64]	@ (80065c8 <TIM_Base_SetConfig+0x12c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_Base_SetConfig+0xf8>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a12      	ldr	r2, [pc, #72]	@ (80065d8 <TIM_Base_SetConfig+0x13c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d103      	bne.n	800659c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d105      	bne.n	80065ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	611a      	str	r2, [r3, #16]
  }
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40010000 	.word	0x40010000
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	40010400 	.word	0x40010400
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800
 80065e8:	40001800 	.word	0x40001800
 80065ec:	40001c00 	.word	0x40001c00
 80065f0:	40002000 	.word	0x40002000

080065f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800661e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 030a 	bic.w	r3, r3, #10
 8006630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0210 	bic.w	r2, r3, #16
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800667c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800668e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f043 0307 	orr.w	r3, r3, #7
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	431a      	orrs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	2201      	movs	r2, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	43db      	mvns	r3, r3
 800674a:	401a      	ands	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1a      	ldr	r2, [r3, #32]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	431a      	orrs	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006788:	2302      	movs	r3, #2
 800678a:	e05a      	b.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a21      	ldr	r2, [pc, #132]	@ (8006850 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d022      	beq.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d8:	d01d      	beq.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1d      	ldr	r2, [pc, #116]	@ (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d018      	beq.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d013      	beq.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1a      	ldr	r2, [pc, #104]	@ (800685c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00e      	beq.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d009      	beq.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a17      	ldr	r2, [pc, #92]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a15      	ldr	r2, [pc, #84]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d10c      	bne.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800681c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	4313      	orrs	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40010400 	.word	0x40010400
 8006864:	40014000 	.word	0x40014000
 8006868:	40001800 	.word	0x40001800

0800686c <__cvt>:
 800686c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	ec57 6b10 	vmov	r6, r7, d0
 8006874:	2f00      	cmp	r7, #0
 8006876:	460c      	mov	r4, r1
 8006878:	4619      	mov	r1, r3
 800687a:	463b      	mov	r3, r7
 800687c:	bfbb      	ittet	lt
 800687e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006882:	461f      	movlt	r7, r3
 8006884:	2300      	movge	r3, #0
 8006886:	232d      	movlt	r3, #45	@ 0x2d
 8006888:	700b      	strb	r3, [r1, #0]
 800688a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800688c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006890:	4691      	mov	r9, r2
 8006892:	f023 0820 	bic.w	r8, r3, #32
 8006896:	bfbc      	itt	lt
 8006898:	4632      	movlt	r2, r6
 800689a:	4616      	movlt	r6, r2
 800689c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068a0:	d005      	beq.n	80068ae <__cvt+0x42>
 80068a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068a6:	d100      	bne.n	80068aa <__cvt+0x3e>
 80068a8:	3401      	adds	r4, #1
 80068aa:	2102      	movs	r1, #2
 80068ac:	e000      	b.n	80068b0 <__cvt+0x44>
 80068ae:	2103      	movs	r1, #3
 80068b0:	ab03      	add	r3, sp, #12
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	ab02      	add	r3, sp, #8
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	ec47 6b10 	vmov	d0, r6, r7
 80068bc:	4653      	mov	r3, sl
 80068be:	4622      	mov	r2, r4
 80068c0:	f000 ff82 	bl	80077c8 <_dtoa_r>
 80068c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068c8:	4605      	mov	r5, r0
 80068ca:	d119      	bne.n	8006900 <__cvt+0x94>
 80068cc:	f019 0f01 	tst.w	r9, #1
 80068d0:	d00e      	beq.n	80068f0 <__cvt+0x84>
 80068d2:	eb00 0904 	add.w	r9, r0, r4
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	4630      	mov	r0, r6
 80068dc:	4639      	mov	r1, r7
 80068de:	f7fa f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80068e2:	b108      	cbz	r0, 80068e8 <__cvt+0x7c>
 80068e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80068e8:	2230      	movs	r2, #48	@ 0x30
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	454b      	cmp	r3, r9
 80068ee:	d31e      	bcc.n	800692e <__cvt+0xc2>
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068f4:	1b5b      	subs	r3, r3, r5
 80068f6:	4628      	mov	r0, r5
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	b004      	add	sp, #16
 80068fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006900:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006904:	eb00 0904 	add.w	r9, r0, r4
 8006908:	d1e5      	bne.n	80068d6 <__cvt+0x6a>
 800690a:	7803      	ldrb	r3, [r0, #0]
 800690c:	2b30      	cmp	r3, #48	@ 0x30
 800690e:	d10a      	bne.n	8006926 <__cvt+0xba>
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	4630      	mov	r0, r6
 8006916:	4639      	mov	r1, r7
 8006918:	f7fa f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800691c:	b918      	cbnz	r0, 8006926 <__cvt+0xba>
 800691e:	f1c4 0401 	rsb	r4, r4, #1
 8006922:	f8ca 4000 	str.w	r4, [sl]
 8006926:	f8da 3000 	ldr.w	r3, [sl]
 800692a:	4499      	add	r9, r3
 800692c:	e7d3      	b.n	80068d6 <__cvt+0x6a>
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	9103      	str	r1, [sp, #12]
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	e7d9      	b.n	80068ea <__cvt+0x7e>

08006936 <__exponent>:
 8006936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006938:	2900      	cmp	r1, #0
 800693a:	bfba      	itte	lt
 800693c:	4249      	neglt	r1, r1
 800693e:	232d      	movlt	r3, #45	@ 0x2d
 8006940:	232b      	movge	r3, #43	@ 0x2b
 8006942:	2909      	cmp	r1, #9
 8006944:	7002      	strb	r2, [r0, #0]
 8006946:	7043      	strb	r3, [r0, #1]
 8006948:	dd29      	ble.n	800699e <__exponent+0x68>
 800694a:	f10d 0307 	add.w	r3, sp, #7
 800694e:	461d      	mov	r5, r3
 8006950:	270a      	movs	r7, #10
 8006952:	461a      	mov	r2, r3
 8006954:	fbb1 f6f7 	udiv	r6, r1, r7
 8006958:	fb07 1416 	mls	r4, r7, r6, r1
 800695c:	3430      	adds	r4, #48	@ 0x30
 800695e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006962:	460c      	mov	r4, r1
 8006964:	2c63      	cmp	r4, #99	@ 0x63
 8006966:	f103 33ff 	add.w	r3, r3, #4294967295
 800696a:	4631      	mov	r1, r6
 800696c:	dcf1      	bgt.n	8006952 <__exponent+0x1c>
 800696e:	3130      	adds	r1, #48	@ 0x30
 8006970:	1e94      	subs	r4, r2, #2
 8006972:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006976:	1c41      	adds	r1, r0, #1
 8006978:	4623      	mov	r3, r4
 800697a:	42ab      	cmp	r3, r5
 800697c:	d30a      	bcc.n	8006994 <__exponent+0x5e>
 800697e:	f10d 0309 	add.w	r3, sp, #9
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	42ac      	cmp	r4, r5
 8006986:	bf88      	it	hi
 8006988:	2300      	movhi	r3, #0
 800698a:	3302      	adds	r3, #2
 800698c:	4403      	add	r3, r0
 800698e:	1a18      	subs	r0, r3, r0
 8006990:	b003      	add	sp, #12
 8006992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006994:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006998:	f801 6f01 	strb.w	r6, [r1, #1]!
 800699c:	e7ed      	b.n	800697a <__exponent+0x44>
 800699e:	2330      	movs	r3, #48	@ 0x30
 80069a0:	3130      	adds	r1, #48	@ 0x30
 80069a2:	7083      	strb	r3, [r0, #2]
 80069a4:	70c1      	strb	r1, [r0, #3]
 80069a6:	1d03      	adds	r3, r0, #4
 80069a8:	e7f1      	b.n	800698e <__exponent+0x58>
	...

080069ac <_printf_float>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	b08d      	sub	sp, #52	@ 0x34
 80069b2:	460c      	mov	r4, r1
 80069b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80069b8:	4616      	mov	r6, r2
 80069ba:	461f      	mov	r7, r3
 80069bc:	4605      	mov	r5, r0
 80069be:	f000 fdf3 	bl	80075a8 <_localeconv_r>
 80069c2:	6803      	ldr	r3, [r0, #0]
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7f9 fc52 	bl	8000270 <strlen>
 80069cc:	2300      	movs	r3, #0
 80069ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d0:	f8d8 3000 	ldr.w	r3, [r8]
 80069d4:	9005      	str	r0, [sp, #20]
 80069d6:	3307      	adds	r3, #7
 80069d8:	f023 0307 	bic.w	r3, r3, #7
 80069dc:	f103 0208 	add.w	r2, r3, #8
 80069e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069e4:	f8d4 b000 	ldr.w	fp, [r4]
 80069e8:	f8c8 2000 	str.w	r2, [r8]
 80069ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069f4:	9307      	str	r3, [sp, #28]
 80069f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80069fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a02:	4b9c      	ldr	r3, [pc, #624]	@ (8006c74 <_printf_float+0x2c8>)
 8006a04:	f04f 32ff 	mov.w	r2, #4294967295
 8006a08:	f7fa f890 	bl	8000b2c <__aeabi_dcmpun>
 8006a0c:	bb70      	cbnz	r0, 8006a6c <_printf_float+0xc0>
 8006a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a12:	4b98      	ldr	r3, [pc, #608]	@ (8006c74 <_printf_float+0x2c8>)
 8006a14:	f04f 32ff 	mov.w	r2, #4294967295
 8006a18:	f7fa f86a 	bl	8000af0 <__aeabi_dcmple>
 8006a1c:	bb30      	cbnz	r0, 8006a6c <_printf_float+0xc0>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2300      	movs	r3, #0
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7fa f859 	bl	8000adc <__aeabi_dcmplt>
 8006a2a:	b110      	cbz	r0, 8006a32 <_printf_float+0x86>
 8006a2c:	232d      	movs	r3, #45	@ 0x2d
 8006a2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a32:	4a91      	ldr	r2, [pc, #580]	@ (8006c78 <_printf_float+0x2cc>)
 8006a34:	4b91      	ldr	r3, [pc, #580]	@ (8006c7c <_printf_float+0x2d0>)
 8006a36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a3a:	bf8c      	ite	hi
 8006a3c:	4690      	movhi	r8, r2
 8006a3e:	4698      	movls	r8, r3
 8006a40:	2303      	movs	r3, #3
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	f02b 0304 	bic.w	r3, fp, #4
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	f04f 0900 	mov.w	r9, #0
 8006a4e:	9700      	str	r7, [sp, #0]
 8006a50:	4633      	mov	r3, r6
 8006a52:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a54:	4621      	mov	r1, r4
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 f9d2 	bl	8006e00 <_printf_common>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f040 808d 	bne.w	8006b7c <_printf_float+0x1d0>
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	b00d      	add	sp, #52	@ 0x34
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	4649      	mov	r1, r9
 8006a74:	f7fa f85a 	bl	8000b2c <__aeabi_dcmpun>
 8006a78:	b140      	cbz	r0, 8006a8c <_printf_float+0xe0>
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bfbc      	itt	lt
 8006a80:	232d      	movlt	r3, #45	@ 0x2d
 8006a82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a86:	4a7e      	ldr	r2, [pc, #504]	@ (8006c80 <_printf_float+0x2d4>)
 8006a88:	4b7e      	ldr	r3, [pc, #504]	@ (8006c84 <_printf_float+0x2d8>)
 8006a8a:	e7d4      	b.n	8006a36 <_printf_float+0x8a>
 8006a8c:	6863      	ldr	r3, [r4, #4]
 8006a8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a92:	9206      	str	r2, [sp, #24]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	d13b      	bne.n	8006b10 <_printf_float+0x164>
 8006a98:	2306      	movs	r3, #6
 8006a9a:	6063      	str	r3, [r4, #4]
 8006a9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	9303      	str	r3, [sp, #12]
 8006aa6:	ab0a      	add	r3, sp, #40	@ 0x28
 8006aa8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006aac:	ab09      	add	r3, sp, #36	@ 0x24
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	ec49 8b10 	vmov	d0, r8, r9
 8006ab6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006aba:	4628      	mov	r0, r5
 8006abc:	f7ff fed6 	bl	800686c <__cvt>
 8006ac0:	9b06      	ldr	r3, [sp, #24]
 8006ac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ac4:	2b47      	cmp	r3, #71	@ 0x47
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	d129      	bne.n	8006b1e <_printf_float+0x172>
 8006aca:	1cc8      	adds	r0, r1, #3
 8006acc:	db02      	blt.n	8006ad4 <_printf_float+0x128>
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	dd41      	ble.n	8006b58 <_printf_float+0x1ac>
 8006ad4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ad8:	fa5f fa8a 	uxtb.w	sl, sl
 8006adc:	3901      	subs	r1, #1
 8006ade:	4652      	mov	r2, sl
 8006ae0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ae4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ae6:	f7ff ff26 	bl	8006936 <__exponent>
 8006aea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aec:	1813      	adds	r3, r2, r0
 8006aee:	2a01      	cmp	r2, #1
 8006af0:	4681      	mov	r9, r0
 8006af2:	6123      	str	r3, [r4, #16]
 8006af4:	dc02      	bgt.n	8006afc <_printf_float+0x150>
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	07d2      	lsls	r2, r2, #31
 8006afa:	d501      	bpl.n	8006b00 <_printf_float+0x154>
 8006afc:	3301      	adds	r3, #1
 8006afe:	6123      	str	r3, [r4, #16]
 8006b00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0a2      	beq.n	8006a4e <_printf_float+0xa2>
 8006b08:	232d      	movs	r3, #45	@ 0x2d
 8006b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b0e:	e79e      	b.n	8006a4e <_printf_float+0xa2>
 8006b10:	9a06      	ldr	r2, [sp, #24]
 8006b12:	2a47      	cmp	r2, #71	@ 0x47
 8006b14:	d1c2      	bne.n	8006a9c <_printf_float+0xf0>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1c0      	bne.n	8006a9c <_printf_float+0xf0>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e7bd      	b.n	8006a9a <_printf_float+0xee>
 8006b1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b22:	d9db      	bls.n	8006adc <_printf_float+0x130>
 8006b24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b28:	d118      	bne.n	8006b5c <_printf_float+0x1b0>
 8006b2a:	2900      	cmp	r1, #0
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	dd0b      	ble.n	8006b48 <_printf_float+0x19c>
 8006b30:	6121      	str	r1, [r4, #16]
 8006b32:	b913      	cbnz	r3, 8006b3a <_printf_float+0x18e>
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	07d0      	lsls	r0, r2, #31
 8006b38:	d502      	bpl.n	8006b40 <_printf_float+0x194>
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	440b      	add	r3, r1
 8006b3e:	6123      	str	r3, [r4, #16]
 8006b40:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	e7db      	b.n	8006b00 <_printf_float+0x154>
 8006b48:	b913      	cbnz	r3, 8006b50 <_printf_float+0x1a4>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	07d2      	lsls	r2, r2, #31
 8006b4e:	d501      	bpl.n	8006b54 <_printf_float+0x1a8>
 8006b50:	3302      	adds	r3, #2
 8006b52:	e7f4      	b.n	8006b3e <_printf_float+0x192>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e7f2      	b.n	8006b3e <_printf_float+0x192>
 8006b58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	db05      	blt.n	8006b6e <_printf_float+0x1c2>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	6121      	str	r1, [r4, #16]
 8006b66:	07d8      	lsls	r0, r3, #31
 8006b68:	d5ea      	bpl.n	8006b40 <_printf_float+0x194>
 8006b6a:	1c4b      	adds	r3, r1, #1
 8006b6c:	e7e7      	b.n	8006b3e <_printf_float+0x192>
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	bfd4      	ite	le
 8006b72:	f1c1 0202 	rsble	r2, r1, #2
 8006b76:	2201      	movgt	r2, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	e7e0      	b.n	8006b3e <_printf_float+0x192>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	055a      	lsls	r2, r3, #21
 8006b80:	d407      	bmi.n	8006b92 <_printf_float+0x1e6>
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	4642      	mov	r2, r8
 8006b86:	4631      	mov	r1, r6
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d12b      	bne.n	8006be8 <_printf_float+0x23c>
 8006b90:	e767      	b.n	8006a62 <_printf_float+0xb6>
 8006b92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b96:	f240 80dd 	bls.w	8006d54 <_printf_float+0x3a8>
 8006b9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f7f9 ff91 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d033      	beq.n	8006c12 <_printf_float+0x266>
 8006baa:	4a37      	ldr	r2, [pc, #220]	@ (8006c88 <_printf_float+0x2dc>)
 8006bac:	2301      	movs	r3, #1
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b8      	blx	r7
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	f43f af54 	beq.w	8006a62 <_printf_float+0xb6>
 8006bba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006bbe:	4543      	cmp	r3, r8
 8006bc0:	db02      	blt.n	8006bc8 <_printf_float+0x21c>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	07d8      	lsls	r0, r3, #31
 8006bc6:	d50f      	bpl.n	8006be8 <_printf_float+0x23c>
 8006bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f43f af45 	beq.w	8006a62 <_printf_float+0xb6>
 8006bd8:	f04f 0900 	mov.w	r9, #0
 8006bdc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006be0:	f104 0a1a 	add.w	sl, r4, #26
 8006be4:	45c8      	cmp	r8, r9
 8006be6:	dc09      	bgt.n	8006bfc <_printf_float+0x250>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	079b      	lsls	r3, r3, #30
 8006bec:	f100 8103 	bmi.w	8006df6 <_printf_float+0x44a>
 8006bf0:	68e0      	ldr	r0, [r4, #12]
 8006bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bf4:	4298      	cmp	r0, r3
 8006bf6:	bfb8      	it	lt
 8006bf8:	4618      	movlt	r0, r3
 8006bfa:	e734      	b.n	8006a66 <_printf_float+0xba>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4652      	mov	r2, sl
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	f43f af2b 	beq.w	8006a62 <_printf_float+0xb6>
 8006c0c:	f109 0901 	add.w	r9, r9, #1
 8006c10:	e7e8      	b.n	8006be4 <_printf_float+0x238>
 8006c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dc39      	bgt.n	8006c8c <_printf_float+0x2e0>
 8006c18:	4a1b      	ldr	r2, [pc, #108]	@ (8006c88 <_printf_float+0x2dc>)
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47b8      	blx	r7
 8006c22:	3001      	adds	r0, #1
 8006c24:	f43f af1d 	beq.w	8006a62 <_printf_float+0xb6>
 8006c28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c2c:	ea59 0303 	orrs.w	r3, r9, r3
 8006c30:	d102      	bne.n	8006c38 <_printf_float+0x28c>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	07d9      	lsls	r1, r3, #31
 8006c36:	d5d7      	bpl.n	8006be8 <_printf_float+0x23c>
 8006c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	f43f af0d 	beq.w	8006a62 <_printf_float+0xb6>
 8006c48:	f04f 0a00 	mov.w	sl, #0
 8006c4c:	f104 0b1a 	add.w	fp, r4, #26
 8006c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c52:	425b      	negs	r3, r3
 8006c54:	4553      	cmp	r3, sl
 8006c56:	dc01      	bgt.n	8006c5c <_printf_float+0x2b0>
 8006c58:	464b      	mov	r3, r9
 8006c5a:	e793      	b.n	8006b84 <_printf_float+0x1d8>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	465a      	mov	r2, fp
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f aefb 	beq.w	8006a62 <_printf_float+0xb6>
 8006c6c:	f10a 0a01 	add.w	sl, sl, #1
 8006c70:	e7ee      	b.n	8006c50 <_printf_float+0x2a4>
 8006c72:	bf00      	nop
 8006c74:	7fefffff 	.word	0x7fefffff
 8006c78:	0800a024 	.word	0x0800a024
 8006c7c:	0800a020 	.word	0x0800a020
 8006c80:	0800a02c 	.word	0x0800a02c
 8006c84:	0800a028 	.word	0x0800a028
 8006c88:	0800a030 	.word	0x0800a030
 8006c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c92:	4553      	cmp	r3, sl
 8006c94:	bfa8      	it	ge
 8006c96:	4653      	movge	r3, sl
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	4699      	mov	r9, r3
 8006c9c:	dc36      	bgt.n	8006d0c <_printf_float+0x360>
 8006c9e:	f04f 0b00 	mov.w	fp, #0
 8006ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ca6:	f104 021a 	add.w	r2, r4, #26
 8006caa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cac:	9306      	str	r3, [sp, #24]
 8006cae:	eba3 0309 	sub.w	r3, r3, r9
 8006cb2:	455b      	cmp	r3, fp
 8006cb4:	dc31      	bgt.n	8006d1a <_printf_float+0x36e>
 8006cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb8:	459a      	cmp	sl, r3
 8006cba:	dc3a      	bgt.n	8006d32 <_printf_float+0x386>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07da      	lsls	r2, r3, #31
 8006cc0:	d437      	bmi.n	8006d32 <_printf_float+0x386>
 8006cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc4:	ebaa 0903 	sub.w	r9, sl, r3
 8006cc8:	9b06      	ldr	r3, [sp, #24]
 8006cca:	ebaa 0303 	sub.w	r3, sl, r3
 8006cce:	4599      	cmp	r9, r3
 8006cd0:	bfa8      	it	ge
 8006cd2:	4699      	movge	r9, r3
 8006cd4:	f1b9 0f00 	cmp.w	r9, #0
 8006cd8:	dc33      	bgt.n	8006d42 <_printf_float+0x396>
 8006cda:	f04f 0800 	mov.w	r8, #0
 8006cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ce2:	f104 0b1a 	add.w	fp, r4, #26
 8006ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8006cec:	eba3 0309 	sub.w	r3, r3, r9
 8006cf0:	4543      	cmp	r3, r8
 8006cf2:	f77f af79 	ble.w	8006be8 <_printf_float+0x23c>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	465a      	mov	r2, fp
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f aeae 	beq.w	8006a62 <_printf_float+0xb6>
 8006d06:	f108 0801 	add.w	r8, r8, #1
 8006d0a:	e7ec      	b.n	8006ce6 <_printf_float+0x33a>
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	d1c2      	bne.n	8006c9e <_printf_float+0x2f2>
 8006d18:	e6a3      	b.n	8006a62 <_printf_float+0xb6>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4628      	mov	r0, r5
 8006d20:	9206      	str	r2, [sp, #24]
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	f43f ae9c 	beq.w	8006a62 <_printf_float+0xb6>
 8006d2a:	9a06      	ldr	r2, [sp, #24]
 8006d2c:	f10b 0b01 	add.w	fp, fp, #1
 8006d30:	e7bb      	b.n	8006caa <_printf_float+0x2fe>
 8006d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d1c0      	bne.n	8006cc2 <_printf_float+0x316>
 8006d40:	e68f      	b.n	8006a62 <_printf_float+0xb6>
 8006d42:	9a06      	ldr	r2, [sp, #24]
 8006d44:	464b      	mov	r3, r9
 8006d46:	4442      	add	r2, r8
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d1c3      	bne.n	8006cda <_printf_float+0x32e>
 8006d52:	e686      	b.n	8006a62 <_printf_float+0xb6>
 8006d54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d58:	f1ba 0f01 	cmp.w	sl, #1
 8006d5c:	dc01      	bgt.n	8006d62 <_printf_float+0x3b6>
 8006d5e:	07db      	lsls	r3, r3, #31
 8006d60:	d536      	bpl.n	8006dd0 <_printf_float+0x424>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4642      	mov	r2, r8
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f43f ae78 	beq.w	8006a62 <_printf_float+0xb6>
 8006d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d76:	4631      	mov	r1, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	f43f ae70 	beq.w	8006a62 <_printf_float+0xb6>
 8006d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d8e:	f7f9 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d92:	b9c0      	cbnz	r0, 8006dc6 <_printf_float+0x41a>
 8006d94:	4653      	mov	r3, sl
 8006d96:	f108 0201 	add.w	r2, r8, #1
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	d10c      	bne.n	8006dbe <_printf_float+0x412>
 8006da4:	e65d      	b.n	8006a62 <_printf_float+0xb6>
 8006da6:	2301      	movs	r3, #1
 8006da8:	465a      	mov	r2, fp
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f ae56 	beq.w	8006a62 <_printf_float+0xb6>
 8006db6:	f108 0801 	add.w	r8, r8, #1
 8006dba:	45d0      	cmp	r8, sl
 8006dbc:	dbf3      	blt.n	8006da6 <_printf_float+0x3fa>
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006dc4:	e6df      	b.n	8006b86 <_printf_float+0x1da>
 8006dc6:	f04f 0800 	mov.w	r8, #0
 8006dca:	f104 0b1a 	add.w	fp, r4, #26
 8006dce:	e7f4      	b.n	8006dba <_printf_float+0x40e>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	e7e1      	b.n	8006d9a <_printf_float+0x3ee>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	464a      	mov	r2, r9
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	f43f ae3e 	beq.w	8006a62 <_printf_float+0xb6>
 8006de6:	f108 0801 	add.w	r8, r8, #1
 8006dea:	68e3      	ldr	r3, [r4, #12]
 8006dec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dee:	1a5b      	subs	r3, r3, r1
 8006df0:	4543      	cmp	r3, r8
 8006df2:	dcf0      	bgt.n	8006dd6 <_printf_float+0x42a>
 8006df4:	e6fc      	b.n	8006bf0 <_printf_float+0x244>
 8006df6:	f04f 0800 	mov.w	r8, #0
 8006dfa:	f104 0919 	add.w	r9, r4, #25
 8006dfe:	e7f4      	b.n	8006dea <_printf_float+0x43e>

08006e00 <_printf_common>:
 8006e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e04:	4616      	mov	r6, r2
 8006e06:	4698      	mov	r8, r3
 8006e08:	688a      	ldr	r2, [r1, #8]
 8006e0a:	690b      	ldr	r3, [r1, #16]
 8006e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	bfb8      	it	lt
 8006e14:	4613      	movlt	r3, r2
 8006e16:	6033      	str	r3, [r6, #0]
 8006e18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b10a      	cbz	r2, 8006e26 <_printf_common+0x26>
 8006e22:	3301      	adds	r3, #1
 8006e24:	6033      	str	r3, [r6, #0]
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	0699      	lsls	r1, r3, #26
 8006e2a:	bf42      	ittt	mi
 8006e2c:	6833      	ldrmi	r3, [r6, #0]
 8006e2e:	3302      	addmi	r3, #2
 8006e30:	6033      	strmi	r3, [r6, #0]
 8006e32:	6825      	ldr	r5, [r4, #0]
 8006e34:	f015 0506 	ands.w	r5, r5, #6
 8006e38:	d106      	bne.n	8006e48 <_printf_common+0x48>
 8006e3a:	f104 0a19 	add.w	sl, r4, #25
 8006e3e:	68e3      	ldr	r3, [r4, #12]
 8006e40:	6832      	ldr	r2, [r6, #0]
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	42ab      	cmp	r3, r5
 8006e46:	dc26      	bgt.n	8006e96 <_printf_common+0x96>
 8006e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e4c:	6822      	ldr	r2, [r4, #0]
 8006e4e:	3b00      	subs	r3, #0
 8006e50:	bf18      	it	ne
 8006e52:	2301      	movne	r3, #1
 8006e54:	0692      	lsls	r2, r2, #26
 8006e56:	d42b      	bmi.n	8006eb0 <_printf_common+0xb0>
 8006e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	4638      	mov	r0, r7
 8006e60:	47c8      	blx	r9
 8006e62:	3001      	adds	r0, #1
 8006e64:	d01e      	beq.n	8006ea4 <_printf_common+0xa4>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	6922      	ldr	r2, [r4, #16]
 8006e6a:	f003 0306 	and.w	r3, r3, #6
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	bf02      	ittt	eq
 8006e72:	68e5      	ldreq	r5, [r4, #12]
 8006e74:	6833      	ldreq	r3, [r6, #0]
 8006e76:	1aed      	subeq	r5, r5, r3
 8006e78:	68a3      	ldr	r3, [r4, #8]
 8006e7a:	bf0c      	ite	eq
 8006e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e80:	2500      	movne	r5, #0
 8006e82:	4293      	cmp	r3, r2
 8006e84:	bfc4      	itt	gt
 8006e86:	1a9b      	subgt	r3, r3, r2
 8006e88:	18ed      	addgt	r5, r5, r3
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	341a      	adds	r4, #26
 8006e8e:	42b5      	cmp	r5, r6
 8006e90:	d11a      	bne.n	8006ec8 <_printf_common+0xc8>
 8006e92:	2000      	movs	r0, #0
 8006e94:	e008      	b.n	8006ea8 <_printf_common+0xa8>
 8006e96:	2301      	movs	r3, #1
 8006e98:	4652      	mov	r2, sl
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	47c8      	blx	r9
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d103      	bne.n	8006eac <_printf_common+0xac>
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eac:	3501      	adds	r5, #1
 8006eae:	e7c6      	b.n	8006e3e <_printf_common+0x3e>
 8006eb0:	18e1      	adds	r1, r4, r3
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	2030      	movs	r0, #48	@ 0x30
 8006eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006eba:	4422      	add	r2, r4
 8006ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ec4:	3302      	adds	r3, #2
 8006ec6:	e7c7      	b.n	8006e58 <_printf_common+0x58>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	4622      	mov	r2, r4
 8006ecc:	4641      	mov	r1, r8
 8006ece:	4638      	mov	r0, r7
 8006ed0:	47c8      	blx	r9
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d0e6      	beq.n	8006ea4 <_printf_common+0xa4>
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7d9      	b.n	8006e8e <_printf_common+0x8e>
	...

08006edc <_printf_i>:
 8006edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	7e0f      	ldrb	r7, [r1, #24]
 8006ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ee4:	2f78      	cmp	r7, #120	@ 0x78
 8006ee6:	4691      	mov	r9, r2
 8006ee8:	4680      	mov	r8, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	469a      	mov	sl, r3
 8006eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ef2:	d807      	bhi.n	8006f04 <_printf_i+0x28>
 8006ef4:	2f62      	cmp	r7, #98	@ 0x62
 8006ef6:	d80a      	bhi.n	8006f0e <_printf_i+0x32>
 8006ef8:	2f00      	cmp	r7, #0
 8006efa:	f000 80d1 	beq.w	80070a0 <_printf_i+0x1c4>
 8006efe:	2f58      	cmp	r7, #88	@ 0x58
 8006f00:	f000 80b8 	beq.w	8007074 <_printf_i+0x198>
 8006f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f0c:	e03a      	b.n	8006f84 <_printf_i+0xa8>
 8006f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f12:	2b15      	cmp	r3, #21
 8006f14:	d8f6      	bhi.n	8006f04 <_printf_i+0x28>
 8006f16:	a101      	add	r1, pc, #4	@ (adr r1, 8006f1c <_printf_i+0x40>)
 8006f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f1c:	08006f75 	.word	0x08006f75
 8006f20:	08006f89 	.word	0x08006f89
 8006f24:	08006f05 	.word	0x08006f05
 8006f28:	08006f05 	.word	0x08006f05
 8006f2c:	08006f05 	.word	0x08006f05
 8006f30:	08006f05 	.word	0x08006f05
 8006f34:	08006f89 	.word	0x08006f89
 8006f38:	08006f05 	.word	0x08006f05
 8006f3c:	08006f05 	.word	0x08006f05
 8006f40:	08006f05 	.word	0x08006f05
 8006f44:	08006f05 	.word	0x08006f05
 8006f48:	08007087 	.word	0x08007087
 8006f4c:	08006fb3 	.word	0x08006fb3
 8006f50:	08007041 	.word	0x08007041
 8006f54:	08006f05 	.word	0x08006f05
 8006f58:	08006f05 	.word	0x08006f05
 8006f5c:	080070a9 	.word	0x080070a9
 8006f60:	08006f05 	.word	0x08006f05
 8006f64:	08006fb3 	.word	0x08006fb3
 8006f68:	08006f05 	.word	0x08006f05
 8006f6c:	08006f05 	.word	0x08006f05
 8006f70:	08007049 	.word	0x08007049
 8006f74:	6833      	ldr	r3, [r6, #0]
 8006f76:	1d1a      	adds	r2, r3, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6032      	str	r2, [r6, #0]
 8006f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f84:	2301      	movs	r3, #1
 8006f86:	e09c      	b.n	80070c2 <_printf_i+0x1e6>
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	6820      	ldr	r0, [r4, #0]
 8006f8c:	1d19      	adds	r1, r3, #4
 8006f8e:	6031      	str	r1, [r6, #0]
 8006f90:	0606      	lsls	r6, r0, #24
 8006f92:	d501      	bpl.n	8006f98 <_printf_i+0xbc>
 8006f94:	681d      	ldr	r5, [r3, #0]
 8006f96:	e003      	b.n	8006fa0 <_printf_i+0xc4>
 8006f98:	0645      	lsls	r5, r0, #25
 8006f9a:	d5fb      	bpl.n	8006f94 <_printf_i+0xb8>
 8006f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fa0:	2d00      	cmp	r5, #0
 8006fa2:	da03      	bge.n	8006fac <_printf_i+0xd0>
 8006fa4:	232d      	movs	r3, #45	@ 0x2d
 8006fa6:	426d      	negs	r5, r5
 8006fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fac:	4858      	ldr	r0, [pc, #352]	@ (8007110 <_printf_i+0x234>)
 8006fae:	230a      	movs	r3, #10
 8006fb0:	e011      	b.n	8006fd6 <_printf_i+0xfa>
 8006fb2:	6821      	ldr	r1, [r4, #0]
 8006fb4:	6833      	ldr	r3, [r6, #0]
 8006fb6:	0608      	lsls	r0, r1, #24
 8006fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fbc:	d402      	bmi.n	8006fc4 <_printf_i+0xe8>
 8006fbe:	0649      	lsls	r1, r1, #25
 8006fc0:	bf48      	it	mi
 8006fc2:	b2ad      	uxthmi	r5, r5
 8006fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fc6:	4852      	ldr	r0, [pc, #328]	@ (8007110 <_printf_i+0x234>)
 8006fc8:	6033      	str	r3, [r6, #0]
 8006fca:	bf14      	ite	ne
 8006fcc:	230a      	movne	r3, #10
 8006fce:	2308      	moveq	r3, #8
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fd6:	6866      	ldr	r6, [r4, #4]
 8006fd8:	60a6      	str	r6, [r4, #8]
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	db05      	blt.n	8006fea <_printf_i+0x10e>
 8006fde:	6821      	ldr	r1, [r4, #0]
 8006fe0:	432e      	orrs	r6, r5
 8006fe2:	f021 0104 	bic.w	r1, r1, #4
 8006fe6:	6021      	str	r1, [r4, #0]
 8006fe8:	d04b      	beq.n	8007082 <_printf_i+0x1a6>
 8006fea:	4616      	mov	r6, r2
 8006fec:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ff0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ff4:	5dc7      	ldrb	r7, [r0, r7]
 8006ff6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ffa:	462f      	mov	r7, r5
 8006ffc:	42bb      	cmp	r3, r7
 8006ffe:	460d      	mov	r5, r1
 8007000:	d9f4      	bls.n	8006fec <_printf_i+0x110>
 8007002:	2b08      	cmp	r3, #8
 8007004:	d10b      	bne.n	800701e <_printf_i+0x142>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	07df      	lsls	r7, r3, #31
 800700a:	d508      	bpl.n	800701e <_printf_i+0x142>
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	6861      	ldr	r1, [r4, #4]
 8007010:	4299      	cmp	r1, r3
 8007012:	bfde      	ittt	le
 8007014:	2330      	movle	r3, #48	@ 0x30
 8007016:	f806 3c01 	strble.w	r3, [r6, #-1]
 800701a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800701e:	1b92      	subs	r2, r2, r6
 8007020:	6122      	str	r2, [r4, #16]
 8007022:	f8cd a000 	str.w	sl, [sp]
 8007026:	464b      	mov	r3, r9
 8007028:	aa03      	add	r2, sp, #12
 800702a:	4621      	mov	r1, r4
 800702c:	4640      	mov	r0, r8
 800702e:	f7ff fee7 	bl	8006e00 <_printf_common>
 8007032:	3001      	adds	r0, #1
 8007034:	d14a      	bne.n	80070cc <_printf_i+0x1f0>
 8007036:	f04f 30ff 	mov.w	r0, #4294967295
 800703a:	b004      	add	sp, #16
 800703c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	f043 0320 	orr.w	r3, r3, #32
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	4832      	ldr	r0, [pc, #200]	@ (8007114 <_printf_i+0x238>)
 800704a:	2778      	movs	r7, #120	@ 0x78
 800704c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	6831      	ldr	r1, [r6, #0]
 8007054:	061f      	lsls	r7, r3, #24
 8007056:	f851 5b04 	ldr.w	r5, [r1], #4
 800705a:	d402      	bmi.n	8007062 <_printf_i+0x186>
 800705c:	065f      	lsls	r7, r3, #25
 800705e:	bf48      	it	mi
 8007060:	b2ad      	uxthmi	r5, r5
 8007062:	6031      	str	r1, [r6, #0]
 8007064:	07d9      	lsls	r1, r3, #31
 8007066:	bf44      	itt	mi
 8007068:	f043 0320 	orrmi.w	r3, r3, #32
 800706c:	6023      	strmi	r3, [r4, #0]
 800706e:	b11d      	cbz	r5, 8007078 <_printf_i+0x19c>
 8007070:	2310      	movs	r3, #16
 8007072:	e7ad      	b.n	8006fd0 <_printf_i+0xf4>
 8007074:	4826      	ldr	r0, [pc, #152]	@ (8007110 <_printf_i+0x234>)
 8007076:	e7e9      	b.n	800704c <_printf_i+0x170>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	f023 0320 	bic.w	r3, r3, #32
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	e7f6      	b.n	8007070 <_printf_i+0x194>
 8007082:	4616      	mov	r6, r2
 8007084:	e7bd      	b.n	8007002 <_printf_i+0x126>
 8007086:	6833      	ldr	r3, [r6, #0]
 8007088:	6825      	ldr	r5, [r4, #0]
 800708a:	6961      	ldr	r1, [r4, #20]
 800708c:	1d18      	adds	r0, r3, #4
 800708e:	6030      	str	r0, [r6, #0]
 8007090:	062e      	lsls	r6, r5, #24
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	d501      	bpl.n	800709a <_printf_i+0x1be>
 8007096:	6019      	str	r1, [r3, #0]
 8007098:	e002      	b.n	80070a0 <_printf_i+0x1c4>
 800709a:	0668      	lsls	r0, r5, #25
 800709c:	d5fb      	bpl.n	8007096 <_printf_i+0x1ba>
 800709e:	8019      	strh	r1, [r3, #0]
 80070a0:	2300      	movs	r3, #0
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	4616      	mov	r6, r2
 80070a6:	e7bc      	b.n	8007022 <_printf_i+0x146>
 80070a8:	6833      	ldr	r3, [r6, #0]
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	6032      	str	r2, [r6, #0]
 80070ae:	681e      	ldr	r6, [r3, #0]
 80070b0:	6862      	ldr	r2, [r4, #4]
 80070b2:	2100      	movs	r1, #0
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7f9 f88b 	bl	80001d0 <memchr>
 80070ba:	b108      	cbz	r0, 80070c0 <_printf_i+0x1e4>
 80070bc:	1b80      	subs	r0, r0, r6
 80070be:	6060      	str	r0, [r4, #4]
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	2300      	movs	r3, #0
 80070c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ca:	e7aa      	b.n	8007022 <_printf_i+0x146>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	4632      	mov	r2, r6
 80070d0:	4649      	mov	r1, r9
 80070d2:	4640      	mov	r0, r8
 80070d4:	47d0      	blx	sl
 80070d6:	3001      	adds	r0, #1
 80070d8:	d0ad      	beq.n	8007036 <_printf_i+0x15a>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	079b      	lsls	r3, r3, #30
 80070de:	d413      	bmi.n	8007108 <_printf_i+0x22c>
 80070e0:	68e0      	ldr	r0, [r4, #12]
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	4298      	cmp	r0, r3
 80070e6:	bfb8      	it	lt
 80070e8:	4618      	movlt	r0, r3
 80070ea:	e7a6      	b.n	800703a <_printf_i+0x15e>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4632      	mov	r2, r6
 80070f0:	4649      	mov	r1, r9
 80070f2:	4640      	mov	r0, r8
 80070f4:	47d0      	blx	sl
 80070f6:	3001      	adds	r0, #1
 80070f8:	d09d      	beq.n	8007036 <_printf_i+0x15a>
 80070fa:	3501      	adds	r5, #1
 80070fc:	68e3      	ldr	r3, [r4, #12]
 80070fe:	9903      	ldr	r1, [sp, #12]
 8007100:	1a5b      	subs	r3, r3, r1
 8007102:	42ab      	cmp	r3, r5
 8007104:	dcf2      	bgt.n	80070ec <_printf_i+0x210>
 8007106:	e7eb      	b.n	80070e0 <_printf_i+0x204>
 8007108:	2500      	movs	r5, #0
 800710a:	f104 0619 	add.w	r6, r4, #25
 800710e:	e7f5      	b.n	80070fc <_printf_i+0x220>
 8007110:	0800a032 	.word	0x0800a032
 8007114:	0800a043 	.word	0x0800a043

08007118 <std>:
 8007118:	2300      	movs	r3, #0
 800711a:	b510      	push	{r4, lr}
 800711c:	4604      	mov	r4, r0
 800711e:	e9c0 3300 	strd	r3, r3, [r0]
 8007122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007126:	6083      	str	r3, [r0, #8]
 8007128:	8181      	strh	r1, [r0, #12]
 800712a:	6643      	str	r3, [r0, #100]	@ 0x64
 800712c:	81c2      	strh	r2, [r0, #14]
 800712e:	6183      	str	r3, [r0, #24]
 8007130:	4619      	mov	r1, r3
 8007132:	2208      	movs	r2, #8
 8007134:	305c      	adds	r0, #92	@ 0x5c
 8007136:	f000 fa2f 	bl	8007598 <memset>
 800713a:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <std+0x58>)
 800713c:	6263      	str	r3, [r4, #36]	@ 0x24
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <std+0x5c>)
 8007140:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007142:	4b0d      	ldr	r3, [pc, #52]	@ (8007178 <std+0x60>)
 8007144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007146:	4b0d      	ldr	r3, [pc, #52]	@ (800717c <std+0x64>)
 8007148:	6323      	str	r3, [r4, #48]	@ 0x30
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <std+0x68>)
 800714c:	6224      	str	r4, [r4, #32]
 800714e:	429c      	cmp	r4, r3
 8007150:	d006      	beq.n	8007160 <std+0x48>
 8007152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007156:	4294      	cmp	r4, r2
 8007158:	d002      	beq.n	8007160 <std+0x48>
 800715a:	33d0      	adds	r3, #208	@ 0xd0
 800715c:	429c      	cmp	r4, r3
 800715e:	d105      	bne.n	800716c <std+0x54>
 8007160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007168:	f000 ba92 	b.w	8007690 <__retarget_lock_init_recursive>
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop
 8007170:	080073e9 	.word	0x080073e9
 8007174:	0800740b 	.word	0x0800740b
 8007178:	08007443 	.word	0x08007443
 800717c:	08007467 	.word	0x08007467
 8007180:	20000484 	.word	0x20000484

08007184 <stdio_exit_handler>:
 8007184:	4a02      	ldr	r2, [pc, #8]	@ (8007190 <stdio_exit_handler+0xc>)
 8007186:	4903      	ldr	r1, [pc, #12]	@ (8007194 <stdio_exit_handler+0x10>)
 8007188:	4803      	ldr	r0, [pc, #12]	@ (8007198 <stdio_exit_handler+0x14>)
 800718a:	f000 b869 	b.w	8007260 <_fwalk_sglue>
 800718e:	bf00      	nop
 8007190:	20000014 	.word	0x20000014
 8007194:	08009299 	.word	0x08009299
 8007198:	20000024 	.word	0x20000024

0800719c <cleanup_stdio>:
 800719c:	6841      	ldr	r1, [r0, #4]
 800719e:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <cleanup_stdio+0x34>)
 80071a0:	4299      	cmp	r1, r3
 80071a2:	b510      	push	{r4, lr}
 80071a4:	4604      	mov	r4, r0
 80071a6:	d001      	beq.n	80071ac <cleanup_stdio+0x10>
 80071a8:	f002 f876 	bl	8009298 <_fflush_r>
 80071ac:	68a1      	ldr	r1, [r4, #8]
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <cleanup_stdio+0x38>)
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d002      	beq.n	80071ba <cleanup_stdio+0x1e>
 80071b4:	4620      	mov	r0, r4
 80071b6:	f002 f86f 	bl	8009298 <_fflush_r>
 80071ba:	68e1      	ldr	r1, [r4, #12]
 80071bc:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <cleanup_stdio+0x3c>)
 80071be:	4299      	cmp	r1, r3
 80071c0:	d004      	beq.n	80071cc <cleanup_stdio+0x30>
 80071c2:	4620      	mov	r0, r4
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	f002 b866 	b.w	8009298 <_fflush_r>
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop
 80071d0:	20000484 	.word	0x20000484
 80071d4:	200004ec 	.word	0x200004ec
 80071d8:	20000554 	.word	0x20000554

080071dc <global_stdio_init.part.0>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	4b0b      	ldr	r3, [pc, #44]	@ (800720c <global_stdio_init.part.0+0x30>)
 80071e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007210 <global_stdio_init.part.0+0x34>)
 80071e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007214 <global_stdio_init.part.0+0x38>)
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	4620      	mov	r0, r4
 80071e8:	2200      	movs	r2, #0
 80071ea:	2104      	movs	r1, #4
 80071ec:	f7ff ff94 	bl	8007118 <std>
 80071f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071f4:	2201      	movs	r2, #1
 80071f6:	2109      	movs	r1, #9
 80071f8:	f7ff ff8e 	bl	8007118 <std>
 80071fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007200:	2202      	movs	r2, #2
 8007202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007206:	2112      	movs	r1, #18
 8007208:	f7ff bf86 	b.w	8007118 <std>
 800720c:	200005bc 	.word	0x200005bc
 8007210:	20000484 	.word	0x20000484
 8007214:	08007185 	.word	0x08007185

08007218 <__sfp_lock_acquire>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__sfp_lock_acquire+0x8>)
 800721a:	f000 ba3a 	b.w	8007692 <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	200005c5 	.word	0x200005c5

08007224 <__sfp_lock_release>:
 8007224:	4801      	ldr	r0, [pc, #4]	@ (800722c <__sfp_lock_release+0x8>)
 8007226:	f000 ba35 	b.w	8007694 <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	200005c5 	.word	0x200005c5

08007230 <__sinit>:
 8007230:	b510      	push	{r4, lr}
 8007232:	4604      	mov	r4, r0
 8007234:	f7ff fff0 	bl	8007218 <__sfp_lock_acquire>
 8007238:	6a23      	ldr	r3, [r4, #32]
 800723a:	b11b      	cbz	r3, 8007244 <__sinit+0x14>
 800723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007240:	f7ff bff0 	b.w	8007224 <__sfp_lock_release>
 8007244:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <__sinit+0x28>)
 8007246:	6223      	str	r3, [r4, #32]
 8007248:	4b04      	ldr	r3, [pc, #16]	@ (800725c <__sinit+0x2c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f5      	bne.n	800723c <__sinit+0xc>
 8007250:	f7ff ffc4 	bl	80071dc <global_stdio_init.part.0>
 8007254:	e7f2      	b.n	800723c <__sinit+0xc>
 8007256:	bf00      	nop
 8007258:	0800719d 	.word	0x0800719d
 800725c:	200005bc 	.word	0x200005bc

08007260 <_fwalk_sglue>:
 8007260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007264:	4607      	mov	r7, r0
 8007266:	4688      	mov	r8, r1
 8007268:	4614      	mov	r4, r2
 800726a:	2600      	movs	r6, #0
 800726c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007270:	f1b9 0901 	subs.w	r9, r9, #1
 8007274:	d505      	bpl.n	8007282 <_fwalk_sglue+0x22>
 8007276:	6824      	ldr	r4, [r4, #0]
 8007278:	2c00      	cmp	r4, #0
 800727a:	d1f7      	bne.n	800726c <_fwalk_sglue+0xc>
 800727c:	4630      	mov	r0, r6
 800727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d907      	bls.n	8007298 <_fwalk_sglue+0x38>
 8007288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800728c:	3301      	adds	r3, #1
 800728e:	d003      	beq.n	8007298 <_fwalk_sglue+0x38>
 8007290:	4629      	mov	r1, r5
 8007292:	4638      	mov	r0, r7
 8007294:	47c0      	blx	r8
 8007296:	4306      	orrs	r6, r0
 8007298:	3568      	adds	r5, #104	@ 0x68
 800729a:	e7e9      	b.n	8007270 <_fwalk_sglue+0x10>

0800729c <iprintf>:
 800729c:	b40f      	push	{r0, r1, r2, r3}
 800729e:	b507      	push	{r0, r1, r2, lr}
 80072a0:	4906      	ldr	r1, [pc, #24]	@ (80072bc <iprintf+0x20>)
 80072a2:	ab04      	add	r3, sp, #16
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072aa:	6881      	ldr	r1, [r0, #8]
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	f001 fe57 	bl	8008f60 <_vfiprintf_r>
 80072b2:	b003      	add	sp, #12
 80072b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b8:	b004      	add	sp, #16
 80072ba:	4770      	bx	lr
 80072bc:	20000020 	.word	0x20000020

080072c0 <_puts_r>:
 80072c0:	6a03      	ldr	r3, [r0, #32]
 80072c2:	b570      	push	{r4, r5, r6, lr}
 80072c4:	6884      	ldr	r4, [r0, #8]
 80072c6:	4605      	mov	r5, r0
 80072c8:	460e      	mov	r6, r1
 80072ca:	b90b      	cbnz	r3, 80072d0 <_puts_r+0x10>
 80072cc:	f7ff ffb0 	bl	8007230 <__sinit>
 80072d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072d2:	07db      	lsls	r3, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_puts_r+0x22>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	0598      	lsls	r0, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_puts_r+0x22>
 80072dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072de:	f000 f9d8 	bl	8007692 <__retarget_lock_acquire_recursive>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	0719      	lsls	r1, r3, #28
 80072e6:	d502      	bpl.n	80072ee <_puts_r+0x2e>
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d135      	bne.n	800735a <_puts_r+0x9a>
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f8fb 	bl	80074ec <__swsetup_r>
 80072f6:	b380      	cbz	r0, 800735a <_puts_r+0x9a>
 80072f8:	f04f 35ff 	mov.w	r5, #4294967295
 80072fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072fe:	07da      	lsls	r2, r3, #31
 8007300:	d405      	bmi.n	800730e <_puts_r+0x4e>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	059b      	lsls	r3, r3, #22
 8007306:	d402      	bmi.n	800730e <_puts_r+0x4e>
 8007308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730a:	f000 f9c3 	bl	8007694 <__retarget_lock_release_recursive>
 800730e:	4628      	mov	r0, r5
 8007310:	bd70      	pop	{r4, r5, r6, pc}
 8007312:	2b00      	cmp	r3, #0
 8007314:	da04      	bge.n	8007320 <_puts_r+0x60>
 8007316:	69a2      	ldr	r2, [r4, #24]
 8007318:	429a      	cmp	r2, r3
 800731a:	dc17      	bgt.n	800734c <_puts_r+0x8c>
 800731c:	290a      	cmp	r1, #10
 800731e:	d015      	beq.n	800734c <_puts_r+0x8c>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	7019      	strb	r1, [r3, #0]
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800732e:	3b01      	subs	r3, #1
 8007330:	60a3      	str	r3, [r4, #8]
 8007332:	2900      	cmp	r1, #0
 8007334:	d1ed      	bne.n	8007312 <_puts_r+0x52>
 8007336:	2b00      	cmp	r3, #0
 8007338:	da11      	bge.n	800735e <_puts_r+0x9e>
 800733a:	4622      	mov	r2, r4
 800733c:	210a      	movs	r1, #10
 800733e:	4628      	mov	r0, r5
 8007340:	f000 f895 	bl	800746e <__swbuf_r>
 8007344:	3001      	adds	r0, #1
 8007346:	d0d7      	beq.n	80072f8 <_puts_r+0x38>
 8007348:	250a      	movs	r5, #10
 800734a:	e7d7      	b.n	80072fc <_puts_r+0x3c>
 800734c:	4622      	mov	r2, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f000 f88d 	bl	800746e <__swbuf_r>
 8007354:	3001      	adds	r0, #1
 8007356:	d1e7      	bne.n	8007328 <_puts_r+0x68>
 8007358:	e7ce      	b.n	80072f8 <_puts_r+0x38>
 800735a:	3e01      	subs	r6, #1
 800735c:	e7e4      	b.n	8007328 <_puts_r+0x68>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	6022      	str	r2, [r4, #0]
 8007364:	220a      	movs	r2, #10
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e7ee      	b.n	8007348 <_puts_r+0x88>
	...

0800736c <puts>:
 800736c:	4b02      	ldr	r3, [pc, #8]	@ (8007378 <puts+0xc>)
 800736e:	4601      	mov	r1, r0
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	f7ff bfa5 	b.w	80072c0 <_puts_r>
 8007376:	bf00      	nop
 8007378:	20000020 	.word	0x20000020

0800737c <sniprintf>:
 800737c:	b40c      	push	{r2, r3}
 800737e:	b530      	push	{r4, r5, lr}
 8007380:	4b18      	ldr	r3, [pc, #96]	@ (80073e4 <sniprintf+0x68>)
 8007382:	1e0c      	subs	r4, r1, #0
 8007384:	681d      	ldr	r5, [r3, #0]
 8007386:	b09d      	sub	sp, #116	@ 0x74
 8007388:	da08      	bge.n	800739c <sniprintf+0x20>
 800738a:	238b      	movs	r3, #139	@ 0x8b
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f04f 30ff 	mov.w	r0, #4294967295
 8007392:	b01d      	add	sp, #116	@ 0x74
 8007394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007398:	b002      	add	sp, #8
 800739a:	4770      	bx	lr
 800739c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073a4:	f04f 0300 	mov.w	r3, #0
 80073a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80073aa:	bf14      	ite	ne
 80073ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073b0:	4623      	moveq	r3, r4
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	9307      	str	r3, [sp, #28]
 80073b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073ba:	9002      	str	r0, [sp, #8]
 80073bc:	9006      	str	r0, [sp, #24]
 80073be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80073c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80073c4:	ab21      	add	r3, sp, #132	@ 0x84
 80073c6:	a902      	add	r1, sp, #8
 80073c8:	4628      	mov	r0, r5
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	f001 fca2 	bl	8008d14 <_svfiprintf_r>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	bfbc      	itt	lt
 80073d4:	238b      	movlt	r3, #139	@ 0x8b
 80073d6:	602b      	strlt	r3, [r5, #0]
 80073d8:	2c00      	cmp	r4, #0
 80073da:	d0da      	beq.n	8007392 <sniprintf+0x16>
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e7d6      	b.n	8007392 <sniprintf+0x16>
 80073e4:	20000020 	.word	0x20000020

080073e8 <__sread>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	460c      	mov	r4, r1
 80073ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f0:	f000 f900 	bl	80075f4 <_read_r>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	bfab      	itete	ge
 80073f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073fa:	89a3      	ldrhlt	r3, [r4, #12]
 80073fc:	181b      	addge	r3, r3, r0
 80073fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007402:	bfac      	ite	ge
 8007404:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007406:	81a3      	strhlt	r3, [r4, #12]
 8007408:	bd10      	pop	{r4, pc}

0800740a <__swrite>:
 800740a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740e:	461f      	mov	r7, r3
 8007410:	898b      	ldrh	r3, [r1, #12]
 8007412:	05db      	lsls	r3, r3, #23
 8007414:	4605      	mov	r5, r0
 8007416:	460c      	mov	r4, r1
 8007418:	4616      	mov	r6, r2
 800741a:	d505      	bpl.n	8007428 <__swrite+0x1e>
 800741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007420:	2302      	movs	r3, #2
 8007422:	2200      	movs	r2, #0
 8007424:	f000 f8d4 	bl	80075d0 <_lseek_r>
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800742e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	4632      	mov	r2, r6
 8007436:	463b      	mov	r3, r7
 8007438:	4628      	mov	r0, r5
 800743a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	f000 b8eb 	b.w	8007618 <_write_r>

08007442 <__sseek>:
 8007442:	b510      	push	{r4, lr}
 8007444:	460c      	mov	r4, r1
 8007446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744a:	f000 f8c1 	bl	80075d0 <_lseek_r>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	bf15      	itete	ne
 8007454:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800745a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800745e:	81a3      	strheq	r3, [r4, #12]
 8007460:	bf18      	it	ne
 8007462:	81a3      	strhne	r3, [r4, #12]
 8007464:	bd10      	pop	{r4, pc}

08007466 <__sclose>:
 8007466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746a:	f000 b8a1 	b.w	80075b0 <_close_r>

0800746e <__swbuf_r>:
 800746e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007470:	460e      	mov	r6, r1
 8007472:	4614      	mov	r4, r2
 8007474:	4605      	mov	r5, r0
 8007476:	b118      	cbz	r0, 8007480 <__swbuf_r+0x12>
 8007478:	6a03      	ldr	r3, [r0, #32]
 800747a:	b90b      	cbnz	r3, 8007480 <__swbuf_r+0x12>
 800747c:	f7ff fed8 	bl	8007230 <__sinit>
 8007480:	69a3      	ldr	r3, [r4, #24]
 8007482:	60a3      	str	r3, [r4, #8]
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	071a      	lsls	r2, r3, #28
 8007488:	d501      	bpl.n	800748e <__swbuf_r+0x20>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	b943      	cbnz	r3, 80074a0 <__swbuf_r+0x32>
 800748e:	4621      	mov	r1, r4
 8007490:	4628      	mov	r0, r5
 8007492:	f000 f82b 	bl	80074ec <__swsetup_r>
 8007496:	b118      	cbz	r0, 80074a0 <__swbuf_r+0x32>
 8007498:	f04f 37ff 	mov.w	r7, #4294967295
 800749c:	4638      	mov	r0, r7
 800749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	1a98      	subs	r0, r3, r2
 80074a6:	6963      	ldr	r3, [r4, #20]
 80074a8:	b2f6      	uxtb	r6, r6
 80074aa:	4283      	cmp	r3, r0
 80074ac:	4637      	mov	r7, r6
 80074ae:	dc05      	bgt.n	80074bc <__swbuf_r+0x4e>
 80074b0:	4621      	mov	r1, r4
 80074b2:	4628      	mov	r0, r5
 80074b4:	f001 fef0 	bl	8009298 <_fflush_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d1ed      	bne.n	8007498 <__swbuf_r+0x2a>
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	3b01      	subs	r3, #1
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	701e      	strb	r6, [r3, #0]
 80074ca:	6962      	ldr	r2, [r4, #20]
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d004      	beq.n	80074dc <__swbuf_r+0x6e>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	07db      	lsls	r3, r3, #31
 80074d6:	d5e1      	bpl.n	800749c <__swbuf_r+0x2e>
 80074d8:	2e0a      	cmp	r6, #10
 80074da:	d1df      	bne.n	800749c <__swbuf_r+0x2e>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f001 feda 	bl	8009298 <_fflush_r>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d0d9      	beq.n	800749c <__swbuf_r+0x2e>
 80074e8:	e7d6      	b.n	8007498 <__swbuf_r+0x2a>
	...

080074ec <__swsetup_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4b29      	ldr	r3, [pc, #164]	@ (8007594 <__swsetup_r+0xa8>)
 80074f0:	4605      	mov	r5, r0
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	460c      	mov	r4, r1
 80074f6:	b118      	cbz	r0, 8007500 <__swsetup_r+0x14>
 80074f8:	6a03      	ldr	r3, [r0, #32]
 80074fa:	b90b      	cbnz	r3, 8007500 <__swsetup_r+0x14>
 80074fc:	f7ff fe98 	bl	8007230 <__sinit>
 8007500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007504:	0719      	lsls	r1, r3, #28
 8007506:	d422      	bmi.n	800754e <__swsetup_r+0x62>
 8007508:	06da      	lsls	r2, r3, #27
 800750a:	d407      	bmi.n	800751c <__swsetup_r+0x30>
 800750c:	2209      	movs	r2, #9
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	e033      	b.n	8007584 <__swsetup_r+0x98>
 800751c:	0758      	lsls	r0, r3, #29
 800751e:	d512      	bpl.n	8007546 <__swsetup_r+0x5a>
 8007520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007522:	b141      	cbz	r1, 8007536 <__swsetup_r+0x4a>
 8007524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <__swsetup_r+0x46>
 800752c:	4628      	mov	r0, r5
 800752e:	f000 ff1b 	bl	8008368 <_free_r>
 8007532:	2300      	movs	r3, #0
 8007534:	6363      	str	r3, [r4, #52]	@ 0x34
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	2300      	movs	r3, #0
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	b94b      	cbnz	r3, 8007566 <__swsetup_r+0x7a>
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800755c:	d003      	beq.n	8007566 <__swsetup_r+0x7a>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f001 fee7 	bl	8009334 <__smakebuf_r>
 8007566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756a:	f013 0201 	ands.w	r2, r3, #1
 800756e:	d00a      	beq.n	8007586 <__swsetup_r+0x9a>
 8007570:	2200      	movs	r2, #0
 8007572:	60a2      	str	r2, [r4, #8]
 8007574:	6962      	ldr	r2, [r4, #20]
 8007576:	4252      	negs	r2, r2
 8007578:	61a2      	str	r2, [r4, #24]
 800757a:	6922      	ldr	r2, [r4, #16]
 800757c:	b942      	cbnz	r2, 8007590 <__swsetup_r+0xa4>
 800757e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007582:	d1c5      	bne.n	8007510 <__swsetup_r+0x24>
 8007584:	bd38      	pop	{r3, r4, r5, pc}
 8007586:	0799      	lsls	r1, r3, #30
 8007588:	bf58      	it	pl
 800758a:	6962      	ldrpl	r2, [r4, #20]
 800758c:	60a2      	str	r2, [r4, #8]
 800758e:	e7f4      	b.n	800757a <__swsetup_r+0x8e>
 8007590:	2000      	movs	r0, #0
 8007592:	e7f7      	b.n	8007584 <__swsetup_r+0x98>
 8007594:	20000020 	.word	0x20000020

08007598 <memset>:
 8007598:	4402      	add	r2, r0
 800759a:	4603      	mov	r3, r0
 800759c:	4293      	cmp	r3, r2
 800759e:	d100      	bne.n	80075a2 <memset+0xa>
 80075a0:	4770      	bx	lr
 80075a2:	f803 1b01 	strb.w	r1, [r3], #1
 80075a6:	e7f9      	b.n	800759c <memset+0x4>

080075a8 <_localeconv_r>:
 80075a8:	4800      	ldr	r0, [pc, #0]	@ (80075ac <_localeconv_r+0x4>)
 80075aa:	4770      	bx	lr
 80075ac:	20000160 	.word	0x20000160

080075b0 <_close_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d06      	ldr	r5, [pc, #24]	@ (80075cc <_close_r+0x1c>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	f7fb f897 	bl	80026ee <_close>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_close_r+0x1a>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_close_r+0x1a>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	200005c0 	.word	0x200005c0

080075d0 <_lseek_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	@ (80075f0 <_lseek_r+0x20>)
 80075d4:	4604      	mov	r4, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7fb f8ac 	bl	800273c <_lseek>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_lseek_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_lseek_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	200005c0 	.word	0x200005c0

080075f4 <_read_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d07      	ldr	r5, [pc, #28]	@ (8007614 <_read_r+0x20>)
 80075f8:	4604      	mov	r4, r0
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7fb f856 	bl	80026b4 <_read>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_read_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_read_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	200005c0 	.word	0x200005c0

08007618 <_write_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d07      	ldr	r5, [pc, #28]	@ (8007638 <_write_r+0x20>)
 800761c:	4604      	mov	r4, r0
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7fa feb4 	bl	8002394 <_write>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_write_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_write_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	200005c0 	.word	0x200005c0

0800763c <__errno>:
 800763c:	4b01      	ldr	r3, [pc, #4]	@ (8007644 <__errno+0x8>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000020 	.word	0x20000020

08007648 <__libc_init_array>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4d0d      	ldr	r5, [pc, #52]	@ (8007680 <__libc_init_array+0x38>)
 800764c:	4c0d      	ldr	r4, [pc, #52]	@ (8007684 <__libc_init_array+0x3c>)
 800764e:	1b64      	subs	r4, r4, r5
 8007650:	10a4      	asrs	r4, r4, #2
 8007652:	2600      	movs	r6, #0
 8007654:	42a6      	cmp	r6, r4
 8007656:	d109      	bne.n	800766c <__libc_init_array+0x24>
 8007658:	4d0b      	ldr	r5, [pc, #44]	@ (8007688 <__libc_init_array+0x40>)
 800765a:	4c0c      	ldr	r4, [pc, #48]	@ (800768c <__libc_init_array+0x44>)
 800765c:	f002 fbbe 	bl	8009ddc <_init>
 8007660:	1b64      	subs	r4, r4, r5
 8007662:	10a4      	asrs	r4, r4, #2
 8007664:	2600      	movs	r6, #0
 8007666:	42a6      	cmp	r6, r4
 8007668:	d105      	bne.n	8007676 <__libc_init_array+0x2e>
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007670:	4798      	blx	r3
 8007672:	3601      	adds	r6, #1
 8007674:	e7ee      	b.n	8007654 <__libc_init_array+0xc>
 8007676:	f855 3b04 	ldr.w	r3, [r5], #4
 800767a:	4798      	blx	r3
 800767c:	3601      	adds	r6, #1
 800767e:	e7f2      	b.n	8007666 <__libc_init_array+0x1e>
 8007680:	0800a3b4 	.word	0x0800a3b4
 8007684:	0800a3b4 	.word	0x0800a3b4
 8007688:	0800a3b4 	.word	0x0800a3b4
 800768c:	0800a3b8 	.word	0x0800a3b8

08007690 <__retarget_lock_init_recursive>:
 8007690:	4770      	bx	lr

08007692 <__retarget_lock_acquire_recursive>:
 8007692:	4770      	bx	lr

08007694 <__retarget_lock_release_recursive>:
 8007694:	4770      	bx	lr

08007696 <memcpy>:
 8007696:	440a      	add	r2, r1
 8007698:	4291      	cmp	r1, r2
 800769a:	f100 33ff 	add.w	r3, r0, #4294967295
 800769e:	d100      	bne.n	80076a2 <memcpy+0xc>
 80076a0:	4770      	bx	lr
 80076a2:	b510      	push	{r4, lr}
 80076a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ac:	4291      	cmp	r1, r2
 80076ae:	d1f9      	bne.n	80076a4 <memcpy+0xe>
 80076b0:	bd10      	pop	{r4, pc}

080076b2 <quorem>:
 80076b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b6:	6903      	ldr	r3, [r0, #16]
 80076b8:	690c      	ldr	r4, [r1, #16]
 80076ba:	42a3      	cmp	r3, r4
 80076bc:	4607      	mov	r7, r0
 80076be:	db7e      	blt.n	80077be <quorem+0x10c>
 80076c0:	3c01      	subs	r4, #1
 80076c2:	f101 0814 	add.w	r8, r1, #20
 80076c6:	00a3      	lsls	r3, r4, #2
 80076c8:	f100 0514 	add.w	r5, r0, #20
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076dc:	3301      	adds	r3, #1
 80076de:	429a      	cmp	r2, r3
 80076e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076e8:	d32e      	bcc.n	8007748 <quorem+0x96>
 80076ea:	f04f 0a00 	mov.w	sl, #0
 80076ee:	46c4      	mov	ip, r8
 80076f0:	46ae      	mov	lr, r5
 80076f2:	46d3      	mov	fp, sl
 80076f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076f8:	b298      	uxth	r0, r3
 80076fa:	fb06 a000 	mla	r0, r6, r0, sl
 80076fe:	0c02      	lsrs	r2, r0, #16
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	fb06 2303 	mla	r3, r6, r3, r2
 8007706:	f8de 2000 	ldr.w	r2, [lr]
 800770a:	b280      	uxth	r0, r0
 800770c:	b292      	uxth	r2, r2
 800770e:	1a12      	subs	r2, r2, r0
 8007710:	445a      	add	r2, fp
 8007712:	f8de 0000 	ldr.w	r0, [lr]
 8007716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800771a:	b29b      	uxth	r3, r3
 800771c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007720:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007724:	b292      	uxth	r2, r2
 8007726:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800772a:	45e1      	cmp	r9, ip
 800772c:	f84e 2b04 	str.w	r2, [lr], #4
 8007730:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007734:	d2de      	bcs.n	80076f4 <quorem+0x42>
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	58eb      	ldr	r3, [r5, r3]
 800773a:	b92b      	cbnz	r3, 8007748 <quorem+0x96>
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	3b04      	subs	r3, #4
 8007740:	429d      	cmp	r5, r3
 8007742:	461a      	mov	r2, r3
 8007744:	d32f      	bcc.n	80077a6 <quorem+0xf4>
 8007746:	613c      	str	r4, [r7, #16]
 8007748:	4638      	mov	r0, r7
 800774a:	f001 f97f 	bl	8008a4c <__mcmp>
 800774e:	2800      	cmp	r0, #0
 8007750:	db25      	blt.n	800779e <quorem+0xec>
 8007752:	4629      	mov	r1, r5
 8007754:	2000      	movs	r0, #0
 8007756:	f858 2b04 	ldr.w	r2, [r8], #4
 800775a:	f8d1 c000 	ldr.w	ip, [r1]
 800775e:	fa1f fe82 	uxth.w	lr, r2
 8007762:	fa1f f38c 	uxth.w	r3, ip
 8007766:	eba3 030e 	sub.w	r3, r3, lr
 800776a:	4403      	add	r3, r0
 800776c:	0c12      	lsrs	r2, r2, #16
 800776e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007772:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007776:	b29b      	uxth	r3, r3
 8007778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800777c:	45c1      	cmp	r9, r8
 800777e:	f841 3b04 	str.w	r3, [r1], #4
 8007782:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007786:	d2e6      	bcs.n	8007756 <quorem+0xa4>
 8007788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800778c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007790:	b922      	cbnz	r2, 800779c <quorem+0xea>
 8007792:	3b04      	subs	r3, #4
 8007794:	429d      	cmp	r5, r3
 8007796:	461a      	mov	r2, r3
 8007798:	d30b      	bcc.n	80077b2 <quorem+0x100>
 800779a:	613c      	str	r4, [r7, #16]
 800779c:	3601      	adds	r6, #1
 800779e:	4630      	mov	r0, r6
 80077a0:	b003      	add	sp, #12
 80077a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	d1cb      	bne.n	8007746 <quorem+0x94>
 80077ae:	3c01      	subs	r4, #1
 80077b0:	e7c6      	b.n	8007740 <quorem+0x8e>
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d1ef      	bne.n	800779a <quorem+0xe8>
 80077ba:	3c01      	subs	r4, #1
 80077bc:	e7ea      	b.n	8007794 <quorem+0xe2>
 80077be:	2000      	movs	r0, #0
 80077c0:	e7ee      	b.n	80077a0 <quorem+0xee>
 80077c2:	0000      	movs	r0, r0
 80077c4:	0000      	movs	r0, r0
	...

080077c8 <_dtoa_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	69c7      	ldr	r7, [r0, #28]
 80077ce:	b097      	sub	sp, #92	@ 0x5c
 80077d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80077d4:	ec55 4b10 	vmov	r4, r5, d0
 80077d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80077da:	9107      	str	r1, [sp, #28]
 80077dc:	4681      	mov	r9, r0
 80077de:	920c      	str	r2, [sp, #48]	@ 0x30
 80077e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80077e2:	b97f      	cbnz	r7, 8007804 <_dtoa_r+0x3c>
 80077e4:	2010      	movs	r0, #16
 80077e6:	f000 fe09 	bl	80083fc <malloc>
 80077ea:	4602      	mov	r2, r0
 80077ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80077f0:	b920      	cbnz	r0, 80077fc <_dtoa_r+0x34>
 80077f2:	4ba9      	ldr	r3, [pc, #676]	@ (8007a98 <_dtoa_r+0x2d0>)
 80077f4:	21ef      	movs	r1, #239	@ 0xef
 80077f6:	48a9      	ldr	r0, [pc, #676]	@ (8007a9c <_dtoa_r+0x2d4>)
 80077f8:	f001 fe24 	bl	8009444 <__assert_func>
 80077fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007800:	6007      	str	r7, [r0, #0]
 8007802:	60c7      	str	r7, [r0, #12]
 8007804:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	b159      	cbz	r1, 8007824 <_dtoa_r+0x5c>
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	604a      	str	r2, [r1, #4]
 8007810:	2301      	movs	r3, #1
 8007812:	4093      	lsls	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
 8007816:	4648      	mov	r0, r9
 8007818:	f000 fee6 	bl	80085e8 <_Bfree>
 800781c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	1e2b      	subs	r3, r5, #0
 8007826:	bfb9      	ittee	lt
 8007828:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800782c:	9305      	strlt	r3, [sp, #20]
 800782e:	2300      	movge	r3, #0
 8007830:	6033      	strge	r3, [r6, #0]
 8007832:	9f05      	ldr	r7, [sp, #20]
 8007834:	4b9a      	ldr	r3, [pc, #616]	@ (8007aa0 <_dtoa_r+0x2d8>)
 8007836:	bfbc      	itt	lt
 8007838:	2201      	movlt	r2, #1
 800783a:	6032      	strlt	r2, [r6, #0]
 800783c:	43bb      	bics	r3, r7
 800783e:	d112      	bne.n	8007866 <_dtoa_r+0x9e>
 8007840:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007842:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800784c:	4323      	orrs	r3, r4
 800784e:	f000 855a 	beq.w	8008306 <_dtoa_r+0xb3e>
 8007852:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007854:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007ab4 <_dtoa_r+0x2ec>
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 855c 	beq.w	8008316 <_dtoa_r+0xb4e>
 800785e:	f10a 0303 	add.w	r3, sl, #3
 8007862:	f000 bd56 	b.w	8008312 <_dtoa_r+0xb4a>
 8007866:	ed9d 7b04 	vldr	d7, [sp, #16]
 800786a:	2200      	movs	r2, #0
 800786c:	ec51 0b17 	vmov	r0, r1, d7
 8007870:	2300      	movs	r3, #0
 8007872:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007876:	f7f9 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800787a:	4680      	mov	r8, r0
 800787c:	b158      	cbz	r0, 8007896 <_dtoa_r+0xce>
 800787e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007880:	2301      	movs	r3, #1
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007886:	b113      	cbz	r3, 800788e <_dtoa_r+0xc6>
 8007888:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800788a:	4b86      	ldr	r3, [pc, #536]	@ (8007aa4 <_dtoa_r+0x2dc>)
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ab8 <_dtoa_r+0x2f0>
 8007892:	f000 bd40 	b.w	8008316 <_dtoa_r+0xb4e>
 8007896:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800789a:	aa14      	add	r2, sp, #80	@ 0x50
 800789c:	a915      	add	r1, sp, #84	@ 0x54
 800789e:	4648      	mov	r0, r9
 80078a0:	f001 f984 	bl	8008bac <__d2b>
 80078a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078a8:	9002      	str	r0, [sp, #8]
 80078aa:	2e00      	cmp	r6, #0
 80078ac:	d078      	beq.n	80079a0 <_dtoa_r+0x1d8>
 80078ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80078b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078c8:	4619      	mov	r1, r3
 80078ca:	2200      	movs	r2, #0
 80078cc:	4b76      	ldr	r3, [pc, #472]	@ (8007aa8 <_dtoa_r+0x2e0>)
 80078ce:	f7f8 fcdb 	bl	8000288 <__aeabi_dsub>
 80078d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007a80 <_dtoa_r+0x2b8>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f7f8 fe8e 	bl	80005f8 <__aeabi_dmul>
 80078dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007a88 <_dtoa_r+0x2c0>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fcd3 	bl	800028c <__adddf3>
 80078e6:	4604      	mov	r4, r0
 80078e8:	4630      	mov	r0, r6
 80078ea:	460d      	mov	r5, r1
 80078ec:	f7f8 fe1a 	bl	8000524 <__aeabi_i2d>
 80078f0:	a367      	add	r3, pc, #412	@ (adr r3, 8007a90 <_dtoa_r+0x2c8>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fe7f 	bl	80005f8 <__aeabi_dmul>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f8 fcc3 	bl	800028c <__adddf3>
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	f7f9 f925 	bl	8000b58 <__aeabi_d2iz>
 800790e:	2200      	movs	r2, #0
 8007910:	4607      	mov	r7, r0
 8007912:	2300      	movs	r3, #0
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f9 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800791c:	b140      	cbz	r0, 8007930 <_dtoa_r+0x168>
 800791e:	4638      	mov	r0, r7
 8007920:	f7f8 fe00 	bl	8000524 <__aeabi_i2d>
 8007924:	4622      	mov	r2, r4
 8007926:	462b      	mov	r3, r5
 8007928:	f7f9 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800792c:	b900      	cbnz	r0, 8007930 <_dtoa_r+0x168>
 800792e:	3f01      	subs	r7, #1
 8007930:	2f16      	cmp	r7, #22
 8007932:	d852      	bhi.n	80079da <_dtoa_r+0x212>
 8007934:	4b5d      	ldr	r3, [pc, #372]	@ (8007aac <_dtoa_r+0x2e4>)
 8007936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007942:	f7f9 f8cb 	bl	8000adc <__aeabi_dcmplt>
 8007946:	2800      	cmp	r0, #0
 8007948:	d049      	beq.n	80079de <_dtoa_r+0x216>
 800794a:	3f01      	subs	r7, #1
 800794c:	2300      	movs	r3, #0
 800794e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007950:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007952:	1b9b      	subs	r3, r3, r6
 8007954:	1e5a      	subs	r2, r3, #1
 8007956:	bf45      	ittet	mi
 8007958:	f1c3 0301 	rsbmi	r3, r3, #1
 800795c:	9300      	strmi	r3, [sp, #0]
 800795e:	2300      	movpl	r3, #0
 8007960:	2300      	movmi	r3, #0
 8007962:	9206      	str	r2, [sp, #24]
 8007964:	bf54      	ite	pl
 8007966:	9300      	strpl	r3, [sp, #0]
 8007968:	9306      	strmi	r3, [sp, #24]
 800796a:	2f00      	cmp	r7, #0
 800796c:	db39      	blt.n	80079e2 <_dtoa_r+0x21a>
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	970d      	str	r7, [sp, #52]	@ 0x34
 8007972:	443b      	add	r3, r7
 8007974:	9306      	str	r3, [sp, #24]
 8007976:	2300      	movs	r3, #0
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	9b07      	ldr	r3, [sp, #28]
 800797c:	2b09      	cmp	r3, #9
 800797e:	d863      	bhi.n	8007a48 <_dtoa_r+0x280>
 8007980:	2b05      	cmp	r3, #5
 8007982:	bfc4      	itt	gt
 8007984:	3b04      	subgt	r3, #4
 8007986:	9307      	strgt	r3, [sp, #28]
 8007988:	9b07      	ldr	r3, [sp, #28]
 800798a:	f1a3 0302 	sub.w	r3, r3, #2
 800798e:	bfcc      	ite	gt
 8007990:	2400      	movgt	r4, #0
 8007992:	2401      	movle	r4, #1
 8007994:	2b03      	cmp	r3, #3
 8007996:	d863      	bhi.n	8007a60 <_dtoa_r+0x298>
 8007998:	e8df f003 	tbb	[pc, r3]
 800799c:	2b375452 	.word	0x2b375452
 80079a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80079a4:	441e      	add	r6, r3
 80079a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	bfc1      	itttt	gt
 80079ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079b2:	409f      	lslgt	r7, r3
 80079b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079bc:	bfd6      	itet	le
 80079be:	f1c3 0320 	rsble	r3, r3, #32
 80079c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80079c6:	fa04 f003 	lslle.w	r0, r4, r3
 80079ca:	f7f8 fd9b 	bl	8000504 <__aeabi_ui2d>
 80079ce:	2201      	movs	r2, #1
 80079d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079d4:	3e01      	subs	r6, #1
 80079d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80079d8:	e776      	b.n	80078c8 <_dtoa_r+0x100>
 80079da:	2301      	movs	r3, #1
 80079dc:	e7b7      	b.n	800794e <_dtoa_r+0x186>
 80079de:	9010      	str	r0, [sp, #64]	@ 0x40
 80079e0:	e7b6      	b.n	8007950 <_dtoa_r+0x188>
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	1bdb      	subs	r3, r3, r7
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	427b      	negs	r3, r7
 80079ea:	9308      	str	r3, [sp, #32]
 80079ec:	2300      	movs	r3, #0
 80079ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80079f0:	e7c3      	b.n	800797a <_dtoa_r+0x1b2>
 80079f2:	2301      	movs	r3, #1
 80079f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079f8:	eb07 0b03 	add.w	fp, r7, r3
 80079fc:	f10b 0301 	add.w	r3, fp, #1
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	9303      	str	r3, [sp, #12]
 8007a04:	bfb8      	it	lt
 8007a06:	2301      	movlt	r3, #1
 8007a08:	e006      	b.n	8007a18 <_dtoa_r+0x250>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dd28      	ble.n	8007a66 <_dtoa_r+0x29e>
 8007a14:	469b      	mov	fp, r3
 8007a16:	9303      	str	r3, [sp, #12]
 8007a18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	2204      	movs	r2, #4
 8007a20:	f102 0514 	add.w	r5, r2, #20
 8007a24:	429d      	cmp	r5, r3
 8007a26:	d926      	bls.n	8007a76 <_dtoa_r+0x2ae>
 8007a28:	6041      	str	r1, [r0, #4]
 8007a2a:	4648      	mov	r0, r9
 8007a2c:	f000 fd9c 	bl	8008568 <_Balloc>
 8007a30:	4682      	mov	sl, r0
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d142      	bne.n	8007abc <_dtoa_r+0x2f4>
 8007a36:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab0 <_dtoa_r+0x2e8>)
 8007a38:	4602      	mov	r2, r0
 8007a3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a3e:	e6da      	b.n	80077f6 <_dtoa_r+0x2e>
 8007a40:	2300      	movs	r3, #0
 8007a42:	e7e3      	b.n	8007a0c <_dtoa_r+0x244>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e7d5      	b.n	80079f4 <_dtoa_r+0x22c>
 8007a48:	2401      	movs	r4, #1
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9307      	str	r3, [sp, #28]
 8007a4e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007a50:	f04f 3bff 	mov.w	fp, #4294967295
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a5a:	2312      	movs	r3, #18
 8007a5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a5e:	e7db      	b.n	8007a18 <_dtoa_r+0x250>
 8007a60:	2301      	movs	r3, #1
 8007a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a64:	e7f4      	b.n	8007a50 <_dtoa_r+0x288>
 8007a66:	f04f 0b01 	mov.w	fp, #1
 8007a6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a6e:	465b      	mov	r3, fp
 8007a70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007a74:	e7d0      	b.n	8007a18 <_dtoa_r+0x250>
 8007a76:	3101      	adds	r1, #1
 8007a78:	0052      	lsls	r2, r2, #1
 8007a7a:	e7d1      	b.n	8007a20 <_dtoa_r+0x258>
 8007a7c:	f3af 8000 	nop.w
 8007a80:	636f4361 	.word	0x636f4361
 8007a84:	3fd287a7 	.word	0x3fd287a7
 8007a88:	8b60c8b3 	.word	0x8b60c8b3
 8007a8c:	3fc68a28 	.word	0x3fc68a28
 8007a90:	509f79fb 	.word	0x509f79fb
 8007a94:	3fd34413 	.word	0x3fd34413
 8007a98:	0800a061 	.word	0x0800a061
 8007a9c:	0800a078 	.word	0x0800a078
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	0800a031 	.word	0x0800a031
 8007aa8:	3ff80000 	.word	0x3ff80000
 8007aac:	0800a1c8 	.word	0x0800a1c8
 8007ab0:	0800a0d0 	.word	0x0800a0d0
 8007ab4:	0800a05d 	.word	0x0800a05d
 8007ab8:	0800a030 	.word	0x0800a030
 8007abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ac0:	6018      	str	r0, [r3, #0]
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	2b0e      	cmp	r3, #14
 8007ac6:	f200 80a1 	bhi.w	8007c0c <_dtoa_r+0x444>
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	f000 809e 	beq.w	8007c0c <_dtoa_r+0x444>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	dd33      	ble.n	8007b3c <_dtoa_r+0x374>
 8007ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8007d48 <_dtoa_r+0x580>)
 8007ad6:	f007 020f 	and.w	r2, r7, #15
 8007ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ade:	ed93 7b00 	vldr	d7, [r3]
 8007ae2:	05f8      	lsls	r0, r7, #23
 8007ae4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007aec:	d516      	bpl.n	8007b1c <_dtoa_r+0x354>
 8007aee:	4b97      	ldr	r3, [pc, #604]	@ (8007d4c <_dtoa_r+0x584>)
 8007af0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af8:	f7f8 fea8 	bl	800084c <__aeabi_ddiv>
 8007afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b00:	f004 040f 	and.w	r4, r4, #15
 8007b04:	2603      	movs	r6, #3
 8007b06:	4d91      	ldr	r5, [pc, #580]	@ (8007d4c <_dtoa_r+0x584>)
 8007b08:	b954      	cbnz	r4, 8007b20 <_dtoa_r+0x358>
 8007b0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b12:	f7f8 fe9b 	bl	800084c <__aeabi_ddiv>
 8007b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b1a:	e028      	b.n	8007b6e <_dtoa_r+0x3a6>
 8007b1c:	2602      	movs	r6, #2
 8007b1e:	e7f2      	b.n	8007b06 <_dtoa_r+0x33e>
 8007b20:	07e1      	lsls	r1, r4, #31
 8007b22:	d508      	bpl.n	8007b36 <_dtoa_r+0x36e>
 8007b24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b34:	3601      	adds	r6, #1
 8007b36:	1064      	asrs	r4, r4, #1
 8007b38:	3508      	adds	r5, #8
 8007b3a:	e7e5      	b.n	8007b08 <_dtoa_r+0x340>
 8007b3c:	f000 80af 	beq.w	8007c9e <_dtoa_r+0x4d6>
 8007b40:	427c      	negs	r4, r7
 8007b42:	4b81      	ldr	r3, [pc, #516]	@ (8007d48 <_dtoa_r+0x580>)
 8007b44:	4d81      	ldr	r5, [pc, #516]	@ (8007d4c <_dtoa_r+0x584>)
 8007b46:	f004 020f 	and.w	r2, r4, #15
 8007b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b5e:	1124      	asrs	r4, r4, #4
 8007b60:	2300      	movs	r3, #0
 8007b62:	2602      	movs	r6, #2
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	f040 808f 	bne.w	8007c88 <_dtoa_r+0x4c0>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1d3      	bne.n	8007b16 <_dtoa_r+0x34e>
 8007b6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8094 	beq.w	8007ca2 <_dtoa_r+0x4da>
 8007b7a:	4b75      	ldr	r3, [pc, #468]	@ (8007d50 <_dtoa_r+0x588>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 ffab 	bl	8000adc <__aeabi_dcmplt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f000 808b 	beq.w	8007ca2 <_dtoa_r+0x4da>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8087 	beq.w	8007ca2 <_dtoa_r+0x4da>
 8007b94:	f1bb 0f00 	cmp.w	fp, #0
 8007b98:	dd34      	ble.n	8007c04 <_dtoa_r+0x43c>
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8007d54 <_dtoa_r+0x58c>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fd29 	bl	80005f8 <__aeabi_dmul>
 8007ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007baa:	f107 38ff 	add.w	r8, r7, #4294967295
 8007bae:	3601      	adds	r6, #1
 8007bb0:	465c      	mov	r4, fp
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f7f8 fcb6 	bl	8000524 <__aeabi_i2d>
 8007bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bbc:	f7f8 fd1c 	bl	80005f8 <__aeabi_dmul>
 8007bc0:	4b65      	ldr	r3, [pc, #404]	@ (8007d58 <_dtoa_r+0x590>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f7f8 fb62 	bl	800028c <__adddf3>
 8007bc8:	4605      	mov	r5, r0
 8007bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	d16a      	bne.n	8007ca8 <_dtoa_r+0x4e0>
 8007bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd6:	4b61      	ldr	r3, [pc, #388]	@ (8007d5c <_dtoa_r+0x594>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f7f8 fb55 	bl	8000288 <__aeabi_dsub>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007be6:	462a      	mov	r2, r5
 8007be8:	4633      	mov	r3, r6
 8007bea:	f7f8 ff95 	bl	8000b18 <__aeabi_dcmpgt>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f040 8298 	bne.w	8008124 <_dtoa_r+0x95c>
 8007bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bf8:	462a      	mov	r2, r5
 8007bfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007bfe:	f7f8 ff6d 	bl	8000adc <__aeabi_dcmplt>
 8007c02:	bb38      	cbnz	r0, 8007c54 <_dtoa_r+0x48c>
 8007c04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007c08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f2c0 8157 	blt.w	8007ec2 <_dtoa_r+0x6fa>
 8007c14:	2f0e      	cmp	r7, #14
 8007c16:	f300 8154 	bgt.w	8007ec2 <_dtoa_r+0x6fa>
 8007c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007d48 <_dtoa_r+0x580>)
 8007c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c20:	ed93 7b00 	vldr	d7, [r3]
 8007c24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	ed8d 7b00 	vstr	d7, [sp]
 8007c2c:	f280 80e5 	bge.w	8007dfa <_dtoa_r+0x632>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f300 80e1 	bgt.w	8007dfa <_dtoa_r+0x632>
 8007c38:	d10c      	bne.n	8007c54 <_dtoa_r+0x48c>
 8007c3a:	4b48      	ldr	r3, [pc, #288]	@ (8007d5c <_dtoa_r+0x594>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	ec51 0b17 	vmov	r0, r1, d7
 8007c42:	f7f8 fcd9 	bl	80005f8 <__aeabi_dmul>
 8007c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c4a:	f7f8 ff5b 	bl	8000b04 <__aeabi_dcmpge>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f000 8266 	beq.w	8008120 <_dtoa_r+0x958>
 8007c54:	2400      	movs	r4, #0
 8007c56:	4625      	mov	r5, r4
 8007c58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c5a:	4656      	mov	r6, sl
 8007c5c:	ea6f 0803 	mvn.w	r8, r3
 8007c60:	2700      	movs	r7, #0
 8007c62:	4621      	mov	r1, r4
 8007c64:	4648      	mov	r0, r9
 8007c66:	f000 fcbf 	bl	80085e8 <_Bfree>
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	f000 80bd 	beq.w	8007dea <_dtoa_r+0x622>
 8007c70:	b12f      	cbz	r7, 8007c7e <_dtoa_r+0x4b6>
 8007c72:	42af      	cmp	r7, r5
 8007c74:	d003      	beq.n	8007c7e <_dtoa_r+0x4b6>
 8007c76:	4639      	mov	r1, r7
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f000 fcb5 	bl	80085e8 <_Bfree>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4648      	mov	r0, r9
 8007c82:	f000 fcb1 	bl	80085e8 <_Bfree>
 8007c86:	e0b0      	b.n	8007dea <_dtoa_r+0x622>
 8007c88:	07e2      	lsls	r2, r4, #31
 8007c8a:	d505      	bpl.n	8007c98 <_dtoa_r+0x4d0>
 8007c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c90:	f7f8 fcb2 	bl	80005f8 <__aeabi_dmul>
 8007c94:	3601      	adds	r6, #1
 8007c96:	2301      	movs	r3, #1
 8007c98:	1064      	asrs	r4, r4, #1
 8007c9a:	3508      	adds	r5, #8
 8007c9c:	e762      	b.n	8007b64 <_dtoa_r+0x39c>
 8007c9e:	2602      	movs	r6, #2
 8007ca0:	e765      	b.n	8007b6e <_dtoa_r+0x3a6>
 8007ca2:	9c03      	ldr	r4, [sp, #12]
 8007ca4:	46b8      	mov	r8, r7
 8007ca6:	e784      	b.n	8007bb2 <_dtoa_r+0x3ea>
 8007ca8:	4b27      	ldr	r3, [pc, #156]	@ (8007d48 <_dtoa_r+0x580>)
 8007caa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cb4:	4454      	add	r4, sl
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	d054      	beq.n	8007d64 <_dtoa_r+0x59c>
 8007cba:	4929      	ldr	r1, [pc, #164]	@ (8007d60 <_dtoa_r+0x598>)
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f7f8 fdc5 	bl	800084c <__aeabi_ddiv>
 8007cc2:	4633      	mov	r3, r6
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	f7f8 fadf 	bl	8000288 <__aeabi_dsub>
 8007cca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cce:	4656      	mov	r6, sl
 8007cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd4:	f7f8 ff40 	bl	8000b58 <__aeabi_d2iz>
 8007cd8:	4605      	mov	r5, r0
 8007cda:	f7f8 fc23 	bl	8000524 <__aeabi_i2d>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce6:	f7f8 facf 	bl	8000288 <__aeabi_dsub>
 8007cea:	3530      	adds	r5, #48	@ 0x30
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cf4:	f806 5b01 	strb.w	r5, [r6], #1
 8007cf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007cfc:	f7f8 feee 	bl	8000adc <__aeabi_dcmplt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d172      	bne.n	8007dea <_dtoa_r+0x622>
 8007d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d08:	4911      	ldr	r1, [pc, #68]	@ (8007d50 <_dtoa_r+0x588>)
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f7f8 fabc 	bl	8000288 <__aeabi_dsub>
 8007d10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d14:	f7f8 fee2 	bl	8000adc <__aeabi_dcmplt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f040 80b4 	bne.w	8007e86 <_dtoa_r+0x6be>
 8007d1e:	42a6      	cmp	r6, r4
 8007d20:	f43f af70 	beq.w	8007c04 <_dtoa_r+0x43c>
 8007d24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d28:	4b0a      	ldr	r3, [pc, #40]	@ (8007d54 <_dtoa_r+0x58c>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f7f8 fc64 	bl	80005f8 <__aeabi_dmul>
 8007d30:	4b08      	ldr	r3, [pc, #32]	@ (8007d54 <_dtoa_r+0x58c>)
 8007d32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d36:	2200      	movs	r2, #0
 8007d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d3c:	f7f8 fc5c 	bl	80005f8 <__aeabi_dmul>
 8007d40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d44:	e7c4      	b.n	8007cd0 <_dtoa_r+0x508>
 8007d46:	bf00      	nop
 8007d48:	0800a1c8 	.word	0x0800a1c8
 8007d4c:	0800a1a0 	.word	0x0800a1a0
 8007d50:	3ff00000 	.word	0x3ff00000
 8007d54:	40240000 	.word	0x40240000
 8007d58:	401c0000 	.word	0x401c0000
 8007d5c:	40140000 	.word	0x40140000
 8007d60:	3fe00000 	.word	0x3fe00000
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7f8 fc46 	bl	80005f8 <__aeabi_dmul>
 8007d6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d72:	4656      	mov	r6, sl
 8007d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d78:	f7f8 feee 	bl	8000b58 <__aeabi_d2iz>
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	f7f8 fbd1 	bl	8000524 <__aeabi_i2d>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d8a:	f7f8 fa7d 	bl	8000288 <__aeabi_dsub>
 8007d8e:	3530      	adds	r5, #48	@ 0x30
 8007d90:	f806 5b01 	strb.w	r5, [r6], #1
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	d124      	bne.n	8007dee <_dtoa_r+0x626>
 8007da4:	4baf      	ldr	r3, [pc, #700]	@ (8008064 <_dtoa_r+0x89c>)
 8007da6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007daa:	f7f8 fa6f 	bl	800028c <__adddf3>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007db6:	f7f8 feaf 	bl	8000b18 <__aeabi_dcmpgt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d163      	bne.n	8007e86 <_dtoa_r+0x6be>
 8007dbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dc2:	49a8      	ldr	r1, [pc, #672]	@ (8008064 <_dtoa_r+0x89c>)
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f7f8 fa5f 	bl	8000288 <__aeabi_dsub>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd2:	f7f8 fe83 	bl	8000adc <__aeabi_dcmplt>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	f43f af14 	beq.w	8007c04 <_dtoa_r+0x43c>
 8007ddc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007dde:	1e73      	subs	r3, r6, #1
 8007de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007de2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007de6:	2b30      	cmp	r3, #48	@ 0x30
 8007de8:	d0f8      	beq.n	8007ddc <_dtoa_r+0x614>
 8007dea:	4647      	mov	r7, r8
 8007dec:	e03b      	b.n	8007e66 <_dtoa_r+0x69e>
 8007dee:	4b9e      	ldr	r3, [pc, #632]	@ (8008068 <_dtoa_r+0x8a0>)
 8007df0:	f7f8 fc02 	bl	80005f8 <__aeabi_dmul>
 8007df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007df8:	e7bc      	b.n	8007d74 <_dtoa_r+0x5ac>
 8007dfa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007dfe:	4656      	mov	r6, sl
 8007e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e04:	4620      	mov	r0, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	f7f8 fd20 	bl	800084c <__aeabi_ddiv>
 8007e0c:	f7f8 fea4 	bl	8000b58 <__aeabi_d2iz>
 8007e10:	4680      	mov	r8, r0
 8007e12:	f7f8 fb87 	bl	8000524 <__aeabi_i2d>
 8007e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e1a:	f7f8 fbed 	bl	80005f8 <__aeabi_dmul>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e2a:	f7f8 fa2d 	bl	8000288 <__aeabi_dsub>
 8007e2e:	f806 4b01 	strb.w	r4, [r6], #1
 8007e32:	9d03      	ldr	r5, [sp, #12]
 8007e34:	eba6 040a 	sub.w	r4, r6, sl
 8007e38:	42a5      	cmp	r5, r4
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	d133      	bne.n	8007ea8 <_dtoa_r+0x6e0>
 8007e40:	f7f8 fa24 	bl	800028c <__adddf3>
 8007e44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e48:	4604      	mov	r4, r0
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	f7f8 fe64 	bl	8000b18 <__aeabi_dcmpgt>
 8007e50:	b9c0      	cbnz	r0, 8007e84 <_dtoa_r+0x6bc>
 8007e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e5e:	b110      	cbz	r0, 8007e66 <_dtoa_r+0x69e>
 8007e60:	f018 0f01 	tst.w	r8, #1
 8007e64:	d10e      	bne.n	8007e84 <_dtoa_r+0x6bc>
 8007e66:	9902      	ldr	r1, [sp, #8]
 8007e68:	4648      	mov	r0, r9
 8007e6a:	f000 fbbd 	bl	80085e8 <_Bfree>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	7033      	strb	r3, [r6, #0]
 8007e72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e74:	3701      	adds	r7, #1
 8007e76:	601f      	str	r7, [r3, #0]
 8007e78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 824b 	beq.w	8008316 <_dtoa_r+0xb4e>
 8007e80:	601e      	str	r6, [r3, #0]
 8007e82:	e248      	b.n	8008316 <_dtoa_r+0xb4e>
 8007e84:	46b8      	mov	r8, r7
 8007e86:	4633      	mov	r3, r6
 8007e88:	461e      	mov	r6, r3
 8007e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e8e:	2a39      	cmp	r2, #57	@ 0x39
 8007e90:	d106      	bne.n	8007ea0 <_dtoa_r+0x6d8>
 8007e92:	459a      	cmp	sl, r3
 8007e94:	d1f8      	bne.n	8007e88 <_dtoa_r+0x6c0>
 8007e96:	2230      	movs	r2, #48	@ 0x30
 8007e98:	f108 0801 	add.w	r8, r8, #1
 8007e9c:	f88a 2000 	strb.w	r2, [sl]
 8007ea0:	781a      	ldrb	r2, [r3, #0]
 8007ea2:	3201      	adds	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e7a0      	b.n	8007dea <_dtoa_r+0x622>
 8007ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8008068 <_dtoa_r+0x8a0>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 fba4 	bl	80005f8 <__aeabi_dmul>
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	f7f8 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d09f      	beq.n	8007e00 <_dtoa_r+0x638>
 8007ec0:	e7d1      	b.n	8007e66 <_dtoa_r+0x69e>
 8007ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	f000 80ea 	beq.w	800809e <_dtoa_r+0x8d6>
 8007eca:	9a07      	ldr	r2, [sp, #28]
 8007ecc:	2a01      	cmp	r2, #1
 8007ece:	f300 80cd 	bgt.w	800806c <_dtoa_r+0x8a4>
 8007ed2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	f000 80c1 	beq.w	800805c <_dtoa_r+0x894>
 8007eda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ede:	9c08      	ldr	r4, [sp, #32]
 8007ee0:	9e00      	ldr	r6, [sp, #0]
 8007ee2:	9a00      	ldr	r2, [sp, #0]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	9200      	str	r2, [sp, #0]
 8007ee8:	9a06      	ldr	r2, [sp, #24]
 8007eea:	2101      	movs	r1, #1
 8007eec:	441a      	add	r2, r3
 8007eee:	4648      	mov	r0, r9
 8007ef0:	9206      	str	r2, [sp, #24]
 8007ef2:	f000 fc2d 	bl	8008750 <__i2b>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b166      	cbz	r6, 8007f14 <_dtoa_r+0x74c>
 8007efa:	9b06      	ldr	r3, [sp, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd09      	ble.n	8007f14 <_dtoa_r+0x74c>
 8007f00:	42b3      	cmp	r3, r6
 8007f02:	9a00      	ldr	r2, [sp, #0]
 8007f04:	bfa8      	it	ge
 8007f06:	4633      	movge	r3, r6
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	9200      	str	r2, [sp, #0]
 8007f0c:	9a06      	ldr	r2, [sp, #24]
 8007f0e:	1af6      	subs	r6, r6, r3
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	9b08      	ldr	r3, [sp, #32]
 8007f16:	b30b      	cbz	r3, 8007f5c <_dtoa_r+0x794>
 8007f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80c6 	beq.w	80080ac <_dtoa_r+0x8e4>
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	f000 80c0 	beq.w	80080a6 <_dtoa_r+0x8de>
 8007f26:	4629      	mov	r1, r5
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f000 fcc8 	bl	80088c0 <__pow5mult>
 8007f30:	9a02      	ldr	r2, [sp, #8]
 8007f32:	4601      	mov	r1, r0
 8007f34:	4605      	mov	r5, r0
 8007f36:	4648      	mov	r0, r9
 8007f38:	f000 fc20 	bl	800877c <__multiply>
 8007f3c:	9902      	ldr	r1, [sp, #8]
 8007f3e:	4680      	mov	r8, r0
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 fb51 	bl	80085e8 <_Bfree>
 8007f46:	9b08      	ldr	r3, [sp, #32]
 8007f48:	1b1b      	subs	r3, r3, r4
 8007f4a:	9308      	str	r3, [sp, #32]
 8007f4c:	f000 80b1 	beq.w	80080b2 <_dtoa_r+0x8ea>
 8007f50:	9a08      	ldr	r2, [sp, #32]
 8007f52:	4641      	mov	r1, r8
 8007f54:	4648      	mov	r0, r9
 8007f56:	f000 fcb3 	bl	80088c0 <__pow5mult>
 8007f5a:	9002      	str	r0, [sp, #8]
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f000 fbf6 	bl	8008750 <__i2b>
 8007f64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f66:	4604      	mov	r4, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 81d8 	beq.w	800831e <_dtoa_r+0xb56>
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4601      	mov	r1, r0
 8007f72:	4648      	mov	r0, r9
 8007f74:	f000 fca4 	bl	80088c0 <__pow5mult>
 8007f78:	9b07      	ldr	r3, [sp, #28]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	f300 809f 	bgt.w	80080c0 <_dtoa_r+0x8f8>
 8007f82:	9b04      	ldr	r3, [sp, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 8097 	bne.w	80080b8 <_dtoa_r+0x8f0>
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 8093 	bne.w	80080bc <_dtoa_r+0x8f4>
 8007f96:	9b05      	ldr	r3, [sp, #20]
 8007f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f9c:	0d1b      	lsrs	r3, r3, #20
 8007f9e:	051b      	lsls	r3, r3, #20
 8007fa0:	b133      	cbz	r3, 8007fb0 <_dtoa_r+0x7e8>
 8007fa2:	9b00      	ldr	r3, [sp, #0]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	3301      	adds	r3, #1
 8007fac:	9306      	str	r3, [sp, #24]
 8007fae:	2301      	movs	r3, #1
 8007fb0:	9308      	str	r3, [sp, #32]
 8007fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 81b8 	beq.w	800832a <_dtoa_r+0xb62>
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fc0:	6918      	ldr	r0, [r3, #16]
 8007fc2:	f000 fb79 	bl	80086b8 <__hi0bits>
 8007fc6:	f1c0 0020 	rsb	r0, r0, #32
 8007fca:	9b06      	ldr	r3, [sp, #24]
 8007fcc:	4418      	add	r0, r3
 8007fce:	f010 001f 	ands.w	r0, r0, #31
 8007fd2:	f000 8082 	beq.w	80080da <_dtoa_r+0x912>
 8007fd6:	f1c0 0320 	rsb	r3, r0, #32
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	dd73      	ble.n	80080c6 <_dtoa_r+0x8fe>
 8007fde:	9b00      	ldr	r3, [sp, #0]
 8007fe0:	f1c0 001c 	rsb	r0, r0, #28
 8007fe4:	4403      	add	r3, r0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	9b06      	ldr	r3, [sp, #24]
 8007fea:	4403      	add	r3, r0
 8007fec:	4406      	add	r6, r0
 8007fee:	9306      	str	r3, [sp, #24]
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	dd05      	ble.n	8008002 <_dtoa_r+0x83a>
 8007ff6:	9902      	ldr	r1, [sp, #8]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4648      	mov	r0, r9
 8007ffc:	f000 fcba 	bl	8008974 <__lshift>
 8008000:	9002      	str	r0, [sp, #8]
 8008002:	9b06      	ldr	r3, [sp, #24]
 8008004:	2b00      	cmp	r3, #0
 8008006:	dd05      	ble.n	8008014 <_dtoa_r+0x84c>
 8008008:	4621      	mov	r1, r4
 800800a:	461a      	mov	r2, r3
 800800c:	4648      	mov	r0, r9
 800800e:	f000 fcb1 	bl	8008974 <__lshift>
 8008012:	4604      	mov	r4, r0
 8008014:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d061      	beq.n	80080de <_dtoa_r+0x916>
 800801a:	9802      	ldr	r0, [sp, #8]
 800801c:	4621      	mov	r1, r4
 800801e:	f000 fd15 	bl	8008a4c <__mcmp>
 8008022:	2800      	cmp	r0, #0
 8008024:	da5b      	bge.n	80080de <_dtoa_r+0x916>
 8008026:	2300      	movs	r3, #0
 8008028:	9902      	ldr	r1, [sp, #8]
 800802a:	220a      	movs	r2, #10
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fafd 	bl	800862c <__multadd>
 8008032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008034:	9002      	str	r0, [sp, #8]
 8008036:	f107 38ff 	add.w	r8, r7, #4294967295
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8177 	beq.w	800832e <_dtoa_r+0xb66>
 8008040:	4629      	mov	r1, r5
 8008042:	2300      	movs	r3, #0
 8008044:	220a      	movs	r2, #10
 8008046:	4648      	mov	r0, r9
 8008048:	f000 faf0 	bl	800862c <__multadd>
 800804c:	f1bb 0f00 	cmp.w	fp, #0
 8008050:	4605      	mov	r5, r0
 8008052:	dc6f      	bgt.n	8008134 <_dtoa_r+0x96c>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	2b02      	cmp	r3, #2
 8008058:	dc49      	bgt.n	80080ee <_dtoa_r+0x926>
 800805a:	e06b      	b.n	8008134 <_dtoa_r+0x96c>
 800805c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800805e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008062:	e73c      	b.n	8007ede <_dtoa_r+0x716>
 8008064:	3fe00000 	.word	0x3fe00000
 8008068:	40240000 	.word	0x40240000
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	1e5c      	subs	r4, r3, #1
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	42a3      	cmp	r3, r4
 8008074:	db09      	blt.n	800808a <_dtoa_r+0x8c2>
 8008076:	1b1c      	subs	r4, r3, r4
 8008078:	9b03      	ldr	r3, [sp, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	f6bf af30 	bge.w	8007ee0 <_dtoa_r+0x718>
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	9a03      	ldr	r2, [sp, #12]
 8008084:	1a9e      	subs	r6, r3, r2
 8008086:	2300      	movs	r3, #0
 8008088:	e72b      	b.n	8007ee2 <_dtoa_r+0x71a>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800808e:	9408      	str	r4, [sp, #32]
 8008090:	1ae3      	subs	r3, r4, r3
 8008092:	441a      	add	r2, r3
 8008094:	9e00      	ldr	r6, [sp, #0]
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	920d      	str	r2, [sp, #52]	@ 0x34
 800809a:	2400      	movs	r4, #0
 800809c:	e721      	b.n	8007ee2 <_dtoa_r+0x71a>
 800809e:	9c08      	ldr	r4, [sp, #32]
 80080a0:	9e00      	ldr	r6, [sp, #0]
 80080a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80080a4:	e728      	b.n	8007ef8 <_dtoa_r+0x730>
 80080a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080aa:	e751      	b.n	8007f50 <_dtoa_r+0x788>
 80080ac:	9a08      	ldr	r2, [sp, #32]
 80080ae:	9902      	ldr	r1, [sp, #8]
 80080b0:	e750      	b.n	8007f54 <_dtoa_r+0x78c>
 80080b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80080b6:	e751      	b.n	8007f5c <_dtoa_r+0x794>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e779      	b.n	8007fb0 <_dtoa_r+0x7e8>
 80080bc:	9b04      	ldr	r3, [sp, #16]
 80080be:	e777      	b.n	8007fb0 <_dtoa_r+0x7e8>
 80080c0:	2300      	movs	r3, #0
 80080c2:	9308      	str	r3, [sp, #32]
 80080c4:	e779      	b.n	8007fba <_dtoa_r+0x7f2>
 80080c6:	d093      	beq.n	8007ff0 <_dtoa_r+0x828>
 80080c8:	9a00      	ldr	r2, [sp, #0]
 80080ca:	331c      	adds	r3, #28
 80080cc:	441a      	add	r2, r3
 80080ce:	9200      	str	r2, [sp, #0]
 80080d0:	9a06      	ldr	r2, [sp, #24]
 80080d2:	441a      	add	r2, r3
 80080d4:	441e      	add	r6, r3
 80080d6:	9206      	str	r2, [sp, #24]
 80080d8:	e78a      	b.n	8007ff0 <_dtoa_r+0x828>
 80080da:	4603      	mov	r3, r0
 80080dc:	e7f4      	b.n	80080c8 <_dtoa_r+0x900>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	46b8      	mov	r8, r7
 80080e4:	dc20      	bgt.n	8008128 <_dtoa_r+0x960>
 80080e6:	469b      	mov	fp, r3
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	dd1e      	ble.n	800812c <_dtoa_r+0x964>
 80080ee:	f1bb 0f00 	cmp.w	fp, #0
 80080f2:	f47f adb1 	bne.w	8007c58 <_dtoa_r+0x490>
 80080f6:	4621      	mov	r1, r4
 80080f8:	465b      	mov	r3, fp
 80080fa:	2205      	movs	r2, #5
 80080fc:	4648      	mov	r0, r9
 80080fe:	f000 fa95 	bl	800862c <__multadd>
 8008102:	4601      	mov	r1, r0
 8008104:	4604      	mov	r4, r0
 8008106:	9802      	ldr	r0, [sp, #8]
 8008108:	f000 fca0 	bl	8008a4c <__mcmp>
 800810c:	2800      	cmp	r0, #0
 800810e:	f77f ada3 	ble.w	8007c58 <_dtoa_r+0x490>
 8008112:	4656      	mov	r6, sl
 8008114:	2331      	movs	r3, #49	@ 0x31
 8008116:	f806 3b01 	strb.w	r3, [r6], #1
 800811a:	f108 0801 	add.w	r8, r8, #1
 800811e:	e59f      	b.n	8007c60 <_dtoa_r+0x498>
 8008120:	9c03      	ldr	r4, [sp, #12]
 8008122:	46b8      	mov	r8, r7
 8008124:	4625      	mov	r5, r4
 8008126:	e7f4      	b.n	8008112 <_dtoa_r+0x94a>
 8008128:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800812c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8101 	beq.w	8008336 <_dtoa_r+0xb6e>
 8008134:	2e00      	cmp	r6, #0
 8008136:	dd05      	ble.n	8008144 <_dtoa_r+0x97c>
 8008138:	4629      	mov	r1, r5
 800813a:	4632      	mov	r2, r6
 800813c:	4648      	mov	r0, r9
 800813e:	f000 fc19 	bl	8008974 <__lshift>
 8008142:	4605      	mov	r5, r0
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d05c      	beq.n	8008204 <_dtoa_r+0xa3c>
 800814a:	6869      	ldr	r1, [r5, #4]
 800814c:	4648      	mov	r0, r9
 800814e:	f000 fa0b 	bl	8008568 <_Balloc>
 8008152:	4606      	mov	r6, r0
 8008154:	b928      	cbnz	r0, 8008162 <_dtoa_r+0x99a>
 8008156:	4b82      	ldr	r3, [pc, #520]	@ (8008360 <_dtoa_r+0xb98>)
 8008158:	4602      	mov	r2, r0
 800815a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800815e:	f7ff bb4a 	b.w	80077f6 <_dtoa_r+0x2e>
 8008162:	692a      	ldr	r2, [r5, #16]
 8008164:	3202      	adds	r2, #2
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	f105 010c 	add.w	r1, r5, #12
 800816c:	300c      	adds	r0, #12
 800816e:	f7ff fa92 	bl	8007696 <memcpy>
 8008172:	2201      	movs	r2, #1
 8008174:	4631      	mov	r1, r6
 8008176:	4648      	mov	r0, r9
 8008178:	f000 fbfc 	bl	8008974 <__lshift>
 800817c:	f10a 0301 	add.w	r3, sl, #1
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	eb0a 030b 	add.w	r3, sl, fp
 8008186:	9308      	str	r3, [sp, #32]
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	462f      	mov	r7, r5
 8008190:	9306      	str	r3, [sp, #24]
 8008192:	4605      	mov	r5, r0
 8008194:	9b00      	ldr	r3, [sp, #0]
 8008196:	9802      	ldr	r0, [sp, #8]
 8008198:	4621      	mov	r1, r4
 800819a:	f103 3bff 	add.w	fp, r3, #4294967295
 800819e:	f7ff fa88 	bl	80076b2 <quorem>
 80081a2:	4603      	mov	r3, r0
 80081a4:	3330      	adds	r3, #48	@ 0x30
 80081a6:	9003      	str	r0, [sp, #12]
 80081a8:	4639      	mov	r1, r7
 80081aa:	9802      	ldr	r0, [sp, #8]
 80081ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ae:	f000 fc4d 	bl	8008a4c <__mcmp>
 80081b2:	462a      	mov	r2, r5
 80081b4:	9004      	str	r0, [sp, #16]
 80081b6:	4621      	mov	r1, r4
 80081b8:	4648      	mov	r0, r9
 80081ba:	f000 fc63 	bl	8008a84 <__mdiff>
 80081be:	68c2      	ldr	r2, [r0, #12]
 80081c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c2:	4606      	mov	r6, r0
 80081c4:	bb02      	cbnz	r2, 8008208 <_dtoa_r+0xa40>
 80081c6:	4601      	mov	r1, r0
 80081c8:	9802      	ldr	r0, [sp, #8]
 80081ca:	f000 fc3f 	bl	8008a4c <__mcmp>
 80081ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d0:	4602      	mov	r2, r0
 80081d2:	4631      	mov	r1, r6
 80081d4:	4648      	mov	r0, r9
 80081d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80081d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081da:	f000 fa05 	bl	80085e8 <_Bfree>
 80081de:	9b07      	ldr	r3, [sp, #28]
 80081e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80081e2:	9e00      	ldr	r6, [sp, #0]
 80081e4:	ea42 0103 	orr.w	r1, r2, r3
 80081e8:	9b06      	ldr	r3, [sp, #24]
 80081ea:	4319      	orrs	r1, r3
 80081ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ee:	d10d      	bne.n	800820c <_dtoa_r+0xa44>
 80081f0:	2b39      	cmp	r3, #57	@ 0x39
 80081f2:	d027      	beq.n	8008244 <_dtoa_r+0xa7c>
 80081f4:	9a04      	ldr	r2, [sp, #16]
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	dd01      	ble.n	80081fe <_dtoa_r+0xa36>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	3331      	adds	r3, #49	@ 0x31
 80081fe:	f88b 3000 	strb.w	r3, [fp]
 8008202:	e52e      	b.n	8007c62 <_dtoa_r+0x49a>
 8008204:	4628      	mov	r0, r5
 8008206:	e7b9      	b.n	800817c <_dtoa_r+0x9b4>
 8008208:	2201      	movs	r2, #1
 800820a:	e7e2      	b.n	80081d2 <_dtoa_r+0xa0a>
 800820c:	9904      	ldr	r1, [sp, #16]
 800820e:	2900      	cmp	r1, #0
 8008210:	db04      	blt.n	800821c <_dtoa_r+0xa54>
 8008212:	9807      	ldr	r0, [sp, #28]
 8008214:	4301      	orrs	r1, r0
 8008216:	9806      	ldr	r0, [sp, #24]
 8008218:	4301      	orrs	r1, r0
 800821a:	d120      	bne.n	800825e <_dtoa_r+0xa96>
 800821c:	2a00      	cmp	r2, #0
 800821e:	ddee      	ble.n	80081fe <_dtoa_r+0xa36>
 8008220:	9902      	ldr	r1, [sp, #8]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2201      	movs	r2, #1
 8008226:	4648      	mov	r0, r9
 8008228:	f000 fba4 	bl	8008974 <__lshift>
 800822c:	4621      	mov	r1, r4
 800822e:	9002      	str	r0, [sp, #8]
 8008230:	f000 fc0c 	bl	8008a4c <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	dc02      	bgt.n	8008240 <_dtoa_r+0xa78>
 800823a:	d1e0      	bne.n	80081fe <_dtoa_r+0xa36>
 800823c:	07da      	lsls	r2, r3, #31
 800823e:	d5de      	bpl.n	80081fe <_dtoa_r+0xa36>
 8008240:	2b39      	cmp	r3, #57	@ 0x39
 8008242:	d1da      	bne.n	80081fa <_dtoa_r+0xa32>
 8008244:	2339      	movs	r3, #57	@ 0x39
 8008246:	f88b 3000 	strb.w	r3, [fp]
 800824a:	4633      	mov	r3, r6
 800824c:	461e      	mov	r6, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008254:	2a39      	cmp	r2, #57	@ 0x39
 8008256:	d04e      	beq.n	80082f6 <_dtoa_r+0xb2e>
 8008258:	3201      	adds	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e501      	b.n	8007c62 <_dtoa_r+0x49a>
 800825e:	2a00      	cmp	r2, #0
 8008260:	dd03      	ble.n	800826a <_dtoa_r+0xaa2>
 8008262:	2b39      	cmp	r3, #57	@ 0x39
 8008264:	d0ee      	beq.n	8008244 <_dtoa_r+0xa7c>
 8008266:	3301      	adds	r3, #1
 8008268:	e7c9      	b.n	80081fe <_dtoa_r+0xa36>
 800826a:	9a00      	ldr	r2, [sp, #0]
 800826c:	9908      	ldr	r1, [sp, #32]
 800826e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008272:	428a      	cmp	r2, r1
 8008274:	d028      	beq.n	80082c8 <_dtoa_r+0xb00>
 8008276:	9902      	ldr	r1, [sp, #8]
 8008278:	2300      	movs	r3, #0
 800827a:	220a      	movs	r2, #10
 800827c:	4648      	mov	r0, r9
 800827e:	f000 f9d5 	bl	800862c <__multadd>
 8008282:	42af      	cmp	r7, r5
 8008284:	9002      	str	r0, [sp, #8]
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	f04f 020a 	mov.w	r2, #10
 800828e:	4639      	mov	r1, r7
 8008290:	4648      	mov	r0, r9
 8008292:	d107      	bne.n	80082a4 <_dtoa_r+0xadc>
 8008294:	f000 f9ca 	bl	800862c <__multadd>
 8008298:	4607      	mov	r7, r0
 800829a:	4605      	mov	r5, r0
 800829c:	9b00      	ldr	r3, [sp, #0]
 800829e:	3301      	adds	r3, #1
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	e777      	b.n	8008194 <_dtoa_r+0x9cc>
 80082a4:	f000 f9c2 	bl	800862c <__multadd>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4607      	mov	r7, r0
 80082ac:	2300      	movs	r3, #0
 80082ae:	220a      	movs	r2, #10
 80082b0:	4648      	mov	r0, r9
 80082b2:	f000 f9bb 	bl	800862c <__multadd>
 80082b6:	4605      	mov	r5, r0
 80082b8:	e7f0      	b.n	800829c <_dtoa_r+0xad4>
 80082ba:	f1bb 0f00 	cmp.w	fp, #0
 80082be:	bfcc      	ite	gt
 80082c0:	465e      	movgt	r6, fp
 80082c2:	2601      	movle	r6, #1
 80082c4:	4456      	add	r6, sl
 80082c6:	2700      	movs	r7, #0
 80082c8:	9902      	ldr	r1, [sp, #8]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2201      	movs	r2, #1
 80082ce:	4648      	mov	r0, r9
 80082d0:	f000 fb50 	bl	8008974 <__lshift>
 80082d4:	4621      	mov	r1, r4
 80082d6:	9002      	str	r0, [sp, #8]
 80082d8:	f000 fbb8 	bl	8008a4c <__mcmp>
 80082dc:	2800      	cmp	r0, #0
 80082de:	dcb4      	bgt.n	800824a <_dtoa_r+0xa82>
 80082e0:	d102      	bne.n	80082e8 <_dtoa_r+0xb20>
 80082e2:	9b00      	ldr	r3, [sp, #0]
 80082e4:	07db      	lsls	r3, r3, #31
 80082e6:	d4b0      	bmi.n	800824a <_dtoa_r+0xa82>
 80082e8:	4633      	mov	r3, r6
 80082ea:	461e      	mov	r6, r3
 80082ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082f0:	2a30      	cmp	r2, #48	@ 0x30
 80082f2:	d0fa      	beq.n	80082ea <_dtoa_r+0xb22>
 80082f4:	e4b5      	b.n	8007c62 <_dtoa_r+0x49a>
 80082f6:	459a      	cmp	sl, r3
 80082f8:	d1a8      	bne.n	800824c <_dtoa_r+0xa84>
 80082fa:	2331      	movs	r3, #49	@ 0x31
 80082fc:	f108 0801 	add.w	r8, r8, #1
 8008300:	f88a 3000 	strb.w	r3, [sl]
 8008304:	e4ad      	b.n	8007c62 <_dtoa_r+0x49a>
 8008306:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008308:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008364 <_dtoa_r+0xb9c>
 800830c:	b11b      	cbz	r3, 8008316 <_dtoa_r+0xb4e>
 800830e:	f10a 0308 	add.w	r3, sl, #8
 8008312:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	4650      	mov	r0, sl
 8008318:	b017      	add	sp, #92	@ 0x5c
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	9b07      	ldr	r3, [sp, #28]
 8008320:	2b01      	cmp	r3, #1
 8008322:	f77f ae2e 	ble.w	8007f82 <_dtoa_r+0x7ba>
 8008326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008328:	9308      	str	r3, [sp, #32]
 800832a:	2001      	movs	r0, #1
 800832c:	e64d      	b.n	8007fca <_dtoa_r+0x802>
 800832e:	f1bb 0f00 	cmp.w	fp, #0
 8008332:	f77f aed9 	ble.w	80080e8 <_dtoa_r+0x920>
 8008336:	4656      	mov	r6, sl
 8008338:	9802      	ldr	r0, [sp, #8]
 800833a:	4621      	mov	r1, r4
 800833c:	f7ff f9b9 	bl	80076b2 <quorem>
 8008340:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008344:	f806 3b01 	strb.w	r3, [r6], #1
 8008348:	eba6 020a 	sub.w	r2, r6, sl
 800834c:	4593      	cmp	fp, r2
 800834e:	ddb4      	ble.n	80082ba <_dtoa_r+0xaf2>
 8008350:	9902      	ldr	r1, [sp, #8]
 8008352:	2300      	movs	r3, #0
 8008354:	220a      	movs	r2, #10
 8008356:	4648      	mov	r0, r9
 8008358:	f000 f968 	bl	800862c <__multadd>
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	e7eb      	b.n	8008338 <_dtoa_r+0xb70>
 8008360:	0800a0d0 	.word	0x0800a0d0
 8008364:	0800a054 	.word	0x0800a054

08008368 <_free_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4605      	mov	r5, r0
 800836c:	2900      	cmp	r1, #0
 800836e:	d041      	beq.n	80083f4 <_free_r+0x8c>
 8008370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008374:	1f0c      	subs	r4, r1, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfb8      	it	lt
 800837a:	18e4      	addlt	r4, r4, r3
 800837c:	f000 f8e8 	bl	8008550 <__malloc_lock>
 8008380:	4a1d      	ldr	r2, [pc, #116]	@ (80083f8 <_free_r+0x90>)
 8008382:	6813      	ldr	r3, [r2, #0]
 8008384:	b933      	cbnz	r3, 8008394 <_free_r+0x2c>
 8008386:	6063      	str	r3, [r4, #4]
 8008388:	6014      	str	r4, [r2, #0]
 800838a:	4628      	mov	r0, r5
 800838c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008390:	f000 b8e4 	b.w	800855c <__malloc_unlock>
 8008394:	42a3      	cmp	r3, r4
 8008396:	d908      	bls.n	80083aa <_free_r+0x42>
 8008398:	6820      	ldr	r0, [r4, #0]
 800839a:	1821      	adds	r1, r4, r0
 800839c:	428b      	cmp	r3, r1
 800839e:	bf01      	itttt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	1809      	addeq	r1, r1, r0
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	e7ed      	b.n	8008386 <_free_r+0x1e>
 80083aa:	461a      	mov	r2, r3
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	b10b      	cbz	r3, 80083b4 <_free_r+0x4c>
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d9fa      	bls.n	80083aa <_free_r+0x42>
 80083b4:	6811      	ldr	r1, [r2, #0]
 80083b6:	1850      	adds	r0, r2, r1
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d10b      	bne.n	80083d4 <_free_r+0x6c>
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	4401      	add	r1, r0
 80083c0:	1850      	adds	r0, r2, r1
 80083c2:	4283      	cmp	r3, r0
 80083c4:	6011      	str	r1, [r2, #0]
 80083c6:	d1e0      	bne.n	800838a <_free_r+0x22>
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	6053      	str	r3, [r2, #4]
 80083ce:	4408      	add	r0, r1
 80083d0:	6010      	str	r0, [r2, #0]
 80083d2:	e7da      	b.n	800838a <_free_r+0x22>
 80083d4:	d902      	bls.n	80083dc <_free_r+0x74>
 80083d6:	230c      	movs	r3, #12
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	e7d6      	b.n	800838a <_free_r+0x22>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	1821      	adds	r1, r4, r0
 80083e0:	428b      	cmp	r3, r1
 80083e2:	bf04      	itt	eq
 80083e4:	6819      	ldreq	r1, [r3, #0]
 80083e6:	685b      	ldreq	r3, [r3, #4]
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	bf04      	itt	eq
 80083ec:	1809      	addeq	r1, r1, r0
 80083ee:	6021      	streq	r1, [r4, #0]
 80083f0:	6054      	str	r4, [r2, #4]
 80083f2:	e7ca      	b.n	800838a <_free_r+0x22>
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	200005cc 	.word	0x200005cc

080083fc <malloc>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	@ (8008408 <malloc+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b825 	b.w	8008450 <_malloc_r>
 8008406:	bf00      	nop
 8008408:	20000020 	.word	0x20000020

0800840c <sbrk_aligned>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4e0f      	ldr	r6, [pc, #60]	@ (800844c <sbrk_aligned+0x40>)
 8008410:	460c      	mov	r4, r1
 8008412:	6831      	ldr	r1, [r6, #0]
 8008414:	4605      	mov	r5, r0
 8008416:	b911      	cbnz	r1, 800841e <sbrk_aligned+0x12>
 8008418:	f001 f804 	bl	8009424 <_sbrk_r>
 800841c:	6030      	str	r0, [r6, #0]
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 ffff 	bl	8009424 <_sbrk_r>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d103      	bne.n	8008432 <sbrk_aligned+0x26>
 800842a:	f04f 34ff 	mov.w	r4, #4294967295
 800842e:	4620      	mov	r0, r4
 8008430:	bd70      	pop	{r4, r5, r6, pc}
 8008432:	1cc4      	adds	r4, r0, #3
 8008434:	f024 0403 	bic.w	r4, r4, #3
 8008438:	42a0      	cmp	r0, r4
 800843a:	d0f8      	beq.n	800842e <sbrk_aligned+0x22>
 800843c:	1a21      	subs	r1, r4, r0
 800843e:	4628      	mov	r0, r5
 8008440:	f000 fff0 	bl	8009424 <_sbrk_r>
 8008444:	3001      	adds	r0, #1
 8008446:	d1f2      	bne.n	800842e <sbrk_aligned+0x22>
 8008448:	e7ef      	b.n	800842a <sbrk_aligned+0x1e>
 800844a:	bf00      	nop
 800844c:	200005c8 	.word	0x200005c8

08008450 <_malloc_r>:
 8008450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008454:	1ccd      	adds	r5, r1, #3
 8008456:	f025 0503 	bic.w	r5, r5, #3
 800845a:	3508      	adds	r5, #8
 800845c:	2d0c      	cmp	r5, #12
 800845e:	bf38      	it	cc
 8008460:	250c      	movcc	r5, #12
 8008462:	2d00      	cmp	r5, #0
 8008464:	4606      	mov	r6, r0
 8008466:	db01      	blt.n	800846c <_malloc_r+0x1c>
 8008468:	42a9      	cmp	r1, r5
 800846a:	d904      	bls.n	8008476 <_malloc_r+0x26>
 800846c:	230c      	movs	r3, #12
 800846e:	6033      	str	r3, [r6, #0]
 8008470:	2000      	movs	r0, #0
 8008472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800854c <_malloc_r+0xfc>
 800847a:	f000 f869 	bl	8008550 <__malloc_lock>
 800847e:	f8d8 3000 	ldr.w	r3, [r8]
 8008482:	461c      	mov	r4, r3
 8008484:	bb44      	cbnz	r4, 80084d8 <_malloc_r+0x88>
 8008486:	4629      	mov	r1, r5
 8008488:	4630      	mov	r0, r6
 800848a:	f7ff ffbf 	bl	800840c <sbrk_aligned>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	4604      	mov	r4, r0
 8008492:	d158      	bne.n	8008546 <_malloc_r+0xf6>
 8008494:	f8d8 4000 	ldr.w	r4, [r8]
 8008498:	4627      	mov	r7, r4
 800849a:	2f00      	cmp	r7, #0
 800849c:	d143      	bne.n	8008526 <_malloc_r+0xd6>
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d04b      	beq.n	800853a <_malloc_r+0xea>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	4639      	mov	r1, r7
 80084a6:	4630      	mov	r0, r6
 80084a8:	eb04 0903 	add.w	r9, r4, r3
 80084ac:	f000 ffba 	bl	8009424 <_sbrk_r>
 80084b0:	4581      	cmp	r9, r0
 80084b2:	d142      	bne.n	800853a <_malloc_r+0xea>
 80084b4:	6821      	ldr	r1, [r4, #0]
 80084b6:	1a6d      	subs	r5, r5, r1
 80084b8:	4629      	mov	r1, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	f7ff ffa6 	bl	800840c <sbrk_aligned>
 80084c0:	3001      	adds	r0, #1
 80084c2:	d03a      	beq.n	800853a <_malloc_r+0xea>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	442b      	add	r3, r5
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	f8d8 3000 	ldr.w	r3, [r8]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	bb62      	cbnz	r2, 800852c <_malloc_r+0xdc>
 80084d2:	f8c8 7000 	str.w	r7, [r8]
 80084d6:	e00f      	b.n	80084f8 <_malloc_r+0xa8>
 80084d8:	6822      	ldr	r2, [r4, #0]
 80084da:	1b52      	subs	r2, r2, r5
 80084dc:	d420      	bmi.n	8008520 <_malloc_r+0xd0>
 80084de:	2a0b      	cmp	r2, #11
 80084e0:	d917      	bls.n	8008512 <_malloc_r+0xc2>
 80084e2:	1961      	adds	r1, r4, r5
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	6025      	str	r5, [r4, #0]
 80084e8:	bf18      	it	ne
 80084ea:	6059      	strne	r1, [r3, #4]
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	bf08      	it	eq
 80084f0:	f8c8 1000 	streq.w	r1, [r8]
 80084f4:	5162      	str	r2, [r4, r5]
 80084f6:	604b      	str	r3, [r1, #4]
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f82f 	bl	800855c <__malloc_unlock>
 80084fe:	f104 000b 	add.w	r0, r4, #11
 8008502:	1d23      	adds	r3, r4, #4
 8008504:	f020 0007 	bic.w	r0, r0, #7
 8008508:	1ac2      	subs	r2, r0, r3
 800850a:	bf1c      	itt	ne
 800850c:	1a1b      	subne	r3, r3, r0
 800850e:	50a3      	strne	r3, [r4, r2]
 8008510:	e7af      	b.n	8008472 <_malloc_r+0x22>
 8008512:	6862      	ldr	r2, [r4, #4]
 8008514:	42a3      	cmp	r3, r4
 8008516:	bf0c      	ite	eq
 8008518:	f8c8 2000 	streq.w	r2, [r8]
 800851c:	605a      	strne	r2, [r3, #4]
 800851e:	e7eb      	b.n	80084f8 <_malloc_r+0xa8>
 8008520:	4623      	mov	r3, r4
 8008522:	6864      	ldr	r4, [r4, #4]
 8008524:	e7ae      	b.n	8008484 <_malloc_r+0x34>
 8008526:	463c      	mov	r4, r7
 8008528:	687f      	ldr	r7, [r7, #4]
 800852a:	e7b6      	b.n	800849a <_malloc_r+0x4a>
 800852c:	461a      	mov	r2, r3
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	42a3      	cmp	r3, r4
 8008532:	d1fb      	bne.n	800852c <_malloc_r+0xdc>
 8008534:	2300      	movs	r3, #0
 8008536:	6053      	str	r3, [r2, #4]
 8008538:	e7de      	b.n	80084f8 <_malloc_r+0xa8>
 800853a:	230c      	movs	r3, #12
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	4630      	mov	r0, r6
 8008540:	f000 f80c 	bl	800855c <__malloc_unlock>
 8008544:	e794      	b.n	8008470 <_malloc_r+0x20>
 8008546:	6005      	str	r5, [r0, #0]
 8008548:	e7d6      	b.n	80084f8 <_malloc_r+0xa8>
 800854a:	bf00      	nop
 800854c:	200005cc 	.word	0x200005cc

08008550 <__malloc_lock>:
 8008550:	4801      	ldr	r0, [pc, #4]	@ (8008558 <__malloc_lock+0x8>)
 8008552:	f7ff b89e 	b.w	8007692 <__retarget_lock_acquire_recursive>
 8008556:	bf00      	nop
 8008558:	200005c4 	.word	0x200005c4

0800855c <__malloc_unlock>:
 800855c:	4801      	ldr	r0, [pc, #4]	@ (8008564 <__malloc_unlock+0x8>)
 800855e:	f7ff b899 	b.w	8007694 <__retarget_lock_release_recursive>
 8008562:	bf00      	nop
 8008564:	200005c4 	.word	0x200005c4

08008568 <_Balloc>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	69c6      	ldr	r6, [r0, #28]
 800856c:	4604      	mov	r4, r0
 800856e:	460d      	mov	r5, r1
 8008570:	b976      	cbnz	r6, 8008590 <_Balloc+0x28>
 8008572:	2010      	movs	r0, #16
 8008574:	f7ff ff42 	bl	80083fc <malloc>
 8008578:	4602      	mov	r2, r0
 800857a:	61e0      	str	r0, [r4, #28]
 800857c:	b920      	cbnz	r0, 8008588 <_Balloc+0x20>
 800857e:	4b18      	ldr	r3, [pc, #96]	@ (80085e0 <_Balloc+0x78>)
 8008580:	4818      	ldr	r0, [pc, #96]	@ (80085e4 <_Balloc+0x7c>)
 8008582:	216b      	movs	r1, #107	@ 0x6b
 8008584:	f000 ff5e 	bl	8009444 <__assert_func>
 8008588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800858c:	6006      	str	r6, [r0, #0]
 800858e:	60c6      	str	r6, [r0, #12]
 8008590:	69e6      	ldr	r6, [r4, #28]
 8008592:	68f3      	ldr	r3, [r6, #12]
 8008594:	b183      	cbz	r3, 80085b8 <_Balloc+0x50>
 8008596:	69e3      	ldr	r3, [r4, #28]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800859e:	b9b8      	cbnz	r0, 80085d0 <_Balloc+0x68>
 80085a0:	2101      	movs	r1, #1
 80085a2:	fa01 f605 	lsl.w	r6, r1, r5
 80085a6:	1d72      	adds	r2, r6, #5
 80085a8:	0092      	lsls	r2, r2, #2
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 ff68 	bl	8009480 <_calloc_r>
 80085b0:	b160      	cbz	r0, 80085cc <_Balloc+0x64>
 80085b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085b6:	e00e      	b.n	80085d6 <_Balloc+0x6e>
 80085b8:	2221      	movs	r2, #33	@ 0x21
 80085ba:	2104      	movs	r1, #4
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 ff5f 	bl	8009480 <_calloc_r>
 80085c2:	69e3      	ldr	r3, [r4, #28]
 80085c4:	60f0      	str	r0, [r6, #12]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e4      	bne.n	8008596 <_Balloc+0x2e>
 80085cc:	2000      	movs	r0, #0
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	6802      	ldr	r2, [r0, #0]
 80085d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085d6:	2300      	movs	r3, #0
 80085d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085dc:	e7f7      	b.n	80085ce <_Balloc+0x66>
 80085de:	bf00      	nop
 80085e0:	0800a061 	.word	0x0800a061
 80085e4:	0800a0e1 	.word	0x0800a0e1

080085e8 <_Bfree>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	69c6      	ldr	r6, [r0, #28]
 80085ec:	4605      	mov	r5, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	b976      	cbnz	r6, 8008610 <_Bfree+0x28>
 80085f2:	2010      	movs	r0, #16
 80085f4:	f7ff ff02 	bl	80083fc <malloc>
 80085f8:	4602      	mov	r2, r0
 80085fa:	61e8      	str	r0, [r5, #28]
 80085fc:	b920      	cbnz	r0, 8008608 <_Bfree+0x20>
 80085fe:	4b09      	ldr	r3, [pc, #36]	@ (8008624 <_Bfree+0x3c>)
 8008600:	4809      	ldr	r0, [pc, #36]	@ (8008628 <_Bfree+0x40>)
 8008602:	218f      	movs	r1, #143	@ 0x8f
 8008604:	f000 ff1e 	bl	8009444 <__assert_func>
 8008608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800860c:	6006      	str	r6, [r0, #0]
 800860e:	60c6      	str	r6, [r0, #12]
 8008610:	b13c      	cbz	r4, 8008622 <_Bfree+0x3a>
 8008612:	69eb      	ldr	r3, [r5, #28]
 8008614:	6862      	ldr	r2, [r4, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800861c:	6021      	str	r1, [r4, #0]
 800861e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	0800a061 	.word	0x0800a061
 8008628:	0800a0e1 	.word	0x0800a0e1

0800862c <__multadd>:
 800862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	690d      	ldr	r5, [r1, #16]
 8008632:	4607      	mov	r7, r0
 8008634:	460c      	mov	r4, r1
 8008636:	461e      	mov	r6, r3
 8008638:	f101 0c14 	add.w	ip, r1, #20
 800863c:	2000      	movs	r0, #0
 800863e:	f8dc 3000 	ldr.w	r3, [ip]
 8008642:	b299      	uxth	r1, r3
 8008644:	fb02 6101 	mla	r1, r2, r1, r6
 8008648:	0c1e      	lsrs	r6, r3, #16
 800864a:	0c0b      	lsrs	r3, r1, #16
 800864c:	fb02 3306 	mla	r3, r2, r6, r3
 8008650:	b289      	uxth	r1, r1
 8008652:	3001      	adds	r0, #1
 8008654:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008658:	4285      	cmp	r5, r0
 800865a:	f84c 1b04 	str.w	r1, [ip], #4
 800865e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008662:	dcec      	bgt.n	800863e <__multadd+0x12>
 8008664:	b30e      	cbz	r6, 80086aa <__multadd+0x7e>
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	42ab      	cmp	r3, r5
 800866a:	dc19      	bgt.n	80086a0 <__multadd+0x74>
 800866c:	6861      	ldr	r1, [r4, #4]
 800866e:	4638      	mov	r0, r7
 8008670:	3101      	adds	r1, #1
 8008672:	f7ff ff79 	bl	8008568 <_Balloc>
 8008676:	4680      	mov	r8, r0
 8008678:	b928      	cbnz	r0, 8008686 <__multadd+0x5a>
 800867a:	4602      	mov	r2, r0
 800867c:	4b0c      	ldr	r3, [pc, #48]	@ (80086b0 <__multadd+0x84>)
 800867e:	480d      	ldr	r0, [pc, #52]	@ (80086b4 <__multadd+0x88>)
 8008680:	21ba      	movs	r1, #186	@ 0xba
 8008682:	f000 fedf 	bl	8009444 <__assert_func>
 8008686:	6922      	ldr	r2, [r4, #16]
 8008688:	3202      	adds	r2, #2
 800868a:	f104 010c 	add.w	r1, r4, #12
 800868e:	0092      	lsls	r2, r2, #2
 8008690:	300c      	adds	r0, #12
 8008692:	f7ff f800 	bl	8007696 <memcpy>
 8008696:	4621      	mov	r1, r4
 8008698:	4638      	mov	r0, r7
 800869a:	f7ff ffa5 	bl	80085e8 <_Bfree>
 800869e:	4644      	mov	r4, r8
 80086a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086a4:	3501      	adds	r5, #1
 80086a6:	615e      	str	r6, [r3, #20]
 80086a8:	6125      	str	r5, [r4, #16]
 80086aa:	4620      	mov	r0, r4
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b0:	0800a0d0 	.word	0x0800a0d0
 80086b4:	0800a0e1 	.word	0x0800a0e1

080086b8 <__hi0bits>:
 80086b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086bc:	4603      	mov	r3, r0
 80086be:	bf36      	itet	cc
 80086c0:	0403      	lslcc	r3, r0, #16
 80086c2:	2000      	movcs	r0, #0
 80086c4:	2010      	movcc	r0, #16
 80086c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ca:	bf3c      	itt	cc
 80086cc:	021b      	lslcc	r3, r3, #8
 80086ce:	3008      	addcc	r0, #8
 80086d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d4:	bf3c      	itt	cc
 80086d6:	011b      	lslcc	r3, r3, #4
 80086d8:	3004      	addcc	r0, #4
 80086da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086de:	bf3c      	itt	cc
 80086e0:	009b      	lslcc	r3, r3, #2
 80086e2:	3002      	addcc	r0, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	db05      	blt.n	80086f4 <__hi0bits+0x3c>
 80086e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086ec:	f100 0001 	add.w	r0, r0, #1
 80086f0:	bf08      	it	eq
 80086f2:	2020      	moveq	r0, #32
 80086f4:	4770      	bx	lr

080086f6 <__lo0bits>:
 80086f6:	6803      	ldr	r3, [r0, #0]
 80086f8:	4602      	mov	r2, r0
 80086fa:	f013 0007 	ands.w	r0, r3, #7
 80086fe:	d00b      	beq.n	8008718 <__lo0bits+0x22>
 8008700:	07d9      	lsls	r1, r3, #31
 8008702:	d421      	bmi.n	8008748 <__lo0bits+0x52>
 8008704:	0798      	lsls	r0, r3, #30
 8008706:	bf49      	itett	mi
 8008708:	085b      	lsrmi	r3, r3, #1
 800870a:	089b      	lsrpl	r3, r3, #2
 800870c:	2001      	movmi	r0, #1
 800870e:	6013      	strmi	r3, [r2, #0]
 8008710:	bf5c      	itt	pl
 8008712:	6013      	strpl	r3, [r2, #0]
 8008714:	2002      	movpl	r0, #2
 8008716:	4770      	bx	lr
 8008718:	b299      	uxth	r1, r3
 800871a:	b909      	cbnz	r1, 8008720 <__lo0bits+0x2a>
 800871c:	0c1b      	lsrs	r3, r3, #16
 800871e:	2010      	movs	r0, #16
 8008720:	b2d9      	uxtb	r1, r3
 8008722:	b909      	cbnz	r1, 8008728 <__lo0bits+0x32>
 8008724:	3008      	adds	r0, #8
 8008726:	0a1b      	lsrs	r3, r3, #8
 8008728:	0719      	lsls	r1, r3, #28
 800872a:	bf04      	itt	eq
 800872c:	091b      	lsreq	r3, r3, #4
 800872e:	3004      	addeq	r0, #4
 8008730:	0799      	lsls	r1, r3, #30
 8008732:	bf04      	itt	eq
 8008734:	089b      	lsreq	r3, r3, #2
 8008736:	3002      	addeq	r0, #2
 8008738:	07d9      	lsls	r1, r3, #31
 800873a:	d403      	bmi.n	8008744 <__lo0bits+0x4e>
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	f100 0001 	add.w	r0, r0, #1
 8008742:	d003      	beq.n	800874c <__lo0bits+0x56>
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4770      	bx	lr
 8008748:	2000      	movs	r0, #0
 800874a:	4770      	bx	lr
 800874c:	2020      	movs	r0, #32
 800874e:	4770      	bx	lr

08008750 <__i2b>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	2101      	movs	r1, #1
 8008756:	f7ff ff07 	bl	8008568 <_Balloc>
 800875a:	4602      	mov	r2, r0
 800875c:	b928      	cbnz	r0, 800876a <__i2b+0x1a>
 800875e:	4b05      	ldr	r3, [pc, #20]	@ (8008774 <__i2b+0x24>)
 8008760:	4805      	ldr	r0, [pc, #20]	@ (8008778 <__i2b+0x28>)
 8008762:	f240 1145 	movw	r1, #325	@ 0x145
 8008766:	f000 fe6d 	bl	8009444 <__assert_func>
 800876a:	2301      	movs	r3, #1
 800876c:	6144      	str	r4, [r0, #20]
 800876e:	6103      	str	r3, [r0, #16]
 8008770:	bd10      	pop	{r4, pc}
 8008772:	bf00      	nop
 8008774:	0800a0d0 	.word	0x0800a0d0
 8008778:	0800a0e1 	.word	0x0800a0e1

0800877c <__multiply>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	4617      	mov	r7, r2
 8008782:	690a      	ldr	r2, [r1, #16]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	429a      	cmp	r2, r3
 8008788:	bfa8      	it	ge
 800878a:	463b      	movge	r3, r7
 800878c:	4689      	mov	r9, r1
 800878e:	bfa4      	itt	ge
 8008790:	460f      	movge	r7, r1
 8008792:	4699      	movge	r9, r3
 8008794:	693d      	ldr	r5, [r7, #16]
 8008796:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	eb05 060a 	add.w	r6, r5, sl
 80087a2:	42b3      	cmp	r3, r6
 80087a4:	b085      	sub	sp, #20
 80087a6:	bfb8      	it	lt
 80087a8:	3101      	addlt	r1, #1
 80087aa:	f7ff fedd 	bl	8008568 <_Balloc>
 80087ae:	b930      	cbnz	r0, 80087be <__multiply+0x42>
 80087b0:	4602      	mov	r2, r0
 80087b2:	4b41      	ldr	r3, [pc, #260]	@ (80088b8 <__multiply+0x13c>)
 80087b4:	4841      	ldr	r0, [pc, #260]	@ (80088bc <__multiply+0x140>)
 80087b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087ba:	f000 fe43 	bl	8009444 <__assert_func>
 80087be:	f100 0414 	add.w	r4, r0, #20
 80087c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087c6:	4623      	mov	r3, r4
 80087c8:	2200      	movs	r2, #0
 80087ca:	4573      	cmp	r3, lr
 80087cc:	d320      	bcc.n	8008810 <__multiply+0x94>
 80087ce:	f107 0814 	add.w	r8, r7, #20
 80087d2:	f109 0114 	add.w	r1, r9, #20
 80087d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	1beb      	subs	r3, r5, r7
 80087e2:	3b15      	subs	r3, #21
 80087e4:	f023 0303 	bic.w	r3, r3, #3
 80087e8:	3304      	adds	r3, #4
 80087ea:	3715      	adds	r7, #21
 80087ec:	42bd      	cmp	r5, r7
 80087ee:	bf38      	it	cc
 80087f0:	2304      	movcc	r3, #4
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	9103      	str	r1, [sp, #12]
 80087f8:	428b      	cmp	r3, r1
 80087fa:	d80c      	bhi.n	8008816 <__multiply+0x9a>
 80087fc:	2e00      	cmp	r6, #0
 80087fe:	dd03      	ble.n	8008808 <__multiply+0x8c>
 8008800:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008804:	2b00      	cmp	r3, #0
 8008806:	d055      	beq.n	80088b4 <__multiply+0x138>
 8008808:	6106      	str	r6, [r0, #16]
 800880a:	b005      	add	sp, #20
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	f843 2b04 	str.w	r2, [r3], #4
 8008814:	e7d9      	b.n	80087ca <__multiply+0x4e>
 8008816:	f8b1 a000 	ldrh.w	sl, [r1]
 800881a:	f1ba 0f00 	cmp.w	sl, #0
 800881e:	d01f      	beq.n	8008860 <__multiply+0xe4>
 8008820:	46c4      	mov	ip, r8
 8008822:	46a1      	mov	r9, r4
 8008824:	2700      	movs	r7, #0
 8008826:	f85c 2b04 	ldr.w	r2, [ip], #4
 800882a:	f8d9 3000 	ldr.w	r3, [r9]
 800882e:	fa1f fb82 	uxth.w	fp, r2
 8008832:	b29b      	uxth	r3, r3
 8008834:	fb0a 330b 	mla	r3, sl, fp, r3
 8008838:	443b      	add	r3, r7
 800883a:	f8d9 7000 	ldr.w	r7, [r9]
 800883e:	0c12      	lsrs	r2, r2, #16
 8008840:	0c3f      	lsrs	r7, r7, #16
 8008842:	fb0a 7202 	mla	r2, sl, r2, r7
 8008846:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800884a:	b29b      	uxth	r3, r3
 800884c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008850:	4565      	cmp	r5, ip
 8008852:	f849 3b04 	str.w	r3, [r9], #4
 8008856:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800885a:	d8e4      	bhi.n	8008826 <__multiply+0xaa>
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	50e7      	str	r7, [r4, r3]
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008866:	3104      	adds	r1, #4
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	d020      	beq.n	80088b0 <__multiply+0x134>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	4647      	mov	r7, r8
 8008872:	46a4      	mov	ip, r4
 8008874:	f04f 0a00 	mov.w	sl, #0
 8008878:	f8b7 b000 	ldrh.w	fp, [r7]
 800887c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008880:	fb09 220b 	mla	r2, r9, fp, r2
 8008884:	4452      	add	r2, sl
 8008886:	b29b      	uxth	r3, r3
 8008888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888c:	f84c 3b04 	str.w	r3, [ip], #4
 8008890:	f857 3b04 	ldr.w	r3, [r7], #4
 8008894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008898:	f8bc 3000 	ldrh.w	r3, [ip]
 800889c:	fb09 330a 	mla	r3, r9, sl, r3
 80088a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80088a4:	42bd      	cmp	r5, r7
 80088a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088aa:	d8e5      	bhi.n	8008878 <__multiply+0xfc>
 80088ac:	9a01      	ldr	r2, [sp, #4]
 80088ae:	50a3      	str	r3, [r4, r2]
 80088b0:	3404      	adds	r4, #4
 80088b2:	e79f      	b.n	80087f4 <__multiply+0x78>
 80088b4:	3e01      	subs	r6, #1
 80088b6:	e7a1      	b.n	80087fc <__multiply+0x80>
 80088b8:	0800a0d0 	.word	0x0800a0d0
 80088bc:	0800a0e1 	.word	0x0800a0e1

080088c0 <__pow5mult>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	4615      	mov	r5, r2
 80088c6:	f012 0203 	ands.w	r2, r2, #3
 80088ca:	4607      	mov	r7, r0
 80088cc:	460e      	mov	r6, r1
 80088ce:	d007      	beq.n	80088e0 <__pow5mult+0x20>
 80088d0:	4c25      	ldr	r4, [pc, #148]	@ (8008968 <__pow5mult+0xa8>)
 80088d2:	3a01      	subs	r2, #1
 80088d4:	2300      	movs	r3, #0
 80088d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088da:	f7ff fea7 	bl	800862c <__multadd>
 80088de:	4606      	mov	r6, r0
 80088e0:	10ad      	asrs	r5, r5, #2
 80088e2:	d03d      	beq.n	8008960 <__pow5mult+0xa0>
 80088e4:	69fc      	ldr	r4, [r7, #28]
 80088e6:	b97c      	cbnz	r4, 8008908 <__pow5mult+0x48>
 80088e8:	2010      	movs	r0, #16
 80088ea:	f7ff fd87 	bl	80083fc <malloc>
 80088ee:	4602      	mov	r2, r0
 80088f0:	61f8      	str	r0, [r7, #28]
 80088f2:	b928      	cbnz	r0, 8008900 <__pow5mult+0x40>
 80088f4:	4b1d      	ldr	r3, [pc, #116]	@ (800896c <__pow5mult+0xac>)
 80088f6:	481e      	ldr	r0, [pc, #120]	@ (8008970 <__pow5mult+0xb0>)
 80088f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088fc:	f000 fda2 	bl	8009444 <__assert_func>
 8008900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008904:	6004      	str	r4, [r0, #0]
 8008906:	60c4      	str	r4, [r0, #12]
 8008908:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800890c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008910:	b94c      	cbnz	r4, 8008926 <__pow5mult+0x66>
 8008912:	f240 2171 	movw	r1, #625	@ 0x271
 8008916:	4638      	mov	r0, r7
 8008918:	f7ff ff1a 	bl	8008750 <__i2b>
 800891c:	2300      	movs	r3, #0
 800891e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008922:	4604      	mov	r4, r0
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	f04f 0900 	mov.w	r9, #0
 800892a:	07eb      	lsls	r3, r5, #31
 800892c:	d50a      	bpl.n	8008944 <__pow5mult+0x84>
 800892e:	4631      	mov	r1, r6
 8008930:	4622      	mov	r2, r4
 8008932:	4638      	mov	r0, r7
 8008934:	f7ff ff22 	bl	800877c <__multiply>
 8008938:	4631      	mov	r1, r6
 800893a:	4680      	mov	r8, r0
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff fe53 	bl	80085e8 <_Bfree>
 8008942:	4646      	mov	r6, r8
 8008944:	106d      	asrs	r5, r5, #1
 8008946:	d00b      	beq.n	8008960 <__pow5mult+0xa0>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	b938      	cbnz	r0, 800895c <__pow5mult+0x9c>
 800894c:	4622      	mov	r2, r4
 800894e:	4621      	mov	r1, r4
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ff13 	bl	800877c <__multiply>
 8008956:	6020      	str	r0, [r4, #0]
 8008958:	f8c0 9000 	str.w	r9, [r0]
 800895c:	4604      	mov	r4, r0
 800895e:	e7e4      	b.n	800892a <__pow5mult+0x6a>
 8008960:	4630      	mov	r0, r6
 8008962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008966:	bf00      	nop
 8008968:	0800a194 	.word	0x0800a194
 800896c:	0800a061 	.word	0x0800a061
 8008970:	0800a0e1 	.word	0x0800a0e1

08008974 <__lshift>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	460c      	mov	r4, r1
 800897a:	6849      	ldr	r1, [r1, #4]
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	4607      	mov	r7, r0
 8008986:	4691      	mov	r9, r2
 8008988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800898c:	f108 0601 	add.w	r6, r8, #1
 8008990:	42b3      	cmp	r3, r6
 8008992:	db0b      	blt.n	80089ac <__lshift+0x38>
 8008994:	4638      	mov	r0, r7
 8008996:	f7ff fde7 	bl	8008568 <_Balloc>
 800899a:	4605      	mov	r5, r0
 800899c:	b948      	cbnz	r0, 80089b2 <__lshift+0x3e>
 800899e:	4602      	mov	r2, r0
 80089a0:	4b28      	ldr	r3, [pc, #160]	@ (8008a44 <__lshift+0xd0>)
 80089a2:	4829      	ldr	r0, [pc, #164]	@ (8008a48 <__lshift+0xd4>)
 80089a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089a8:	f000 fd4c 	bl	8009444 <__assert_func>
 80089ac:	3101      	adds	r1, #1
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	e7ee      	b.n	8008990 <__lshift+0x1c>
 80089b2:	2300      	movs	r3, #0
 80089b4:	f100 0114 	add.w	r1, r0, #20
 80089b8:	f100 0210 	add.w	r2, r0, #16
 80089bc:	4618      	mov	r0, r3
 80089be:	4553      	cmp	r3, sl
 80089c0:	db33      	blt.n	8008a2a <__lshift+0xb6>
 80089c2:	6920      	ldr	r0, [r4, #16]
 80089c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c8:	f104 0314 	add.w	r3, r4, #20
 80089cc:	f019 091f 	ands.w	r9, r9, #31
 80089d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089d8:	d02b      	beq.n	8008a32 <__lshift+0xbe>
 80089da:	f1c9 0e20 	rsb	lr, r9, #32
 80089de:	468a      	mov	sl, r1
 80089e0:	2200      	movs	r2, #0
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	fa00 f009 	lsl.w	r0, r0, r9
 80089e8:	4310      	orrs	r0, r2
 80089ea:	f84a 0b04 	str.w	r0, [sl], #4
 80089ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f2:	459c      	cmp	ip, r3
 80089f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80089f8:	d8f3      	bhi.n	80089e2 <__lshift+0x6e>
 80089fa:	ebac 0304 	sub.w	r3, ip, r4
 80089fe:	3b15      	subs	r3, #21
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	3304      	adds	r3, #4
 8008a06:	f104 0015 	add.w	r0, r4, #21
 8008a0a:	4560      	cmp	r0, ip
 8008a0c:	bf88      	it	hi
 8008a0e:	2304      	movhi	r3, #4
 8008a10:	50ca      	str	r2, [r1, r3]
 8008a12:	b10a      	cbz	r2, 8008a18 <__lshift+0xa4>
 8008a14:	f108 0602 	add.w	r6, r8, #2
 8008a18:	3e01      	subs	r6, #1
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	612e      	str	r6, [r5, #16]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f7ff fde2 	bl	80085e8 <_Bfree>
 8008a24:	4628      	mov	r0, r5
 8008a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a2e:	3301      	adds	r3, #1
 8008a30:	e7c5      	b.n	80089be <__lshift+0x4a>
 8008a32:	3904      	subs	r1, #4
 8008a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a38:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a3c:	459c      	cmp	ip, r3
 8008a3e:	d8f9      	bhi.n	8008a34 <__lshift+0xc0>
 8008a40:	e7ea      	b.n	8008a18 <__lshift+0xa4>
 8008a42:	bf00      	nop
 8008a44:	0800a0d0 	.word	0x0800a0d0
 8008a48:	0800a0e1 	.word	0x0800a0e1

08008a4c <__mcmp>:
 8008a4c:	690a      	ldr	r2, [r1, #16]
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6900      	ldr	r0, [r0, #16]
 8008a52:	1a80      	subs	r0, r0, r2
 8008a54:	b530      	push	{r4, r5, lr}
 8008a56:	d10e      	bne.n	8008a76 <__mcmp+0x2a>
 8008a58:	3314      	adds	r3, #20
 8008a5a:	3114      	adds	r1, #20
 8008a5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a6c:	4295      	cmp	r5, r2
 8008a6e:	d003      	beq.n	8008a78 <__mcmp+0x2c>
 8008a70:	d205      	bcs.n	8008a7e <__mcmp+0x32>
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295
 8008a76:	bd30      	pop	{r4, r5, pc}
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d3f3      	bcc.n	8008a64 <__mcmp+0x18>
 8008a7c:	e7fb      	b.n	8008a76 <__mcmp+0x2a>
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7f9      	b.n	8008a76 <__mcmp+0x2a>
	...

08008a84 <__mdiff>:
 8008a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	4689      	mov	r9, r1
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4648      	mov	r0, r9
 8008a90:	4614      	mov	r4, r2
 8008a92:	f7ff ffdb 	bl	8008a4c <__mcmp>
 8008a96:	1e05      	subs	r5, r0, #0
 8008a98:	d112      	bne.n	8008ac0 <__mdiff+0x3c>
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7ff fd63 	bl	8008568 <_Balloc>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	b928      	cbnz	r0, 8008ab2 <__mdiff+0x2e>
 8008aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba4 <__mdiff+0x120>)
 8008aa8:	f240 2137 	movw	r1, #567	@ 0x237
 8008aac:	483e      	ldr	r0, [pc, #248]	@ (8008ba8 <__mdiff+0x124>)
 8008aae:	f000 fcc9 	bl	8009444 <__assert_func>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ab8:	4610      	mov	r0, r2
 8008aba:	b003      	add	sp, #12
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	bfbc      	itt	lt
 8008ac2:	464b      	movlt	r3, r9
 8008ac4:	46a1      	movlt	r9, r4
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008acc:	bfba      	itte	lt
 8008ace:	461c      	movlt	r4, r3
 8008ad0:	2501      	movlt	r5, #1
 8008ad2:	2500      	movge	r5, #0
 8008ad4:	f7ff fd48 	bl	8008568 <_Balloc>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	b918      	cbnz	r0, 8008ae4 <__mdiff+0x60>
 8008adc:	4b31      	ldr	r3, [pc, #196]	@ (8008ba4 <__mdiff+0x120>)
 8008ade:	f240 2145 	movw	r1, #581	@ 0x245
 8008ae2:	e7e3      	b.n	8008aac <__mdiff+0x28>
 8008ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ae8:	6926      	ldr	r6, [r4, #16]
 8008aea:	60c5      	str	r5, [r0, #12]
 8008aec:	f109 0310 	add.w	r3, r9, #16
 8008af0:	f109 0514 	add.w	r5, r9, #20
 8008af4:	f104 0e14 	add.w	lr, r4, #20
 8008af8:	f100 0b14 	add.w	fp, r0, #20
 8008afc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	46d9      	mov	r9, fp
 8008b08:	f04f 0c00 	mov.w	ip, #0
 8008b0c:	9b01      	ldr	r3, [sp, #4]
 8008b0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	fa1f f38a 	uxth.w	r3, sl
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	b283      	uxth	r3, r0
 8008b20:	1acb      	subs	r3, r1, r3
 8008b22:	0c00      	lsrs	r0, r0, #16
 8008b24:	4463      	add	r3, ip
 8008b26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b34:	4576      	cmp	r6, lr
 8008b36:	f849 3b04 	str.w	r3, [r9], #4
 8008b3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b3e:	d8e5      	bhi.n	8008b0c <__mdiff+0x88>
 8008b40:	1b33      	subs	r3, r6, r4
 8008b42:	3b15      	subs	r3, #21
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	3415      	adds	r4, #21
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	42a6      	cmp	r6, r4
 8008b4e:	bf38      	it	cc
 8008b50:	2304      	movcc	r3, #4
 8008b52:	441d      	add	r5, r3
 8008b54:	445b      	add	r3, fp
 8008b56:	461e      	mov	r6, r3
 8008b58:	462c      	mov	r4, r5
 8008b5a:	4544      	cmp	r4, r8
 8008b5c:	d30e      	bcc.n	8008b7c <__mdiff+0xf8>
 8008b5e:	f108 0103 	add.w	r1, r8, #3
 8008b62:	1b49      	subs	r1, r1, r5
 8008b64:	f021 0103 	bic.w	r1, r1, #3
 8008b68:	3d03      	subs	r5, #3
 8008b6a:	45a8      	cmp	r8, r5
 8008b6c:	bf38      	it	cc
 8008b6e:	2100      	movcc	r1, #0
 8008b70:	440b      	add	r3, r1
 8008b72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b76:	b191      	cbz	r1, 8008b9e <__mdiff+0x11a>
 8008b78:	6117      	str	r7, [r2, #16]
 8008b7a:	e79d      	b.n	8008ab8 <__mdiff+0x34>
 8008b7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b80:	46e6      	mov	lr, ip
 8008b82:	0c08      	lsrs	r0, r1, #16
 8008b84:	fa1c fc81 	uxtah	ip, ip, r1
 8008b88:	4471      	add	r1, lr
 8008b8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b8e:	b289      	uxth	r1, r1
 8008b90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b94:	f846 1b04 	str.w	r1, [r6], #4
 8008b98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b9c:	e7dd      	b.n	8008b5a <__mdiff+0xd6>
 8008b9e:	3f01      	subs	r7, #1
 8008ba0:	e7e7      	b.n	8008b72 <__mdiff+0xee>
 8008ba2:	bf00      	nop
 8008ba4:	0800a0d0 	.word	0x0800a0d0
 8008ba8:	0800a0e1 	.word	0x0800a0e1

08008bac <__d2b>:
 8008bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bb0:	460f      	mov	r7, r1
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	ec59 8b10 	vmov	r8, r9, d0
 8008bb8:	4616      	mov	r6, r2
 8008bba:	f7ff fcd5 	bl	8008568 <_Balloc>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	b930      	cbnz	r0, 8008bd0 <__d2b+0x24>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4b23      	ldr	r3, [pc, #140]	@ (8008c54 <__d2b+0xa8>)
 8008bc6:	4824      	ldr	r0, [pc, #144]	@ (8008c58 <__d2b+0xac>)
 8008bc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bcc:	f000 fc3a 	bl	8009444 <__assert_func>
 8008bd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bd8:	b10d      	cbz	r5, 8008bde <__d2b+0x32>
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	f1b8 0300 	subs.w	r3, r8, #0
 8008be4:	d023      	beq.n	8008c2e <__d2b+0x82>
 8008be6:	4668      	mov	r0, sp
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	f7ff fd84 	bl	80086f6 <__lo0bits>
 8008bee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bf2:	b1d0      	cbz	r0, 8008c2a <__d2b+0x7e>
 8008bf4:	f1c0 0320 	rsb	r3, r0, #32
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	40c2      	lsrs	r2, r0
 8008c00:	6163      	str	r3, [r4, #20]
 8008c02:	9201      	str	r2, [sp, #4]
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	61a3      	str	r3, [r4, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2201      	moveq	r2, #1
 8008c0e:	2202      	movne	r2, #2
 8008c10:	6122      	str	r2, [r4, #16]
 8008c12:	b1a5      	cbz	r5, 8008c3e <__d2b+0x92>
 8008c14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c18:	4405      	add	r5, r0
 8008c1a:	603d      	str	r5, [r7, #0]
 8008c1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c20:	6030      	str	r0, [r6, #0]
 8008c22:	4620      	mov	r0, r4
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	6161      	str	r1, [r4, #20]
 8008c2c:	e7ea      	b.n	8008c04 <__d2b+0x58>
 8008c2e:	a801      	add	r0, sp, #4
 8008c30:	f7ff fd61 	bl	80086f6 <__lo0bits>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	3020      	adds	r0, #32
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	e7e8      	b.n	8008c10 <__d2b+0x64>
 8008c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c46:	6038      	str	r0, [r7, #0]
 8008c48:	6918      	ldr	r0, [r3, #16]
 8008c4a:	f7ff fd35 	bl	80086b8 <__hi0bits>
 8008c4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c52:	e7e5      	b.n	8008c20 <__d2b+0x74>
 8008c54:	0800a0d0 	.word	0x0800a0d0
 8008c58:	0800a0e1 	.word	0x0800a0e1

08008c5c <__ssputs_r>:
 8008c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c60:	688e      	ldr	r6, [r1, #8]
 8008c62:	461f      	mov	r7, r3
 8008c64:	42be      	cmp	r6, r7
 8008c66:	680b      	ldr	r3, [r1, #0]
 8008c68:	4682      	mov	sl, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	4690      	mov	r8, r2
 8008c6e:	d82d      	bhi.n	8008ccc <__ssputs_r+0x70>
 8008c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c78:	d026      	beq.n	8008cc8 <__ssputs_r+0x6c>
 8008c7a:	6965      	ldr	r5, [r4, #20]
 8008c7c:	6909      	ldr	r1, [r1, #16]
 8008c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c82:	eba3 0901 	sub.w	r9, r3, r1
 8008c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c8a:	1c7b      	adds	r3, r7, #1
 8008c8c:	444b      	add	r3, r9
 8008c8e:	106d      	asrs	r5, r5, #1
 8008c90:	429d      	cmp	r5, r3
 8008c92:	bf38      	it	cc
 8008c94:	461d      	movcc	r5, r3
 8008c96:	0553      	lsls	r3, r2, #21
 8008c98:	d527      	bpl.n	8008cea <__ssputs_r+0x8e>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f7ff fbd8 	bl	8008450 <_malloc_r>
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	b360      	cbz	r0, 8008cfe <__ssputs_r+0xa2>
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	464a      	mov	r2, r9
 8008ca8:	f7fe fcf5 	bl	8007696 <memcpy>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	6126      	str	r6, [r4, #16]
 8008cba:	6165      	str	r5, [r4, #20]
 8008cbc:	444e      	add	r6, r9
 8008cbe:	eba5 0509 	sub.w	r5, r5, r9
 8008cc2:	6026      	str	r6, [r4, #0]
 8008cc4:	60a5      	str	r5, [r4, #8]
 8008cc6:	463e      	mov	r6, r7
 8008cc8:	42be      	cmp	r6, r7
 8008cca:	d900      	bls.n	8008cce <__ssputs_r+0x72>
 8008ccc:	463e      	mov	r6, r7
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	f000 fb6a 	bl	80093ac <memmove>
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	1b9b      	subs	r3, r3, r6
 8008cdc:	60a3      	str	r3, [r4, #8]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	4433      	add	r3, r6
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	462a      	mov	r2, r5
 8008cec:	f000 fbee 	bl	80094cc <_realloc_r>
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d1e0      	bne.n	8008cb8 <__ssputs_r+0x5c>
 8008cf6:	6921      	ldr	r1, [r4, #16]
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	f7ff fb35 	bl	8008368 <_free_r>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	f8ca 3000 	str.w	r3, [sl]
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0a:	81a3      	strh	r3, [r4, #12]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	e7e9      	b.n	8008ce6 <__ssputs_r+0x8a>
	...

08008d14 <_svfiprintf_r>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	4698      	mov	r8, r3
 8008d1a:	898b      	ldrh	r3, [r1, #12]
 8008d1c:	061b      	lsls	r3, r3, #24
 8008d1e:	b09d      	sub	sp, #116	@ 0x74
 8008d20:	4607      	mov	r7, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	4614      	mov	r4, r2
 8008d26:	d510      	bpl.n	8008d4a <_svfiprintf_r+0x36>
 8008d28:	690b      	ldr	r3, [r1, #16]
 8008d2a:	b973      	cbnz	r3, 8008d4a <_svfiprintf_r+0x36>
 8008d2c:	2140      	movs	r1, #64	@ 0x40
 8008d2e:	f7ff fb8f 	bl	8008450 <_malloc_r>
 8008d32:	6028      	str	r0, [r5, #0]
 8008d34:	6128      	str	r0, [r5, #16]
 8008d36:	b930      	cbnz	r0, 8008d46 <_svfiprintf_r+0x32>
 8008d38:	230c      	movs	r3, #12
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	b01d      	add	sp, #116	@ 0x74
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	2340      	movs	r3, #64	@ 0x40
 8008d48:	616b      	str	r3, [r5, #20]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d4e:	2320      	movs	r3, #32
 8008d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d58:	2330      	movs	r3, #48	@ 0x30
 8008d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ef8 <_svfiprintf_r+0x1e4>
 8008d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d62:	f04f 0901 	mov.w	r9, #1
 8008d66:	4623      	mov	r3, r4
 8008d68:	469a      	mov	sl, r3
 8008d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d6e:	b10a      	cbz	r2, 8008d74 <_svfiprintf_r+0x60>
 8008d70:	2a25      	cmp	r2, #37	@ 0x25
 8008d72:	d1f9      	bne.n	8008d68 <_svfiprintf_r+0x54>
 8008d74:	ebba 0b04 	subs.w	fp, sl, r4
 8008d78:	d00b      	beq.n	8008d92 <_svfiprintf_r+0x7e>
 8008d7a:	465b      	mov	r3, fp
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4638      	mov	r0, r7
 8008d82:	f7ff ff6b 	bl	8008c5c <__ssputs_r>
 8008d86:	3001      	adds	r0, #1
 8008d88:	f000 80a7 	beq.w	8008eda <_svfiprintf_r+0x1c6>
 8008d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d8e:	445a      	add	r2, fp
 8008d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d92:	f89a 3000 	ldrb.w	r3, [sl]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 809f 	beq.w	8008eda <_svfiprintf_r+0x1c6>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008da6:	f10a 0a01 	add.w	sl, sl, #1
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	9307      	str	r3, [sp, #28]
 8008dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008db4:	4654      	mov	r4, sl
 8008db6:	2205      	movs	r2, #5
 8008db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dbc:	484e      	ldr	r0, [pc, #312]	@ (8008ef8 <_svfiprintf_r+0x1e4>)
 8008dbe:	f7f7 fa07 	bl	80001d0 <memchr>
 8008dc2:	9a04      	ldr	r2, [sp, #16]
 8008dc4:	b9d8      	cbnz	r0, 8008dfe <_svfiprintf_r+0xea>
 8008dc6:	06d0      	lsls	r0, r2, #27
 8008dc8:	bf44      	itt	mi
 8008dca:	2320      	movmi	r3, #32
 8008dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd0:	0711      	lsls	r1, r2, #28
 8008dd2:	bf44      	itt	mi
 8008dd4:	232b      	movmi	r3, #43	@ 0x2b
 8008dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dda:	f89a 3000 	ldrb.w	r3, [sl]
 8008dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de0:	d015      	beq.n	8008e0e <_svfiprintf_r+0xfa>
 8008de2:	9a07      	ldr	r2, [sp, #28]
 8008de4:	4654      	mov	r4, sl
 8008de6:	2000      	movs	r0, #0
 8008de8:	f04f 0c0a 	mov.w	ip, #10
 8008dec:	4621      	mov	r1, r4
 8008dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df2:	3b30      	subs	r3, #48	@ 0x30
 8008df4:	2b09      	cmp	r3, #9
 8008df6:	d94b      	bls.n	8008e90 <_svfiprintf_r+0x17c>
 8008df8:	b1b0      	cbz	r0, 8008e28 <_svfiprintf_r+0x114>
 8008dfa:	9207      	str	r2, [sp, #28]
 8008dfc:	e014      	b.n	8008e28 <_svfiprintf_r+0x114>
 8008dfe:	eba0 0308 	sub.w	r3, r0, r8
 8008e02:	fa09 f303 	lsl.w	r3, r9, r3
 8008e06:	4313      	orrs	r3, r2
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	46a2      	mov	sl, r4
 8008e0c:	e7d2      	b.n	8008db4 <_svfiprintf_r+0xa0>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	1d19      	adds	r1, r3, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	9103      	str	r1, [sp, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bfbb      	ittet	lt
 8008e1a:	425b      	neglt	r3, r3
 8008e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e20:	9307      	strge	r3, [sp, #28]
 8008e22:	9307      	strlt	r3, [sp, #28]
 8008e24:	bfb8      	it	lt
 8008e26:	9204      	strlt	r2, [sp, #16]
 8008e28:	7823      	ldrb	r3, [r4, #0]
 8008e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e2c:	d10a      	bne.n	8008e44 <_svfiprintf_r+0x130>
 8008e2e:	7863      	ldrb	r3, [r4, #1]
 8008e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e32:	d132      	bne.n	8008e9a <_svfiprintf_r+0x186>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	9203      	str	r2, [sp, #12]
 8008e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e40:	3402      	adds	r4, #2
 8008e42:	9305      	str	r3, [sp, #20]
 8008e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f08 <_svfiprintf_r+0x1f4>
 8008e48:	7821      	ldrb	r1, [r4, #0]
 8008e4a:	2203      	movs	r2, #3
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	f7f7 f9bf 	bl	80001d0 <memchr>
 8008e52:	b138      	cbz	r0, 8008e64 <_svfiprintf_r+0x150>
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	eba0 000a 	sub.w	r0, r0, sl
 8008e5a:	2240      	movs	r2, #64	@ 0x40
 8008e5c:	4082      	lsls	r2, r0
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	3401      	adds	r4, #1
 8008e62:	9304      	str	r3, [sp, #16]
 8008e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e68:	4824      	ldr	r0, [pc, #144]	@ (8008efc <_svfiprintf_r+0x1e8>)
 8008e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e6e:	2206      	movs	r2, #6
 8008e70:	f7f7 f9ae 	bl	80001d0 <memchr>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d036      	beq.n	8008ee6 <_svfiprintf_r+0x1d2>
 8008e78:	4b21      	ldr	r3, [pc, #132]	@ (8008f00 <_svfiprintf_r+0x1ec>)
 8008e7a:	bb1b      	cbnz	r3, 8008ec4 <_svfiprintf_r+0x1b0>
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	3307      	adds	r3, #7
 8008e80:	f023 0307 	bic.w	r3, r3, #7
 8008e84:	3308      	adds	r3, #8
 8008e86:	9303      	str	r3, [sp, #12]
 8008e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8a:	4433      	add	r3, r6
 8008e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e8e:	e76a      	b.n	8008d66 <_svfiprintf_r+0x52>
 8008e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e94:	460c      	mov	r4, r1
 8008e96:	2001      	movs	r0, #1
 8008e98:	e7a8      	b.n	8008dec <_svfiprintf_r+0xd8>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	3401      	adds	r4, #1
 8008e9e:	9305      	str	r3, [sp, #20]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f04f 0c0a 	mov.w	ip, #10
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eac:	3a30      	subs	r2, #48	@ 0x30
 8008eae:	2a09      	cmp	r2, #9
 8008eb0:	d903      	bls.n	8008eba <_svfiprintf_r+0x1a6>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0c6      	beq.n	8008e44 <_svfiprintf_r+0x130>
 8008eb6:	9105      	str	r1, [sp, #20]
 8008eb8:	e7c4      	b.n	8008e44 <_svfiprintf_r+0x130>
 8008eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e7f0      	b.n	8008ea6 <_svfiprintf_r+0x192>
 8008ec4:	ab03      	add	r3, sp, #12
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	462a      	mov	r2, r5
 8008eca:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <_svfiprintf_r+0x1f0>)
 8008ecc:	a904      	add	r1, sp, #16
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f7fd fd6c 	bl	80069ac <_printf_float>
 8008ed4:	1c42      	adds	r2, r0, #1
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	d1d6      	bne.n	8008e88 <_svfiprintf_r+0x174>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	065b      	lsls	r3, r3, #25
 8008ede:	f53f af2d 	bmi.w	8008d3c <_svfiprintf_r+0x28>
 8008ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ee4:	e72c      	b.n	8008d40 <_svfiprintf_r+0x2c>
 8008ee6:	ab03      	add	r3, sp, #12
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	462a      	mov	r2, r5
 8008eec:	4b05      	ldr	r3, [pc, #20]	@ (8008f04 <_svfiprintf_r+0x1f0>)
 8008eee:	a904      	add	r1, sp, #16
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7fd fff3 	bl	8006edc <_printf_i>
 8008ef6:	e7ed      	b.n	8008ed4 <_svfiprintf_r+0x1c0>
 8008ef8:	0800a13a 	.word	0x0800a13a
 8008efc:	0800a144 	.word	0x0800a144
 8008f00:	080069ad 	.word	0x080069ad
 8008f04:	08008c5d 	.word	0x08008c5d
 8008f08:	0800a140 	.word	0x0800a140

08008f0c <__sfputc_r>:
 8008f0c:	6893      	ldr	r3, [r2, #8]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	b410      	push	{r4}
 8008f14:	6093      	str	r3, [r2, #8]
 8008f16:	da08      	bge.n	8008f2a <__sfputc_r+0x1e>
 8008f18:	6994      	ldr	r4, [r2, #24]
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	db01      	blt.n	8008f22 <__sfputc_r+0x16>
 8008f1e:	290a      	cmp	r1, #10
 8008f20:	d103      	bne.n	8008f2a <__sfputc_r+0x1e>
 8008f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f26:	f7fe baa2 	b.w	800746e <__swbuf_r>
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	1c58      	adds	r0, r3, #1
 8008f2e:	6010      	str	r0, [r2, #0]
 8008f30:	7019      	strb	r1, [r3, #0]
 8008f32:	4608      	mov	r0, r1
 8008f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <__sfputs_r>:
 8008f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	460f      	mov	r7, r1
 8008f40:	4614      	mov	r4, r2
 8008f42:	18d5      	adds	r5, r2, r3
 8008f44:	42ac      	cmp	r4, r5
 8008f46:	d101      	bne.n	8008f4c <__sfputs_r+0x12>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e007      	b.n	8008f5c <__sfputs_r+0x22>
 8008f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f50:	463a      	mov	r2, r7
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ffda 	bl	8008f0c <__sfputc_r>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d1f3      	bne.n	8008f44 <__sfputs_r+0xa>
 8008f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f60 <_vfiprintf_r>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	460d      	mov	r5, r1
 8008f66:	b09d      	sub	sp, #116	@ 0x74
 8008f68:	4614      	mov	r4, r2
 8008f6a:	4698      	mov	r8, r3
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	b118      	cbz	r0, 8008f78 <_vfiprintf_r+0x18>
 8008f70:	6a03      	ldr	r3, [r0, #32]
 8008f72:	b90b      	cbnz	r3, 8008f78 <_vfiprintf_r+0x18>
 8008f74:	f7fe f95c 	bl	8007230 <__sinit>
 8008f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f7a:	07d9      	lsls	r1, r3, #31
 8008f7c:	d405      	bmi.n	8008f8a <_vfiprintf_r+0x2a>
 8008f7e:	89ab      	ldrh	r3, [r5, #12]
 8008f80:	059a      	lsls	r2, r3, #22
 8008f82:	d402      	bmi.n	8008f8a <_vfiprintf_r+0x2a>
 8008f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f86:	f7fe fb84 	bl	8007692 <__retarget_lock_acquire_recursive>
 8008f8a:	89ab      	ldrh	r3, [r5, #12]
 8008f8c:	071b      	lsls	r3, r3, #28
 8008f8e:	d501      	bpl.n	8008f94 <_vfiprintf_r+0x34>
 8008f90:	692b      	ldr	r3, [r5, #16]
 8008f92:	b99b      	cbnz	r3, 8008fbc <_vfiprintf_r+0x5c>
 8008f94:	4629      	mov	r1, r5
 8008f96:	4630      	mov	r0, r6
 8008f98:	f7fe faa8 	bl	80074ec <__swsetup_r>
 8008f9c:	b170      	cbz	r0, 8008fbc <_vfiprintf_r+0x5c>
 8008f9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fa0:	07dc      	lsls	r4, r3, #31
 8008fa2:	d504      	bpl.n	8008fae <_vfiprintf_r+0x4e>
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	b01d      	add	sp, #116	@ 0x74
 8008faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fae:	89ab      	ldrh	r3, [r5, #12]
 8008fb0:	0598      	lsls	r0, r3, #22
 8008fb2:	d4f7      	bmi.n	8008fa4 <_vfiprintf_r+0x44>
 8008fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fb6:	f7fe fb6d 	bl	8007694 <__retarget_lock_release_recursive>
 8008fba:	e7f3      	b.n	8008fa4 <_vfiprintf_r+0x44>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fca:	2330      	movs	r3, #48	@ 0x30
 8008fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800917c <_vfiprintf_r+0x21c>
 8008fd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fd4:	f04f 0901 	mov.w	r9, #1
 8008fd8:	4623      	mov	r3, r4
 8008fda:	469a      	mov	sl, r3
 8008fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe0:	b10a      	cbz	r2, 8008fe6 <_vfiprintf_r+0x86>
 8008fe2:	2a25      	cmp	r2, #37	@ 0x25
 8008fe4:	d1f9      	bne.n	8008fda <_vfiprintf_r+0x7a>
 8008fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8008fea:	d00b      	beq.n	8009004 <_vfiprintf_r+0xa4>
 8008fec:	465b      	mov	r3, fp
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ffa1 	bl	8008f3a <__sfputs_r>
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	f000 80a7 	beq.w	800914c <_vfiprintf_r+0x1ec>
 8008ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009000:	445a      	add	r2, fp
 8009002:	9209      	str	r2, [sp, #36]	@ 0x24
 8009004:	f89a 3000 	ldrb.w	r3, [sl]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 809f 	beq.w	800914c <_vfiprintf_r+0x1ec>
 800900e:	2300      	movs	r3, #0
 8009010:	f04f 32ff 	mov.w	r2, #4294967295
 8009014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009018:	f10a 0a01 	add.w	sl, sl, #1
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	9307      	str	r3, [sp, #28]
 8009020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009024:	931a      	str	r3, [sp, #104]	@ 0x68
 8009026:	4654      	mov	r4, sl
 8009028:	2205      	movs	r2, #5
 800902a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902e:	4853      	ldr	r0, [pc, #332]	@ (800917c <_vfiprintf_r+0x21c>)
 8009030:	f7f7 f8ce 	bl	80001d0 <memchr>
 8009034:	9a04      	ldr	r2, [sp, #16]
 8009036:	b9d8      	cbnz	r0, 8009070 <_vfiprintf_r+0x110>
 8009038:	06d1      	lsls	r1, r2, #27
 800903a:	bf44      	itt	mi
 800903c:	2320      	movmi	r3, #32
 800903e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009042:	0713      	lsls	r3, r2, #28
 8009044:	bf44      	itt	mi
 8009046:	232b      	movmi	r3, #43	@ 0x2b
 8009048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800904c:	f89a 3000 	ldrb.w	r3, [sl]
 8009050:	2b2a      	cmp	r3, #42	@ 0x2a
 8009052:	d015      	beq.n	8009080 <_vfiprintf_r+0x120>
 8009054:	9a07      	ldr	r2, [sp, #28]
 8009056:	4654      	mov	r4, sl
 8009058:	2000      	movs	r0, #0
 800905a:	f04f 0c0a 	mov.w	ip, #10
 800905e:	4621      	mov	r1, r4
 8009060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009064:	3b30      	subs	r3, #48	@ 0x30
 8009066:	2b09      	cmp	r3, #9
 8009068:	d94b      	bls.n	8009102 <_vfiprintf_r+0x1a2>
 800906a:	b1b0      	cbz	r0, 800909a <_vfiprintf_r+0x13a>
 800906c:	9207      	str	r2, [sp, #28]
 800906e:	e014      	b.n	800909a <_vfiprintf_r+0x13a>
 8009070:	eba0 0308 	sub.w	r3, r0, r8
 8009074:	fa09 f303 	lsl.w	r3, r9, r3
 8009078:	4313      	orrs	r3, r2
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	46a2      	mov	sl, r4
 800907e:	e7d2      	b.n	8009026 <_vfiprintf_r+0xc6>
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	1d19      	adds	r1, r3, #4
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	9103      	str	r1, [sp, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfbb      	ittet	lt
 800908c:	425b      	neglt	r3, r3
 800908e:	f042 0202 	orrlt.w	r2, r2, #2
 8009092:	9307      	strge	r3, [sp, #28]
 8009094:	9307      	strlt	r3, [sp, #28]
 8009096:	bfb8      	it	lt
 8009098:	9204      	strlt	r2, [sp, #16]
 800909a:	7823      	ldrb	r3, [r4, #0]
 800909c:	2b2e      	cmp	r3, #46	@ 0x2e
 800909e:	d10a      	bne.n	80090b6 <_vfiprintf_r+0x156>
 80090a0:	7863      	ldrb	r3, [r4, #1]
 80090a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090a4:	d132      	bne.n	800910c <_vfiprintf_r+0x1ac>
 80090a6:	9b03      	ldr	r3, [sp, #12]
 80090a8:	1d1a      	adds	r2, r3, #4
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	9203      	str	r2, [sp, #12]
 80090ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090b2:	3402      	adds	r4, #2
 80090b4:	9305      	str	r3, [sp, #20]
 80090b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800918c <_vfiprintf_r+0x22c>
 80090ba:	7821      	ldrb	r1, [r4, #0]
 80090bc:	2203      	movs	r2, #3
 80090be:	4650      	mov	r0, sl
 80090c0:	f7f7 f886 	bl	80001d0 <memchr>
 80090c4:	b138      	cbz	r0, 80090d6 <_vfiprintf_r+0x176>
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	eba0 000a 	sub.w	r0, r0, sl
 80090cc:	2240      	movs	r2, #64	@ 0x40
 80090ce:	4082      	lsls	r2, r0
 80090d0:	4313      	orrs	r3, r2
 80090d2:	3401      	adds	r4, #1
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090da:	4829      	ldr	r0, [pc, #164]	@ (8009180 <_vfiprintf_r+0x220>)
 80090dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090e0:	2206      	movs	r2, #6
 80090e2:	f7f7 f875 	bl	80001d0 <memchr>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d03f      	beq.n	800916a <_vfiprintf_r+0x20a>
 80090ea:	4b26      	ldr	r3, [pc, #152]	@ (8009184 <_vfiprintf_r+0x224>)
 80090ec:	bb1b      	cbnz	r3, 8009136 <_vfiprintf_r+0x1d6>
 80090ee:	9b03      	ldr	r3, [sp, #12]
 80090f0:	3307      	adds	r3, #7
 80090f2:	f023 0307 	bic.w	r3, r3, #7
 80090f6:	3308      	adds	r3, #8
 80090f8:	9303      	str	r3, [sp, #12]
 80090fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090fc:	443b      	add	r3, r7
 80090fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009100:	e76a      	b.n	8008fd8 <_vfiprintf_r+0x78>
 8009102:	fb0c 3202 	mla	r2, ip, r2, r3
 8009106:	460c      	mov	r4, r1
 8009108:	2001      	movs	r0, #1
 800910a:	e7a8      	b.n	800905e <_vfiprintf_r+0xfe>
 800910c:	2300      	movs	r3, #0
 800910e:	3401      	adds	r4, #1
 8009110:	9305      	str	r3, [sp, #20]
 8009112:	4619      	mov	r1, r3
 8009114:	f04f 0c0a 	mov.w	ip, #10
 8009118:	4620      	mov	r0, r4
 800911a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800911e:	3a30      	subs	r2, #48	@ 0x30
 8009120:	2a09      	cmp	r2, #9
 8009122:	d903      	bls.n	800912c <_vfiprintf_r+0x1cc>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0c6      	beq.n	80090b6 <_vfiprintf_r+0x156>
 8009128:	9105      	str	r1, [sp, #20]
 800912a:	e7c4      	b.n	80090b6 <_vfiprintf_r+0x156>
 800912c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009130:	4604      	mov	r4, r0
 8009132:	2301      	movs	r3, #1
 8009134:	e7f0      	b.n	8009118 <_vfiprintf_r+0x1b8>
 8009136:	ab03      	add	r3, sp, #12
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	462a      	mov	r2, r5
 800913c:	4b12      	ldr	r3, [pc, #72]	@ (8009188 <_vfiprintf_r+0x228>)
 800913e:	a904      	add	r1, sp, #16
 8009140:	4630      	mov	r0, r6
 8009142:	f7fd fc33 	bl	80069ac <_printf_float>
 8009146:	4607      	mov	r7, r0
 8009148:	1c78      	adds	r0, r7, #1
 800914a:	d1d6      	bne.n	80090fa <_vfiprintf_r+0x19a>
 800914c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800914e:	07d9      	lsls	r1, r3, #31
 8009150:	d405      	bmi.n	800915e <_vfiprintf_r+0x1fe>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	059a      	lsls	r2, r3, #22
 8009156:	d402      	bmi.n	800915e <_vfiprintf_r+0x1fe>
 8009158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800915a:	f7fe fa9b 	bl	8007694 <__retarget_lock_release_recursive>
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	065b      	lsls	r3, r3, #25
 8009162:	f53f af1f 	bmi.w	8008fa4 <_vfiprintf_r+0x44>
 8009166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009168:	e71e      	b.n	8008fa8 <_vfiprintf_r+0x48>
 800916a:	ab03      	add	r3, sp, #12
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	462a      	mov	r2, r5
 8009170:	4b05      	ldr	r3, [pc, #20]	@ (8009188 <_vfiprintf_r+0x228>)
 8009172:	a904      	add	r1, sp, #16
 8009174:	4630      	mov	r0, r6
 8009176:	f7fd feb1 	bl	8006edc <_printf_i>
 800917a:	e7e4      	b.n	8009146 <_vfiprintf_r+0x1e6>
 800917c:	0800a13a 	.word	0x0800a13a
 8009180:	0800a144 	.word	0x0800a144
 8009184:	080069ad 	.word	0x080069ad
 8009188:	08008f3b 	.word	0x08008f3b
 800918c:	0800a140 	.word	0x0800a140

08009190 <__sflush_r>:
 8009190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009198:	0716      	lsls	r6, r2, #28
 800919a:	4605      	mov	r5, r0
 800919c:	460c      	mov	r4, r1
 800919e:	d454      	bmi.n	800924a <__sflush_r+0xba>
 80091a0:	684b      	ldr	r3, [r1, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dc02      	bgt.n	80091ac <__sflush_r+0x1c>
 80091a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dd48      	ble.n	800923e <__sflush_r+0xae>
 80091ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091ae:	2e00      	cmp	r6, #0
 80091b0:	d045      	beq.n	800923e <__sflush_r+0xae>
 80091b2:	2300      	movs	r3, #0
 80091b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091b8:	682f      	ldr	r7, [r5, #0]
 80091ba:	6a21      	ldr	r1, [r4, #32]
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	d030      	beq.n	8009222 <__sflush_r+0x92>
 80091c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	0759      	lsls	r1, r3, #29
 80091c6:	d505      	bpl.n	80091d4 <__sflush_r+0x44>
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	1ad2      	subs	r2, r2, r3
 80091cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091ce:	b10b      	cbz	r3, 80091d4 <__sflush_r+0x44>
 80091d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091d2:	1ad2      	subs	r2, r2, r3
 80091d4:	2300      	movs	r3, #0
 80091d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091d8:	6a21      	ldr	r1, [r4, #32]
 80091da:	4628      	mov	r0, r5
 80091dc:	47b0      	blx	r6
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	d106      	bne.n	80091f2 <__sflush_r+0x62>
 80091e4:	6829      	ldr	r1, [r5, #0]
 80091e6:	291d      	cmp	r1, #29
 80091e8:	d82b      	bhi.n	8009242 <__sflush_r+0xb2>
 80091ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009294 <__sflush_r+0x104>)
 80091ec:	40ca      	lsrs	r2, r1
 80091ee:	07d6      	lsls	r6, r2, #31
 80091f0:	d527      	bpl.n	8009242 <__sflush_r+0xb2>
 80091f2:	2200      	movs	r2, #0
 80091f4:	6062      	str	r2, [r4, #4]
 80091f6:	04d9      	lsls	r1, r3, #19
 80091f8:	6922      	ldr	r2, [r4, #16]
 80091fa:	6022      	str	r2, [r4, #0]
 80091fc:	d504      	bpl.n	8009208 <__sflush_r+0x78>
 80091fe:	1c42      	adds	r2, r0, #1
 8009200:	d101      	bne.n	8009206 <__sflush_r+0x76>
 8009202:	682b      	ldr	r3, [r5, #0]
 8009204:	b903      	cbnz	r3, 8009208 <__sflush_r+0x78>
 8009206:	6560      	str	r0, [r4, #84]	@ 0x54
 8009208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800920a:	602f      	str	r7, [r5, #0]
 800920c:	b1b9      	cbz	r1, 800923e <__sflush_r+0xae>
 800920e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009212:	4299      	cmp	r1, r3
 8009214:	d002      	beq.n	800921c <__sflush_r+0x8c>
 8009216:	4628      	mov	r0, r5
 8009218:	f7ff f8a6 	bl	8008368 <_free_r>
 800921c:	2300      	movs	r3, #0
 800921e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009220:	e00d      	b.n	800923e <__sflush_r+0xae>
 8009222:	2301      	movs	r3, #1
 8009224:	4628      	mov	r0, r5
 8009226:	47b0      	blx	r6
 8009228:	4602      	mov	r2, r0
 800922a:	1c50      	adds	r0, r2, #1
 800922c:	d1c9      	bne.n	80091c2 <__sflush_r+0x32>
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d0c6      	beq.n	80091c2 <__sflush_r+0x32>
 8009234:	2b1d      	cmp	r3, #29
 8009236:	d001      	beq.n	800923c <__sflush_r+0xac>
 8009238:	2b16      	cmp	r3, #22
 800923a:	d11e      	bne.n	800927a <__sflush_r+0xea>
 800923c:	602f      	str	r7, [r5, #0]
 800923e:	2000      	movs	r0, #0
 8009240:	e022      	b.n	8009288 <__sflush_r+0xf8>
 8009242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009246:	b21b      	sxth	r3, r3
 8009248:	e01b      	b.n	8009282 <__sflush_r+0xf2>
 800924a:	690f      	ldr	r7, [r1, #16]
 800924c:	2f00      	cmp	r7, #0
 800924e:	d0f6      	beq.n	800923e <__sflush_r+0xae>
 8009250:	0793      	lsls	r3, r2, #30
 8009252:	680e      	ldr	r6, [r1, #0]
 8009254:	bf08      	it	eq
 8009256:	694b      	ldreq	r3, [r1, #20]
 8009258:	600f      	str	r7, [r1, #0]
 800925a:	bf18      	it	ne
 800925c:	2300      	movne	r3, #0
 800925e:	eba6 0807 	sub.w	r8, r6, r7
 8009262:	608b      	str	r3, [r1, #8]
 8009264:	f1b8 0f00 	cmp.w	r8, #0
 8009268:	dde9      	ble.n	800923e <__sflush_r+0xae>
 800926a:	6a21      	ldr	r1, [r4, #32]
 800926c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800926e:	4643      	mov	r3, r8
 8009270:	463a      	mov	r2, r7
 8009272:	4628      	mov	r0, r5
 8009274:	47b0      	blx	r6
 8009276:	2800      	cmp	r0, #0
 8009278:	dc08      	bgt.n	800928c <__sflush_r+0xfc>
 800927a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009282:	81a3      	strh	r3, [r4, #12]
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	4407      	add	r7, r0
 800928e:	eba8 0800 	sub.w	r8, r8, r0
 8009292:	e7e7      	b.n	8009264 <__sflush_r+0xd4>
 8009294:	20400001 	.word	0x20400001

08009298 <_fflush_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	690b      	ldr	r3, [r1, #16]
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	b913      	cbnz	r3, 80092a8 <_fflush_r+0x10>
 80092a2:	2500      	movs	r5, #0
 80092a4:	4628      	mov	r0, r5
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	b118      	cbz	r0, 80092b2 <_fflush_r+0x1a>
 80092aa:	6a03      	ldr	r3, [r0, #32]
 80092ac:	b90b      	cbnz	r3, 80092b2 <_fflush_r+0x1a>
 80092ae:	f7fd ffbf 	bl	8007230 <__sinit>
 80092b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0f3      	beq.n	80092a2 <_fflush_r+0xa>
 80092ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092bc:	07d0      	lsls	r0, r2, #31
 80092be:	d404      	bmi.n	80092ca <_fflush_r+0x32>
 80092c0:	0599      	lsls	r1, r3, #22
 80092c2:	d402      	bmi.n	80092ca <_fflush_r+0x32>
 80092c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092c6:	f7fe f9e4 	bl	8007692 <__retarget_lock_acquire_recursive>
 80092ca:	4628      	mov	r0, r5
 80092cc:	4621      	mov	r1, r4
 80092ce:	f7ff ff5f 	bl	8009190 <__sflush_r>
 80092d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092d4:	07da      	lsls	r2, r3, #31
 80092d6:	4605      	mov	r5, r0
 80092d8:	d4e4      	bmi.n	80092a4 <_fflush_r+0xc>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	059b      	lsls	r3, r3, #22
 80092de:	d4e1      	bmi.n	80092a4 <_fflush_r+0xc>
 80092e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092e2:	f7fe f9d7 	bl	8007694 <__retarget_lock_release_recursive>
 80092e6:	e7dd      	b.n	80092a4 <_fflush_r+0xc>

080092e8 <__swhatbuf_r>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	460c      	mov	r4, r1
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	2900      	cmp	r1, #0
 80092f2:	b096      	sub	sp, #88	@ 0x58
 80092f4:	4615      	mov	r5, r2
 80092f6:	461e      	mov	r6, r3
 80092f8:	da0d      	bge.n	8009316 <__swhatbuf_r+0x2e>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009300:	f04f 0100 	mov.w	r1, #0
 8009304:	bf14      	ite	ne
 8009306:	2340      	movne	r3, #64	@ 0x40
 8009308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800930c:	2000      	movs	r0, #0
 800930e:	6031      	str	r1, [r6, #0]
 8009310:	602b      	str	r3, [r5, #0]
 8009312:	b016      	add	sp, #88	@ 0x58
 8009314:	bd70      	pop	{r4, r5, r6, pc}
 8009316:	466a      	mov	r2, sp
 8009318:	f000 f862 	bl	80093e0 <_fstat_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	dbec      	blt.n	80092fa <__swhatbuf_r+0x12>
 8009320:	9901      	ldr	r1, [sp, #4]
 8009322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800932a:	4259      	negs	r1, r3
 800932c:	4159      	adcs	r1, r3
 800932e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009332:	e7eb      	b.n	800930c <__swhatbuf_r+0x24>

08009334 <__smakebuf_r>:
 8009334:	898b      	ldrh	r3, [r1, #12]
 8009336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009338:	079d      	lsls	r5, r3, #30
 800933a:	4606      	mov	r6, r0
 800933c:	460c      	mov	r4, r1
 800933e:	d507      	bpl.n	8009350 <__smakebuf_r+0x1c>
 8009340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	2301      	movs	r3, #1
 800934a:	6163      	str	r3, [r4, #20]
 800934c:	b003      	add	sp, #12
 800934e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009350:	ab01      	add	r3, sp, #4
 8009352:	466a      	mov	r2, sp
 8009354:	f7ff ffc8 	bl	80092e8 <__swhatbuf_r>
 8009358:	9f00      	ldr	r7, [sp, #0]
 800935a:	4605      	mov	r5, r0
 800935c:	4639      	mov	r1, r7
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff f876 	bl	8008450 <_malloc_r>
 8009364:	b948      	cbnz	r0, 800937a <__smakebuf_r+0x46>
 8009366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800936a:	059a      	lsls	r2, r3, #22
 800936c:	d4ee      	bmi.n	800934c <__smakebuf_r+0x18>
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	f043 0302 	orr.w	r3, r3, #2
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	e7e2      	b.n	8009340 <__smakebuf_r+0xc>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	6020      	str	r0, [r4, #0]
 800937e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800938a:	b15b      	cbz	r3, 80093a4 <__smakebuf_r+0x70>
 800938c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009390:	4630      	mov	r0, r6
 8009392:	f000 f837 	bl	8009404 <_isatty_r>
 8009396:	b128      	cbz	r0, 80093a4 <__smakebuf_r+0x70>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	f043 0301 	orr.w	r3, r3, #1
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	431d      	orrs	r5, r3
 80093a8:	81a5      	strh	r5, [r4, #12]
 80093aa:	e7cf      	b.n	800934c <__smakebuf_r+0x18>

080093ac <memmove>:
 80093ac:	4288      	cmp	r0, r1
 80093ae:	b510      	push	{r4, lr}
 80093b0:	eb01 0402 	add.w	r4, r1, r2
 80093b4:	d902      	bls.n	80093bc <memmove+0x10>
 80093b6:	4284      	cmp	r4, r0
 80093b8:	4623      	mov	r3, r4
 80093ba:	d807      	bhi.n	80093cc <memmove+0x20>
 80093bc:	1e43      	subs	r3, r0, #1
 80093be:	42a1      	cmp	r1, r4
 80093c0:	d008      	beq.n	80093d4 <memmove+0x28>
 80093c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ca:	e7f8      	b.n	80093be <memmove+0x12>
 80093cc:	4402      	add	r2, r0
 80093ce:	4601      	mov	r1, r0
 80093d0:	428a      	cmp	r2, r1
 80093d2:	d100      	bne.n	80093d6 <memmove+0x2a>
 80093d4:	bd10      	pop	{r4, pc}
 80093d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093de:	e7f7      	b.n	80093d0 <memmove+0x24>

080093e0 <_fstat_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	@ (8009400 <_fstat_r+0x20>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	4611      	mov	r1, r2
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	f7f9 f98a 	bl	8002706 <_fstat>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d102      	bne.n	80093fc <_fstat_r+0x1c>
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	b103      	cbz	r3, 80093fc <_fstat_r+0x1c>
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	200005c0 	.word	0x200005c0

08009404 <_isatty_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d06      	ldr	r5, [pc, #24]	@ (8009420 <_isatty_r+0x1c>)
 8009408:	2300      	movs	r3, #0
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	f7f9 f989 	bl	8002726 <_isatty>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_isatty_r+0x1a>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_isatty_r+0x1a>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	200005c0 	.word	0x200005c0

08009424 <_sbrk_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	@ (8009440 <_sbrk_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f9 f992 	bl	8002758 <_sbrk>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_sbrk_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_sbrk_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	200005c0 	.word	0x200005c0

08009444 <__assert_func>:
 8009444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009446:	4614      	mov	r4, r2
 8009448:	461a      	mov	r2, r3
 800944a:	4b09      	ldr	r3, [pc, #36]	@ (8009470 <__assert_func+0x2c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4605      	mov	r5, r0
 8009450:	68d8      	ldr	r0, [r3, #12]
 8009452:	b14c      	cbz	r4, 8009468 <__assert_func+0x24>
 8009454:	4b07      	ldr	r3, [pc, #28]	@ (8009474 <__assert_func+0x30>)
 8009456:	9100      	str	r1, [sp, #0]
 8009458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800945c:	4906      	ldr	r1, [pc, #24]	@ (8009478 <__assert_func+0x34>)
 800945e:	462b      	mov	r3, r5
 8009460:	f000 f870 	bl	8009544 <fiprintf>
 8009464:	f000 f880 	bl	8009568 <abort>
 8009468:	4b04      	ldr	r3, [pc, #16]	@ (800947c <__assert_func+0x38>)
 800946a:	461c      	mov	r4, r3
 800946c:	e7f3      	b.n	8009456 <__assert_func+0x12>
 800946e:	bf00      	nop
 8009470:	20000020 	.word	0x20000020
 8009474:	0800a155 	.word	0x0800a155
 8009478:	0800a162 	.word	0x0800a162
 800947c:	0800a190 	.word	0x0800a190

08009480 <_calloc_r>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	fba1 5402 	umull	r5, r4, r1, r2
 8009486:	b934      	cbnz	r4, 8009496 <_calloc_r+0x16>
 8009488:	4629      	mov	r1, r5
 800948a:	f7fe ffe1 	bl	8008450 <_malloc_r>
 800948e:	4606      	mov	r6, r0
 8009490:	b928      	cbnz	r0, 800949e <_calloc_r+0x1e>
 8009492:	4630      	mov	r0, r6
 8009494:	bd70      	pop	{r4, r5, r6, pc}
 8009496:	220c      	movs	r2, #12
 8009498:	6002      	str	r2, [r0, #0]
 800949a:	2600      	movs	r6, #0
 800949c:	e7f9      	b.n	8009492 <_calloc_r+0x12>
 800949e:	462a      	mov	r2, r5
 80094a0:	4621      	mov	r1, r4
 80094a2:	f7fe f879 	bl	8007598 <memset>
 80094a6:	e7f4      	b.n	8009492 <_calloc_r+0x12>

080094a8 <__ascii_mbtowc>:
 80094a8:	b082      	sub	sp, #8
 80094aa:	b901      	cbnz	r1, 80094ae <__ascii_mbtowc+0x6>
 80094ac:	a901      	add	r1, sp, #4
 80094ae:	b142      	cbz	r2, 80094c2 <__ascii_mbtowc+0x1a>
 80094b0:	b14b      	cbz	r3, 80094c6 <__ascii_mbtowc+0x1e>
 80094b2:	7813      	ldrb	r3, [r2, #0]
 80094b4:	600b      	str	r3, [r1, #0]
 80094b6:	7812      	ldrb	r2, [r2, #0]
 80094b8:	1e10      	subs	r0, r2, #0
 80094ba:	bf18      	it	ne
 80094bc:	2001      	movne	r0, #1
 80094be:	b002      	add	sp, #8
 80094c0:	4770      	bx	lr
 80094c2:	4610      	mov	r0, r2
 80094c4:	e7fb      	b.n	80094be <__ascii_mbtowc+0x16>
 80094c6:	f06f 0001 	mvn.w	r0, #1
 80094ca:	e7f8      	b.n	80094be <__ascii_mbtowc+0x16>

080094cc <_realloc_r>:
 80094cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	4607      	mov	r7, r0
 80094d2:	4614      	mov	r4, r2
 80094d4:	460d      	mov	r5, r1
 80094d6:	b921      	cbnz	r1, 80094e2 <_realloc_r+0x16>
 80094d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094dc:	4611      	mov	r1, r2
 80094de:	f7fe bfb7 	b.w	8008450 <_malloc_r>
 80094e2:	b92a      	cbnz	r2, 80094f0 <_realloc_r+0x24>
 80094e4:	f7fe ff40 	bl	8008368 <_free_r>
 80094e8:	4625      	mov	r5, r4
 80094ea:	4628      	mov	r0, r5
 80094ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f0:	f000 f841 	bl	8009576 <_malloc_usable_size_r>
 80094f4:	4284      	cmp	r4, r0
 80094f6:	4606      	mov	r6, r0
 80094f8:	d802      	bhi.n	8009500 <_realloc_r+0x34>
 80094fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094fe:	d8f4      	bhi.n	80094ea <_realloc_r+0x1e>
 8009500:	4621      	mov	r1, r4
 8009502:	4638      	mov	r0, r7
 8009504:	f7fe ffa4 	bl	8008450 <_malloc_r>
 8009508:	4680      	mov	r8, r0
 800950a:	b908      	cbnz	r0, 8009510 <_realloc_r+0x44>
 800950c:	4645      	mov	r5, r8
 800950e:	e7ec      	b.n	80094ea <_realloc_r+0x1e>
 8009510:	42b4      	cmp	r4, r6
 8009512:	4622      	mov	r2, r4
 8009514:	4629      	mov	r1, r5
 8009516:	bf28      	it	cs
 8009518:	4632      	movcs	r2, r6
 800951a:	f7fe f8bc 	bl	8007696 <memcpy>
 800951e:	4629      	mov	r1, r5
 8009520:	4638      	mov	r0, r7
 8009522:	f7fe ff21 	bl	8008368 <_free_r>
 8009526:	e7f1      	b.n	800950c <_realloc_r+0x40>

08009528 <__ascii_wctomb>:
 8009528:	4603      	mov	r3, r0
 800952a:	4608      	mov	r0, r1
 800952c:	b141      	cbz	r1, 8009540 <__ascii_wctomb+0x18>
 800952e:	2aff      	cmp	r2, #255	@ 0xff
 8009530:	d904      	bls.n	800953c <__ascii_wctomb+0x14>
 8009532:	228a      	movs	r2, #138	@ 0x8a
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	4770      	bx	lr
 800953c:	700a      	strb	r2, [r1, #0]
 800953e:	2001      	movs	r0, #1
 8009540:	4770      	bx	lr
	...

08009544 <fiprintf>:
 8009544:	b40e      	push	{r1, r2, r3}
 8009546:	b503      	push	{r0, r1, lr}
 8009548:	4601      	mov	r1, r0
 800954a:	ab03      	add	r3, sp, #12
 800954c:	4805      	ldr	r0, [pc, #20]	@ (8009564 <fiprintf+0x20>)
 800954e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009552:	6800      	ldr	r0, [r0, #0]
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	f7ff fd03 	bl	8008f60 <_vfiprintf_r>
 800955a:	b002      	add	sp, #8
 800955c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009560:	b003      	add	sp, #12
 8009562:	4770      	bx	lr
 8009564:	20000020 	.word	0x20000020

08009568 <abort>:
 8009568:	b508      	push	{r3, lr}
 800956a:	2006      	movs	r0, #6
 800956c:	f000 f834 	bl	80095d8 <raise>
 8009570:	2001      	movs	r0, #1
 8009572:	f7f9 f894 	bl	800269e <_exit>

08009576 <_malloc_usable_size_r>:
 8009576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957a:	1f18      	subs	r0, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	bfbc      	itt	lt
 8009580:	580b      	ldrlt	r3, [r1, r0]
 8009582:	18c0      	addlt	r0, r0, r3
 8009584:	4770      	bx	lr

08009586 <_raise_r>:
 8009586:	291f      	cmp	r1, #31
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4605      	mov	r5, r0
 800958c:	460c      	mov	r4, r1
 800958e:	d904      	bls.n	800959a <_raise_r+0x14>
 8009590:	2316      	movs	r3, #22
 8009592:	6003      	str	r3, [r0, #0]
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	bd38      	pop	{r3, r4, r5, pc}
 800959a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800959c:	b112      	cbz	r2, 80095a4 <_raise_r+0x1e>
 800959e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095a2:	b94b      	cbnz	r3, 80095b8 <_raise_r+0x32>
 80095a4:	4628      	mov	r0, r5
 80095a6:	f000 f831 	bl	800960c <_getpid_r>
 80095aa:	4622      	mov	r2, r4
 80095ac:	4601      	mov	r1, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b4:	f000 b818 	b.w	80095e8 <_kill_r>
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d00a      	beq.n	80095d2 <_raise_r+0x4c>
 80095bc:	1c59      	adds	r1, r3, #1
 80095be:	d103      	bne.n	80095c8 <_raise_r+0x42>
 80095c0:	2316      	movs	r3, #22
 80095c2:	6003      	str	r3, [r0, #0]
 80095c4:	2001      	movs	r0, #1
 80095c6:	e7e7      	b.n	8009598 <_raise_r+0x12>
 80095c8:	2100      	movs	r1, #0
 80095ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095ce:	4620      	mov	r0, r4
 80095d0:	4798      	blx	r3
 80095d2:	2000      	movs	r0, #0
 80095d4:	e7e0      	b.n	8009598 <_raise_r+0x12>
	...

080095d8 <raise>:
 80095d8:	4b02      	ldr	r3, [pc, #8]	@ (80095e4 <raise+0xc>)
 80095da:	4601      	mov	r1, r0
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	f7ff bfd2 	b.w	8009586 <_raise_r>
 80095e2:	bf00      	nop
 80095e4:	20000020 	.word	0x20000020

080095e8 <_kill_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d07      	ldr	r5, [pc, #28]	@ (8009608 <_kill_r+0x20>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	602b      	str	r3, [r5, #0]
 80095f6:	f7f9 f842 	bl	800267e <_kill>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	d102      	bne.n	8009604 <_kill_r+0x1c>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	b103      	cbz	r3, 8009604 <_kill_r+0x1c>
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	bd38      	pop	{r3, r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	200005c0 	.word	0x200005c0

0800960c <_getpid_r>:
 800960c:	f7f9 b82f 	b.w	800266e <_getpid>

08009610 <powf>:
 8009610:	b508      	push	{r3, lr}
 8009612:	ed2d 8b04 	vpush	{d8-d9}
 8009616:	eeb0 8a60 	vmov.f32	s16, s1
 800961a:	eeb0 9a40 	vmov.f32	s18, s0
 800961e:	f000 f87b 	bl	8009718 <__ieee754_powf>
 8009622:	eeb4 8a48 	vcmp.f32	s16, s16
 8009626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962a:	eef0 8a40 	vmov.f32	s17, s0
 800962e:	d63e      	bvs.n	80096ae <powf+0x9e>
 8009630:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009638:	d112      	bne.n	8009660 <powf+0x50>
 800963a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800963e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009642:	d039      	beq.n	80096b8 <powf+0xa8>
 8009644:	eeb0 0a48 	vmov.f32	s0, s16
 8009648:	f000 f858 	bl	80096fc <finitef>
 800964c:	b378      	cbz	r0, 80096ae <powf+0x9e>
 800964e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009656:	d52a      	bpl.n	80096ae <powf+0x9e>
 8009658:	f7fd fff0 	bl	800763c <__errno>
 800965c:	2322      	movs	r3, #34	@ 0x22
 800965e:	e014      	b.n	800968a <powf+0x7a>
 8009660:	f000 f84c 	bl	80096fc <finitef>
 8009664:	b998      	cbnz	r0, 800968e <powf+0x7e>
 8009666:	eeb0 0a49 	vmov.f32	s0, s18
 800966a:	f000 f847 	bl	80096fc <finitef>
 800966e:	b170      	cbz	r0, 800968e <powf+0x7e>
 8009670:	eeb0 0a48 	vmov.f32	s0, s16
 8009674:	f000 f842 	bl	80096fc <finitef>
 8009678:	b148      	cbz	r0, 800968e <powf+0x7e>
 800967a:	eef4 8a68 	vcmp.f32	s17, s17
 800967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009682:	d7e9      	bvc.n	8009658 <powf+0x48>
 8009684:	f7fd ffda 	bl	800763c <__errno>
 8009688:	2321      	movs	r3, #33	@ 0x21
 800968a:	6003      	str	r3, [r0, #0]
 800968c:	e00f      	b.n	80096ae <powf+0x9e>
 800968e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009696:	d10a      	bne.n	80096ae <powf+0x9e>
 8009698:	eeb0 0a49 	vmov.f32	s0, s18
 800969c:	f000 f82e 	bl	80096fc <finitef>
 80096a0:	b128      	cbz	r0, 80096ae <powf+0x9e>
 80096a2:	eeb0 0a48 	vmov.f32	s0, s16
 80096a6:	f000 f829 	bl	80096fc <finitef>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d1d4      	bne.n	8009658 <powf+0x48>
 80096ae:	eeb0 0a68 	vmov.f32	s0, s17
 80096b2:	ecbd 8b04 	vpop	{d8-d9}
 80096b6:	bd08      	pop	{r3, pc}
 80096b8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80096bc:	e7f7      	b.n	80096ae <powf+0x9e>
	...

080096c0 <sqrtf>:
 80096c0:	b508      	push	{r3, lr}
 80096c2:	ed2d 8b02 	vpush	{d8}
 80096c6:	eeb0 8a40 	vmov.f32	s16, s0
 80096ca:	f000 f821 	bl	8009710 <__ieee754_sqrtf>
 80096ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	d60c      	bvs.n	80096f2 <sqrtf+0x32>
 80096d8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80096f8 <sqrtf+0x38>
 80096dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80096e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e4:	d505      	bpl.n	80096f2 <sqrtf+0x32>
 80096e6:	f7fd ffa9 	bl	800763c <__errno>
 80096ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80096ee:	2321      	movs	r3, #33	@ 0x21
 80096f0:	6003      	str	r3, [r0, #0]
 80096f2:	ecbd 8b02 	vpop	{d8}
 80096f6:	bd08      	pop	{r3, pc}
 80096f8:	00000000 	.word	0x00000000

080096fc <finitef>:
 80096fc:	ee10 3a10 	vmov	r3, s0
 8009700:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009704:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009708:	bfac      	ite	ge
 800970a:	2000      	movge	r0, #0
 800970c:	2001      	movlt	r0, #1
 800970e:	4770      	bx	lr

08009710 <__ieee754_sqrtf>:
 8009710:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009714:	4770      	bx	lr
	...

08009718 <__ieee754_powf>:
 8009718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800971c:	ee10 4a90 	vmov	r4, s1
 8009720:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8009724:	ed2d 8b02 	vpush	{d8}
 8009728:	ee10 6a10 	vmov	r6, s0
 800972c:	eeb0 8a40 	vmov.f32	s16, s0
 8009730:	eef0 8a60 	vmov.f32	s17, s1
 8009734:	d10c      	bne.n	8009750 <__ieee754_powf+0x38>
 8009736:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800973a:	0076      	lsls	r6, r6, #1
 800973c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009740:	f240 8274 	bls.w	8009c2c <__ieee754_powf+0x514>
 8009744:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009748:	ecbd 8b02 	vpop	{d8}
 800974c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009750:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8009754:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009758:	d802      	bhi.n	8009760 <__ieee754_powf+0x48>
 800975a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800975e:	d908      	bls.n	8009772 <__ieee754_powf+0x5a>
 8009760:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009764:	d1ee      	bne.n	8009744 <__ieee754_powf+0x2c>
 8009766:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800976a:	0064      	lsls	r4, r4, #1
 800976c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009770:	e7e6      	b.n	8009740 <__ieee754_powf+0x28>
 8009772:	2e00      	cmp	r6, #0
 8009774:	da1f      	bge.n	80097b6 <__ieee754_powf+0x9e>
 8009776:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800977a:	f080 8260 	bcs.w	8009c3e <__ieee754_powf+0x526>
 800977e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009782:	d32f      	bcc.n	80097e4 <__ieee754_powf+0xcc>
 8009784:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009788:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800978c:	fa49 f503 	asr.w	r5, r9, r3
 8009790:	fa05 f303 	lsl.w	r3, r5, r3
 8009794:	454b      	cmp	r3, r9
 8009796:	d123      	bne.n	80097e0 <__ieee754_powf+0xc8>
 8009798:	f005 0501 	and.w	r5, r5, #1
 800979c:	f1c5 0502 	rsb	r5, r5, #2
 80097a0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80097a4:	d11f      	bne.n	80097e6 <__ieee754_powf+0xce>
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	f280 8246 	bge.w	8009c38 <__ieee754_powf+0x520>
 80097ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80097b0:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80097b4:	e7c8      	b.n	8009748 <__ieee754_powf+0x30>
 80097b6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80097ba:	d111      	bne.n	80097e0 <__ieee754_powf+0xc8>
 80097bc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80097c0:	f000 8234 	beq.w	8009c2c <__ieee754_powf+0x514>
 80097c4:	d906      	bls.n	80097d4 <__ieee754_powf+0xbc>
 80097c6:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009adc <__ieee754_powf+0x3c4>
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	bfa8      	it	ge
 80097ce:	eeb0 0a68 	vmovge.f32	s0, s17
 80097d2:	e7b9      	b.n	8009748 <__ieee754_powf+0x30>
 80097d4:	2c00      	cmp	r4, #0
 80097d6:	f280 822c 	bge.w	8009c32 <__ieee754_powf+0x51a>
 80097da:	eeb1 0a68 	vneg.f32	s0, s17
 80097de:	e7b3      	b.n	8009748 <__ieee754_powf+0x30>
 80097e0:	2500      	movs	r5, #0
 80097e2:	e7dd      	b.n	80097a0 <__ieee754_powf+0x88>
 80097e4:	2500      	movs	r5, #0
 80097e6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80097ea:	d102      	bne.n	80097f2 <__ieee754_powf+0xda>
 80097ec:	ee28 0a08 	vmul.f32	s0, s16, s16
 80097f0:	e7aa      	b.n	8009748 <__ieee754_powf+0x30>
 80097f2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80097f6:	f040 8227 	bne.w	8009c48 <__ieee754_powf+0x530>
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	f2c0 8224 	blt.w	8009c48 <__ieee754_powf+0x530>
 8009800:	eeb0 0a48 	vmov.f32	s0, s16
 8009804:	ecbd 8b02 	vpop	{d8}
 8009808:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800980c:	f7ff bf80 	b.w	8009710 <__ieee754_sqrtf>
 8009810:	2d01      	cmp	r5, #1
 8009812:	d199      	bne.n	8009748 <__ieee754_powf+0x30>
 8009814:	eeb1 0a40 	vneg.f32	s0, s0
 8009818:	e796      	b.n	8009748 <__ieee754_powf+0x30>
 800981a:	0ff0      	lsrs	r0, r6, #31
 800981c:	3801      	subs	r0, #1
 800981e:	ea55 0300 	orrs.w	r3, r5, r0
 8009822:	d104      	bne.n	800982e <__ieee754_powf+0x116>
 8009824:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009828:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800982c:	e78c      	b.n	8009748 <__ieee754_powf+0x30>
 800982e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8009832:	d96d      	bls.n	8009910 <__ieee754_powf+0x1f8>
 8009834:	4baa      	ldr	r3, [pc, #680]	@ (8009ae0 <__ieee754_powf+0x3c8>)
 8009836:	4598      	cmp	r8, r3
 8009838:	d808      	bhi.n	800984c <__ieee754_powf+0x134>
 800983a:	2c00      	cmp	r4, #0
 800983c:	da0b      	bge.n	8009856 <__ieee754_powf+0x13e>
 800983e:	2000      	movs	r0, #0
 8009840:	ecbd 8b02 	vpop	{d8}
 8009844:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	f000 bac2 	b.w	8009dd0 <__math_oflowf>
 800984c:	4ba5      	ldr	r3, [pc, #660]	@ (8009ae4 <__ieee754_powf+0x3cc>)
 800984e:	4598      	cmp	r8, r3
 8009850:	d908      	bls.n	8009864 <__ieee754_powf+0x14c>
 8009852:	2c00      	cmp	r4, #0
 8009854:	dcf3      	bgt.n	800983e <__ieee754_powf+0x126>
 8009856:	2000      	movs	r0, #0
 8009858:	ecbd 8b02 	vpop	{d8}
 800985c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009860:	f000 bab0 	b.w	8009dc4 <__math_uflowf>
 8009864:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009868:	ee30 0a67 	vsub.f32	s0, s0, s15
 800986c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009ae8 <__ieee754_powf+0x3d0>
 8009870:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009874:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009878:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800987c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009880:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009884:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009aec <__ieee754_powf+0x3d4>
 8009888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800988c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009af0 <__ieee754_powf+0x3d8>
 8009890:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009894:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009af4 <__ieee754_powf+0x3dc>
 8009898:	eee0 7a07 	vfma.f32	s15, s0, s14
 800989c:	eeb0 7a67 	vmov.f32	s14, s15
 80098a0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80098a4:	ee17 3a10 	vmov	r3, s14
 80098a8:	f36f 030b 	bfc	r3, #0, #12
 80098ac:	ee07 3a10 	vmov	s14, r3
 80098b0:	eeb0 6a47 	vmov.f32	s12, s14
 80098b4:	eea0 6a66 	vfms.f32	s12, s0, s13
 80098b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80098bc:	3d01      	subs	r5, #1
 80098be:	4305      	orrs	r5, r0
 80098c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098c4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80098c8:	f36f 040b 	bfc	r4, #0, #12
 80098cc:	bf18      	it	ne
 80098ce:	eeb0 8a66 	vmovne.f32	s16, s13
 80098d2:	ee06 4a90 	vmov	s13, r4
 80098d6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80098da:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80098de:	ee67 7a26 	vmul.f32	s15, s14, s13
 80098e2:	eee6 0a07 	vfma.f32	s1, s12, s14
 80098e6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80098ea:	ee17 1a10 	vmov	r1, s14
 80098ee:	2900      	cmp	r1, #0
 80098f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80098f4:	f340 80dd 	ble.w	8009ab2 <__ieee754_powf+0x39a>
 80098f8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80098fc:	f240 80ca 	bls.w	8009a94 <__ieee754_powf+0x37c>
 8009900:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009908:	bf4c      	ite	mi
 800990a:	2001      	movmi	r0, #1
 800990c:	2000      	movpl	r0, #0
 800990e:	e797      	b.n	8009840 <__ieee754_powf+0x128>
 8009910:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009914:	bf01      	itttt	eq
 8009916:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009af8 <__ieee754_powf+0x3e0>
 800991a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800991e:	f06f 0317 	mvneq.w	r3, #23
 8009922:	ee17 7a90 	vmoveq	r7, s15
 8009926:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800992a:	bf18      	it	ne
 800992c:	2300      	movne	r3, #0
 800992e:	3a7f      	subs	r2, #127	@ 0x7f
 8009930:	441a      	add	r2, r3
 8009932:	4b72      	ldr	r3, [pc, #456]	@ (8009afc <__ieee754_powf+0x3e4>)
 8009934:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009938:	429f      	cmp	r7, r3
 800993a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800993e:	dd06      	ble.n	800994e <__ieee754_powf+0x236>
 8009940:	4b6f      	ldr	r3, [pc, #444]	@ (8009b00 <__ieee754_powf+0x3e8>)
 8009942:	429f      	cmp	r7, r3
 8009944:	f340 80a4 	ble.w	8009a90 <__ieee754_powf+0x378>
 8009948:	3201      	adds	r2, #1
 800994a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800994e:	2600      	movs	r6, #0
 8009950:	4b6c      	ldr	r3, [pc, #432]	@ (8009b04 <__ieee754_powf+0x3ec>)
 8009952:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009956:	ee07 1a10 	vmov	s14, r1
 800995a:	edd3 5a00 	vldr	s11, [r3]
 800995e:	4b6a      	ldr	r3, [pc, #424]	@ (8009b08 <__ieee754_powf+0x3f0>)
 8009960:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009968:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800996c:	1049      	asrs	r1, r1, #1
 800996e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8009972:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8009976:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800997a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800997e:	ee07 1a90 	vmov	s15, r1
 8009982:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009986:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800998a:	ee15 7a10 	vmov	r7, s10
 800998e:	401f      	ands	r7, r3
 8009990:	ee06 7a90 	vmov	s13, r7
 8009994:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009998:	ee37 7a65 	vsub.f32	s14, s14, s11
 800999c:	ee65 7a05 	vmul.f32	s15, s10, s10
 80099a0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80099a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009b0c <__ieee754_powf+0x3f4>
 80099a8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009b10 <__ieee754_powf+0x3f8>
 80099ac:	eee7 5a87 	vfma.f32	s11, s15, s14
 80099b0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009b14 <__ieee754_powf+0x3fc>
 80099b4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80099b8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009ae8 <__ieee754_powf+0x3d0>
 80099bc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80099c0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009b18 <__ieee754_powf+0x400>
 80099c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80099c8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009b1c <__ieee754_powf+0x404>
 80099cc:	ee26 6a24 	vmul.f32	s12, s12, s9
 80099d0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80099d4:	ee35 7a26 	vadd.f32	s14, s10, s13
 80099d8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80099dc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80099e0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80099e4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80099e8:	eef0 5a67 	vmov.f32	s11, s15
 80099ec:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80099f0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80099f4:	ee15 1a90 	vmov	r1, s11
 80099f8:	4019      	ands	r1, r3
 80099fa:	ee05 1a90 	vmov	s11, r1
 80099fe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009a02:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a0a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009a0e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009a12:	eeb0 6a67 	vmov.f32	s12, s15
 8009a16:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009a1a:	ee16 1a10 	vmov	r1, s12
 8009a1e:	4019      	ands	r1, r3
 8009a20:	ee06 1a10 	vmov	s12, r1
 8009a24:	eeb0 7a46 	vmov.f32	s14, s12
 8009a28:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009a2c:	493c      	ldr	r1, [pc, #240]	@ (8009b20 <__ieee754_powf+0x408>)
 8009a2e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a36:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009b24 <__ieee754_powf+0x40c>
 8009a3a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009b28 <__ieee754_powf+0x410>
 8009a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a42:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009b2c <__ieee754_powf+0x414>
 8009a46:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009a4a:	ed91 7a00 	vldr	s14, [r1]
 8009a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a52:	ee07 2a10 	vmov	s14, r2
 8009a56:	4a36      	ldr	r2, [pc, #216]	@ (8009b30 <__ieee754_powf+0x418>)
 8009a58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009a5c:	eeb0 7a67 	vmov.f32	s14, s15
 8009a60:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009a64:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009a68:	ed92 5a00 	vldr	s10, [r2]
 8009a6c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009a70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009a74:	ee17 2a10 	vmov	r2, s14
 8009a78:	401a      	ands	r2, r3
 8009a7a:	ee07 2a10 	vmov	s14, r2
 8009a7e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009a82:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009a86:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009a8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009a8e:	e715      	b.n	80098bc <__ieee754_powf+0x1a4>
 8009a90:	2601      	movs	r6, #1
 8009a92:	e75d      	b.n	8009950 <__ieee754_powf+0x238>
 8009a94:	d152      	bne.n	8009b3c <__ieee754_powf+0x424>
 8009a96:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009b34 <__ieee754_powf+0x41c>
 8009a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a9e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009aa2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aaa:	f73f af29 	bgt.w	8009900 <__ieee754_powf+0x1e8>
 8009aae:	2386      	movs	r3, #134	@ 0x86
 8009ab0:	e048      	b.n	8009b44 <__ieee754_powf+0x42c>
 8009ab2:	4a21      	ldr	r2, [pc, #132]	@ (8009b38 <__ieee754_powf+0x420>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d907      	bls.n	8009ac8 <__ieee754_powf+0x3b0>
 8009ab8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac0:	bf4c      	ite	mi
 8009ac2:	2001      	movmi	r0, #1
 8009ac4:	2000      	movpl	r0, #0
 8009ac6:	e6c7      	b.n	8009858 <__ieee754_powf+0x140>
 8009ac8:	d138      	bne.n	8009b3c <__ieee754_powf+0x424>
 8009aca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ace:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad6:	dbea      	blt.n	8009aae <__ieee754_powf+0x396>
 8009ad8:	e7ee      	b.n	8009ab8 <__ieee754_powf+0x3a0>
 8009ada:	bf00      	nop
 8009adc:	00000000 	.word	0x00000000
 8009ae0:	3f7ffff3 	.word	0x3f7ffff3
 8009ae4:	3f800007 	.word	0x3f800007
 8009ae8:	3eaaaaab 	.word	0x3eaaaaab
 8009aec:	3fb8aa00 	.word	0x3fb8aa00
 8009af0:	3fb8aa3b 	.word	0x3fb8aa3b
 8009af4:	36eca570 	.word	0x36eca570
 8009af8:	4b800000 	.word	0x4b800000
 8009afc:	001cc471 	.word	0x001cc471
 8009b00:	005db3d6 	.word	0x005db3d6
 8009b04:	0800a3a4 	.word	0x0800a3a4
 8009b08:	fffff000 	.word	0xfffff000
 8009b0c:	3e6c3255 	.word	0x3e6c3255
 8009b10:	3e53f142 	.word	0x3e53f142
 8009b14:	3e8ba305 	.word	0x3e8ba305
 8009b18:	3edb6db7 	.word	0x3edb6db7
 8009b1c:	3f19999a 	.word	0x3f19999a
 8009b20:	0800a394 	.word	0x0800a394
 8009b24:	3f76384f 	.word	0x3f76384f
 8009b28:	3f763800 	.word	0x3f763800
 8009b2c:	369dc3a0 	.word	0x369dc3a0
 8009b30:	0800a39c 	.word	0x0800a39c
 8009b34:	3338aa3c 	.word	0x3338aa3c
 8009b38:	43160000 	.word	0x43160000
 8009b3c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009b40:	d96f      	bls.n	8009c22 <__ieee754_powf+0x50a>
 8009b42:	15db      	asrs	r3, r3, #23
 8009b44:	3b7e      	subs	r3, #126	@ 0x7e
 8009b46:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009b4a:	4118      	asrs	r0, r3
 8009b4c:	4408      	add	r0, r1
 8009b4e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009b52:	4a4e      	ldr	r2, [pc, #312]	@ (8009c8c <__ieee754_powf+0x574>)
 8009b54:	3b7f      	subs	r3, #127	@ 0x7f
 8009b56:	411a      	asrs	r2, r3
 8009b58:	4002      	ands	r2, r0
 8009b5a:	ee07 2a10 	vmov	s14, r2
 8009b5e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009b62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009b66:	f1c3 0317 	rsb	r3, r3, #23
 8009b6a:	4118      	asrs	r0, r3
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b72:	bfb8      	it	lt
 8009b74:	4240      	neglt	r0, r0
 8009b76:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009b7a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009c90 <__ieee754_powf+0x578>
 8009b7e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009c94 <__ieee754_powf+0x57c>
 8009b82:	ee16 3a90 	vmov	r3, s13
 8009b86:	f36f 030b 	bfc	r3, #0, #12
 8009b8a:	ee06 3a90 	vmov	s13, r3
 8009b8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009b92:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009b96:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009b9a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009c98 <__ieee754_powf+0x580>
 8009b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ba2:	eee0 7a87 	vfma.f32	s15, s1, s14
 8009ba6:	eeb0 7a67 	vmov.f32	s14, s15
 8009baa:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009bae:	eef0 5a47 	vmov.f32	s11, s14
 8009bb2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8009bb6:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009bba:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009bbe:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009c9c <__ieee754_powf+0x584>
 8009bc2:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009ca0 <__ieee754_powf+0x588>
 8009bc6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009bca:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009ca4 <__ieee754_powf+0x58c>
 8009bce:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009bd2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009ca8 <__ieee754_powf+0x590>
 8009bd6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8009bda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009cac <__ieee754_powf+0x594>
 8009bde:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009be2:	eeb0 6a47 	vmov.f32	s12, s14
 8009be6:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8009bea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009bee:	ee67 5a06 	vmul.f32	s11, s14, s12
 8009bf2:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009bf6:	eee7 7a27 	vfma.f32	s15, s14, s15
 8009bfa:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009bfe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009c02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c0a:	ee10 3a10 	vmov	r3, s0
 8009c0e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009c12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c16:	da06      	bge.n	8009c26 <__ieee754_powf+0x50e>
 8009c18:	f000 f854 	bl	8009cc4 <scalbnf>
 8009c1c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009c20:	e592      	b.n	8009748 <__ieee754_powf+0x30>
 8009c22:	2000      	movs	r0, #0
 8009c24:	e7a7      	b.n	8009b76 <__ieee754_powf+0x45e>
 8009c26:	ee00 3a10 	vmov	s0, r3
 8009c2a:	e7f7      	b.n	8009c1c <__ieee754_powf+0x504>
 8009c2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009c30:	e58a      	b.n	8009748 <__ieee754_powf+0x30>
 8009c32:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009cb0 <__ieee754_powf+0x598>
 8009c36:	e587      	b.n	8009748 <__ieee754_powf+0x30>
 8009c38:	eeb0 0a48 	vmov.f32	s0, s16
 8009c3c:	e584      	b.n	8009748 <__ieee754_powf+0x30>
 8009c3e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009c42:	f43f adbb 	beq.w	80097bc <__ieee754_powf+0xa4>
 8009c46:	2502      	movs	r5, #2
 8009c48:	eeb0 0a48 	vmov.f32	s0, s16
 8009c4c:	f000 f832 	bl	8009cb4 <fabsf>
 8009c50:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009c54:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009c58:	4647      	mov	r7, r8
 8009c5a:	d003      	beq.n	8009c64 <__ieee754_powf+0x54c>
 8009c5c:	f1b8 0f00 	cmp.w	r8, #0
 8009c60:	f47f addb 	bne.w	800981a <__ieee754_powf+0x102>
 8009c64:	2c00      	cmp	r4, #0
 8009c66:	bfbc      	itt	lt
 8009c68:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009c6c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009c70:	2e00      	cmp	r6, #0
 8009c72:	f6bf ad69 	bge.w	8009748 <__ieee754_powf+0x30>
 8009c76:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009c7a:	ea58 0805 	orrs.w	r8, r8, r5
 8009c7e:	f47f adc7 	bne.w	8009810 <__ieee754_powf+0xf8>
 8009c82:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009c86:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009c8a:	e55d      	b.n	8009748 <__ieee754_powf+0x30>
 8009c8c:	ff800000 	.word	0xff800000
 8009c90:	3f317218 	.word	0x3f317218
 8009c94:	3f317200 	.word	0x3f317200
 8009c98:	35bfbe8c 	.word	0x35bfbe8c
 8009c9c:	b5ddea0e 	.word	0xb5ddea0e
 8009ca0:	3331bb4c 	.word	0x3331bb4c
 8009ca4:	388ab355 	.word	0x388ab355
 8009ca8:	bb360b61 	.word	0xbb360b61
 8009cac:	3e2aaaab 	.word	0x3e2aaaab
 8009cb0:	00000000 	.word	0x00000000

08009cb4 <fabsf>:
 8009cb4:	ee10 3a10 	vmov	r3, s0
 8009cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009cbc:	ee00 3a10 	vmov	s0, r3
 8009cc0:	4770      	bx	lr
	...

08009cc4 <scalbnf>:
 8009cc4:	ee10 3a10 	vmov	r3, s0
 8009cc8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009ccc:	d02b      	beq.n	8009d26 <scalbnf+0x62>
 8009cce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009cd2:	d302      	bcc.n	8009cda <scalbnf+0x16>
 8009cd4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009cd8:	4770      	bx	lr
 8009cda:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009cde:	d123      	bne.n	8009d28 <scalbnf+0x64>
 8009ce0:	4b24      	ldr	r3, [pc, #144]	@ (8009d74 <scalbnf+0xb0>)
 8009ce2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009d78 <scalbnf+0xb4>
 8009ce6:	4298      	cmp	r0, r3
 8009ce8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009cec:	db17      	blt.n	8009d1e <scalbnf+0x5a>
 8009cee:	ee10 3a10 	vmov	r3, s0
 8009cf2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009cf6:	3a19      	subs	r2, #25
 8009cf8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009cfc:	4288      	cmp	r0, r1
 8009cfe:	dd15      	ble.n	8009d2c <scalbnf+0x68>
 8009d00:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009d7c <scalbnf+0xb8>
 8009d04:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009d80 <scalbnf+0xbc>
 8009d08:	ee10 3a10 	vmov	r3, s0
 8009d0c:	eeb0 7a67 	vmov.f32	s14, s15
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bfb8      	it	lt
 8009d14:	eef0 7a66 	vmovlt.f32	s15, s13
 8009d18:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009d1c:	4770      	bx	lr
 8009d1e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009d84 <scalbnf+0xc0>
 8009d22:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d26:	4770      	bx	lr
 8009d28:	0dd2      	lsrs	r2, r2, #23
 8009d2a:	e7e5      	b.n	8009cf8 <scalbnf+0x34>
 8009d2c:	4410      	add	r0, r2
 8009d2e:	28fe      	cmp	r0, #254	@ 0xfe
 8009d30:	dce6      	bgt.n	8009d00 <scalbnf+0x3c>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	dd06      	ble.n	8009d44 <scalbnf+0x80>
 8009d36:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d3a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009d3e:	ee00 3a10 	vmov	s0, r3
 8009d42:	4770      	bx	lr
 8009d44:	f110 0f16 	cmn.w	r0, #22
 8009d48:	da09      	bge.n	8009d5e <scalbnf+0x9a>
 8009d4a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009d84 <scalbnf+0xc0>
 8009d4e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009d88 <scalbnf+0xc4>
 8009d52:	ee10 3a10 	vmov	r3, s0
 8009d56:	eeb0 7a67 	vmov.f32	s14, s15
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	e7d9      	b.n	8009d12 <scalbnf+0x4e>
 8009d5e:	3019      	adds	r0, #25
 8009d60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d64:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009d68:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009d8c <scalbnf+0xc8>
 8009d6c:	ee07 3a90 	vmov	s15, r3
 8009d70:	e7d7      	b.n	8009d22 <scalbnf+0x5e>
 8009d72:	bf00      	nop
 8009d74:	ffff3cb0 	.word	0xffff3cb0
 8009d78:	4c000000 	.word	0x4c000000
 8009d7c:	7149f2ca 	.word	0x7149f2ca
 8009d80:	f149f2ca 	.word	0xf149f2ca
 8009d84:	0da24260 	.word	0x0da24260
 8009d88:	8da24260 	.word	0x8da24260
 8009d8c:	33000000 	.word	0x33000000

08009d90 <with_errnof>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	ed2d 8b02 	vpush	{d8}
 8009d96:	eeb0 8a40 	vmov.f32	s16, s0
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	f7fd fc4e 	bl	800763c <__errno>
 8009da0:	eeb0 0a48 	vmov.f32	s0, s16
 8009da4:	ecbd 8b02 	vpop	{d8}
 8009da8:	6004      	str	r4, [r0, #0]
 8009daa:	bd10      	pop	{r4, pc}

08009dac <xflowf>:
 8009dac:	b130      	cbz	r0, 8009dbc <xflowf+0x10>
 8009dae:	eef1 7a40 	vneg.f32	s15, s0
 8009db2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009db6:	2022      	movs	r0, #34	@ 0x22
 8009db8:	f7ff bfea 	b.w	8009d90 <with_errnof>
 8009dbc:	eef0 7a40 	vmov.f32	s15, s0
 8009dc0:	e7f7      	b.n	8009db2 <xflowf+0x6>
	...

08009dc4 <__math_uflowf>:
 8009dc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009dcc <__math_uflowf+0x8>
 8009dc8:	f7ff bff0 	b.w	8009dac <xflowf>
 8009dcc:	10000000 	.word	0x10000000

08009dd0 <__math_oflowf>:
 8009dd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009dd8 <__math_oflowf+0x8>
 8009dd4:	f7ff bfea 	b.w	8009dac <xflowf>
 8009dd8:	70000000 	.word	0x70000000

08009ddc <_init>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr

08009de8 <_fini>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr
